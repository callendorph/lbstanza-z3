; This file was auto-generated by lbstanza-wrapper
; Version 0.3.0
; Manual editing would be unwise
defpackage z3/Enums/Z3_lbool :
  import core

public deftype Z3_lbool <: Equalable
public deftype Z3_L_FALSE <: Z3_lbool
public deftype Z3_L_UNDEF <: Z3_lbool
public deftype Z3_L_TRUE <: Z3_lbool

public val Z3_L_FALSE = new Z3_L_FALSE
public val Z3_L_UNDEF = new Z3_L_UNDEF
public val Z3_L_TRUE = new Z3_L_TRUE

public defn to-int (v:Z3_lbool) -> Int:
  match(v) :
    (x:Z3_L_FALSE) : -1
    (x:Z3_L_UNDEF) : 0
    (x:Z3_L_TRUE) : 1

public defn Z3_lbool (v:Int) -> Z3_lbool :
  switch {v == _}:
    -1 : Z3_L_FALSE
    0 : Z3_L_UNDEF
    1 : Z3_L_TRUE
    else: throw(Exception("Z3_lbool: Invalid Enum Value: %_" % [v]))

public lostanza defn Z3_lbool (v:int) -> ref<Z3_lbool> :
  return Z3_lbool(new Int{v})

public defmethod print (o:OutputStream, v:Z3_lbool) :
  match(v) :
    (x:Z3_L_FALSE) : print(o, "Z3_L_FALSE")
    (x:Z3_L_UNDEF) : print(o, "Z3_L_UNDEF")
    (x:Z3_L_TRUE) : print(o, "Z3_L_TRUE")

public defmethod equal? (a:Z3_lbool, b:Z3_lbool) -> True|False :
  to-int(a) == to-int(b)

