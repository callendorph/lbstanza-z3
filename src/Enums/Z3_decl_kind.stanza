; This file was auto-generated by lbstanza-wrapper
; Version 0.3.0
; Manual editing would be unwise
defpackage z3/Enums/Z3_decl_kind :
  import core

public deftype Z3_decl_kind <: Equalable
public deftype Z3_OP_TRUE <: Z3_decl_kind
public deftype Z3_OP_FALSE <: Z3_decl_kind
public deftype Z3_OP_EQ <: Z3_decl_kind
public deftype Z3_OP_DISTINCT <: Z3_decl_kind
public deftype Z3_OP_ITE <: Z3_decl_kind
public deftype Z3_OP_AND <: Z3_decl_kind
public deftype Z3_OP_OR <: Z3_decl_kind
public deftype Z3_OP_IFF <: Z3_decl_kind
public deftype Z3_OP_XOR <: Z3_decl_kind
public deftype Z3_OP_NOT <: Z3_decl_kind
public deftype Z3_OP_IMPLIES <: Z3_decl_kind
public deftype Z3_OP_OEQ <: Z3_decl_kind
public deftype Z3_OP_ANUM <: Z3_decl_kind
public deftype Z3_OP_AGNUM <: Z3_decl_kind
public deftype Z3_OP_LE <: Z3_decl_kind
public deftype Z3_OP_GE <: Z3_decl_kind
public deftype Z3_OP_LT <: Z3_decl_kind
public deftype Z3_OP_GT <: Z3_decl_kind
public deftype Z3_OP_ADD <: Z3_decl_kind
public deftype Z3_OP_SUB <: Z3_decl_kind
public deftype Z3_OP_UMINUS <: Z3_decl_kind
public deftype Z3_OP_MUL <: Z3_decl_kind
public deftype Z3_OP_DIV <: Z3_decl_kind
public deftype Z3_OP_IDIV <: Z3_decl_kind
public deftype Z3_OP_REM <: Z3_decl_kind
public deftype Z3_OP_MOD <: Z3_decl_kind
public deftype Z3_OP_TO_REAL <: Z3_decl_kind
public deftype Z3_OP_TO_INT <: Z3_decl_kind
public deftype Z3_OP_IS_INT <: Z3_decl_kind
public deftype Z3_OP_POWER <: Z3_decl_kind
public deftype Z3_OP_STORE <: Z3_decl_kind
public deftype Z3_OP_SELECT <: Z3_decl_kind
public deftype Z3_OP_CONST_ARRAY <: Z3_decl_kind
public deftype Z3_OP_ARRAY_MAP <: Z3_decl_kind
public deftype Z3_OP_ARRAY_DEFAULT <: Z3_decl_kind
public deftype Z3_OP_SET_UNION <: Z3_decl_kind
public deftype Z3_OP_SET_INTERSECT <: Z3_decl_kind
public deftype Z3_OP_SET_DIFFERENCE <: Z3_decl_kind
public deftype Z3_OP_SET_COMPLEMENT <: Z3_decl_kind
public deftype Z3_OP_SET_SUBSET <: Z3_decl_kind
public deftype Z3_OP_AS_ARRAY <: Z3_decl_kind
public deftype Z3_OP_ARRAY_EXT <: Z3_decl_kind
public deftype Z3_OP_SET_HAS_SIZE <: Z3_decl_kind
public deftype Z3_OP_SET_CARD <: Z3_decl_kind
public deftype Z3_OP_BNUM <: Z3_decl_kind
public deftype Z3_OP_BIT1 <: Z3_decl_kind
public deftype Z3_OP_BIT0 <: Z3_decl_kind
public deftype Z3_OP_BNEG <: Z3_decl_kind
public deftype Z3_OP_BADD <: Z3_decl_kind
public deftype Z3_OP_BSUB <: Z3_decl_kind
public deftype Z3_OP_BMUL <: Z3_decl_kind
public deftype Z3_OP_BSDIV <: Z3_decl_kind
public deftype Z3_OP_BUDIV <: Z3_decl_kind
public deftype Z3_OP_BSREM <: Z3_decl_kind
public deftype Z3_OP_BUREM <: Z3_decl_kind
public deftype Z3_OP_BSMOD <: Z3_decl_kind
public deftype Z3_OP_BSDIV0 <: Z3_decl_kind
public deftype Z3_OP_BUDIV0 <: Z3_decl_kind
public deftype Z3_OP_BSREM0 <: Z3_decl_kind
public deftype Z3_OP_BUREM0 <: Z3_decl_kind
public deftype Z3_OP_BSMOD0 <: Z3_decl_kind
public deftype Z3_OP_ULEQ <: Z3_decl_kind
public deftype Z3_OP_SLEQ <: Z3_decl_kind
public deftype Z3_OP_UGEQ <: Z3_decl_kind
public deftype Z3_OP_SGEQ <: Z3_decl_kind
public deftype Z3_OP_ULT <: Z3_decl_kind
public deftype Z3_OP_SLT <: Z3_decl_kind
public deftype Z3_OP_UGT <: Z3_decl_kind
public deftype Z3_OP_SGT <: Z3_decl_kind
public deftype Z3_OP_BAND <: Z3_decl_kind
public deftype Z3_OP_BOR <: Z3_decl_kind
public deftype Z3_OP_BNOT <: Z3_decl_kind
public deftype Z3_OP_BXOR <: Z3_decl_kind
public deftype Z3_OP_BNAND <: Z3_decl_kind
public deftype Z3_OP_BNOR <: Z3_decl_kind
public deftype Z3_OP_BXNOR <: Z3_decl_kind
public deftype Z3_OP_CONCAT <: Z3_decl_kind
public deftype Z3_OP_SIGN_EXT <: Z3_decl_kind
public deftype Z3_OP_ZERO_EXT <: Z3_decl_kind
public deftype Z3_OP_EXTRACT <: Z3_decl_kind
public deftype Z3_OP_REPEAT <: Z3_decl_kind
public deftype Z3_OP_BREDOR <: Z3_decl_kind
public deftype Z3_OP_BREDAND <: Z3_decl_kind
public deftype Z3_OP_BCOMP <: Z3_decl_kind
public deftype Z3_OP_BSHL <: Z3_decl_kind
public deftype Z3_OP_BLSHR <: Z3_decl_kind
public deftype Z3_OP_BASHR <: Z3_decl_kind
public deftype Z3_OP_ROTATE_LEFT <: Z3_decl_kind
public deftype Z3_OP_ROTATE_RIGHT <: Z3_decl_kind
public deftype Z3_OP_EXT_ROTATE_LEFT <: Z3_decl_kind
public deftype Z3_OP_EXT_ROTATE_RIGHT <: Z3_decl_kind
public deftype Z3_OP_BIT2BOOL <: Z3_decl_kind
public deftype Z3_OP_INT2BV <: Z3_decl_kind
public deftype Z3_OP_BV2INT <: Z3_decl_kind
public deftype Z3_OP_CARRY <: Z3_decl_kind
public deftype Z3_OP_XOR3 <: Z3_decl_kind
public deftype Z3_OP_BSMUL_NO_OVFL <: Z3_decl_kind
public deftype Z3_OP_BUMUL_NO_OVFL <: Z3_decl_kind
public deftype Z3_OP_BSMUL_NO_UDFL <: Z3_decl_kind
public deftype Z3_OP_BSDIV_I <: Z3_decl_kind
public deftype Z3_OP_BUDIV_I <: Z3_decl_kind
public deftype Z3_OP_BSREM_I <: Z3_decl_kind
public deftype Z3_OP_BUREM_I <: Z3_decl_kind
public deftype Z3_OP_BSMOD_I <: Z3_decl_kind
public deftype Z3_OP_PR_UNDEF <: Z3_decl_kind
public deftype Z3_OP_PR_TRUE <: Z3_decl_kind
public deftype Z3_OP_PR_ASSERTED <: Z3_decl_kind
public deftype Z3_OP_PR_GOAL <: Z3_decl_kind
public deftype Z3_OP_PR_MODUS_PONENS <: Z3_decl_kind
public deftype Z3_OP_PR_REFLEXIVITY <: Z3_decl_kind
public deftype Z3_OP_PR_SYMMETRY <: Z3_decl_kind
public deftype Z3_OP_PR_TRANSITIVITY <: Z3_decl_kind
public deftype Z3_OP_PR_TRANSITIVITY_STAR <: Z3_decl_kind
public deftype Z3_OP_PR_MONOTONICITY <: Z3_decl_kind
public deftype Z3_OP_PR_QUANT_INTRO <: Z3_decl_kind
public deftype Z3_OP_PR_BIND <: Z3_decl_kind
public deftype Z3_OP_PR_DISTRIBUTIVITY <: Z3_decl_kind
public deftype Z3_OP_PR_AND_ELIM <: Z3_decl_kind
public deftype Z3_OP_PR_NOT_OR_ELIM <: Z3_decl_kind
public deftype Z3_OP_PR_REWRITE <: Z3_decl_kind
public deftype Z3_OP_PR_REWRITE_STAR <: Z3_decl_kind
public deftype Z3_OP_PR_PULL_QUANT <: Z3_decl_kind
public deftype Z3_OP_PR_PUSH_QUANT <: Z3_decl_kind
public deftype Z3_OP_PR_ELIM_UNUSED_VARS <: Z3_decl_kind
public deftype Z3_OP_PR_DER <: Z3_decl_kind
public deftype Z3_OP_PR_QUANT_INST <: Z3_decl_kind
public deftype Z3_OP_PR_HYPOTHESIS <: Z3_decl_kind
public deftype Z3_OP_PR_LEMMA <: Z3_decl_kind
public deftype Z3_OP_PR_UNIT_RESOLUTION <: Z3_decl_kind
public deftype Z3_OP_PR_IFF_TRUE <: Z3_decl_kind
public deftype Z3_OP_PR_IFF_FALSE <: Z3_decl_kind
public deftype Z3_OP_PR_COMMUTATIVITY <: Z3_decl_kind
public deftype Z3_OP_PR_DEF_AXIOM <: Z3_decl_kind
public deftype Z3_OP_PR_ASSUMPTION_ADD <: Z3_decl_kind
public deftype Z3_OP_PR_LEMMA_ADD <: Z3_decl_kind
public deftype Z3_OP_PR_REDUNDANT_DEL <: Z3_decl_kind
public deftype Z3_OP_PR_CLAUSE_TRAIL <: Z3_decl_kind
public deftype Z3_OP_PR_DEF_INTRO <: Z3_decl_kind
public deftype Z3_OP_PR_APPLY_DEF <: Z3_decl_kind
public deftype Z3_OP_PR_IFF_OEQ <: Z3_decl_kind
public deftype Z3_OP_PR_NNF_POS <: Z3_decl_kind
public deftype Z3_OP_PR_NNF_NEG <: Z3_decl_kind
public deftype Z3_OP_PR_SKOLEMIZE <: Z3_decl_kind
public deftype Z3_OP_PR_MODUS_PONENS_OEQ <: Z3_decl_kind
public deftype Z3_OP_PR_TH_LEMMA <: Z3_decl_kind
public deftype Z3_OP_PR_HYPER_RESOLVE <: Z3_decl_kind
public deftype Z3_OP_RA_STORE <: Z3_decl_kind
public deftype Z3_OP_RA_EMPTY <: Z3_decl_kind
public deftype Z3_OP_RA_IS_EMPTY <: Z3_decl_kind
public deftype Z3_OP_RA_JOIN <: Z3_decl_kind
public deftype Z3_OP_RA_UNION <: Z3_decl_kind
public deftype Z3_OP_RA_WIDEN <: Z3_decl_kind
public deftype Z3_OP_RA_PROJECT <: Z3_decl_kind
public deftype Z3_OP_RA_FILTER <: Z3_decl_kind
public deftype Z3_OP_RA_NEGATION_FILTER <: Z3_decl_kind
public deftype Z3_OP_RA_RENAME <: Z3_decl_kind
public deftype Z3_OP_RA_COMPLEMENT <: Z3_decl_kind
public deftype Z3_OP_RA_SELECT <: Z3_decl_kind
public deftype Z3_OP_RA_CLONE <: Z3_decl_kind
public deftype Z3_OP_FD_CONSTANT <: Z3_decl_kind
public deftype Z3_OP_FD_LT <: Z3_decl_kind
public deftype Z3_OP_SEQ_UNIT <: Z3_decl_kind
public deftype Z3_OP_SEQ_EMPTY <: Z3_decl_kind
public deftype Z3_OP_SEQ_CONCAT <: Z3_decl_kind
public deftype Z3_OP_SEQ_PREFIX <: Z3_decl_kind
public deftype Z3_OP_SEQ_SUFFIX <: Z3_decl_kind
public deftype Z3_OP_SEQ_CONTAINS <: Z3_decl_kind
public deftype Z3_OP_SEQ_EXTRACT <: Z3_decl_kind
public deftype Z3_OP_SEQ_REPLACE <: Z3_decl_kind
public deftype Z3_OP_SEQ_AT <: Z3_decl_kind
public deftype Z3_OP_SEQ_NTH <: Z3_decl_kind
public deftype Z3_OP_SEQ_LENGTH <: Z3_decl_kind
public deftype Z3_OP_SEQ_INDEX <: Z3_decl_kind
public deftype Z3_OP_SEQ_LAST_INDEX <: Z3_decl_kind
public deftype Z3_OP_SEQ_TO_RE <: Z3_decl_kind
public deftype Z3_OP_SEQ_IN_RE <: Z3_decl_kind
public deftype Z3_OP_STR_TO_INT <: Z3_decl_kind
public deftype Z3_OP_INT_TO_STR <: Z3_decl_kind
public deftype Z3_OP_STRING_LT <: Z3_decl_kind
public deftype Z3_OP_STRING_LE <: Z3_decl_kind
public deftype Z3_OP_RE_PLUS <: Z3_decl_kind
public deftype Z3_OP_RE_STAR <: Z3_decl_kind
public deftype Z3_OP_RE_OPTION <: Z3_decl_kind
public deftype Z3_OP_RE_CONCAT <: Z3_decl_kind
public deftype Z3_OP_RE_UNION <: Z3_decl_kind
public deftype Z3_OP_RE_RANGE <: Z3_decl_kind
public deftype Z3_OP_RE_LOOP <: Z3_decl_kind
public deftype Z3_OP_RE_INTERSECT <: Z3_decl_kind
public deftype Z3_OP_RE_EMPTY_SET <: Z3_decl_kind
public deftype Z3_OP_RE_FULL_SET <: Z3_decl_kind
public deftype Z3_OP_RE_COMPLEMENT <: Z3_decl_kind
public deftype Z3_OP_LABEL <: Z3_decl_kind
public deftype Z3_OP_LABEL_LIT <: Z3_decl_kind
public deftype Z3_OP_DT_CONSTRUCTOR <: Z3_decl_kind
public deftype Z3_OP_DT_RECOGNISER <: Z3_decl_kind
public deftype Z3_OP_DT_IS <: Z3_decl_kind
public deftype Z3_OP_DT_ACCESSOR <: Z3_decl_kind
public deftype Z3_OP_DT_UPDATE_FIELD <: Z3_decl_kind
public deftype Z3_OP_PB_AT_MOST <: Z3_decl_kind
public deftype Z3_OP_PB_AT_LEAST <: Z3_decl_kind
public deftype Z3_OP_PB_LE <: Z3_decl_kind
public deftype Z3_OP_PB_GE <: Z3_decl_kind
public deftype Z3_OP_PB_EQ <: Z3_decl_kind
public deftype Z3_OP_SPECIAL_RELATION_LO <: Z3_decl_kind
public deftype Z3_OP_SPECIAL_RELATION_PO <: Z3_decl_kind
public deftype Z3_OP_SPECIAL_RELATION_PLO <: Z3_decl_kind
public deftype Z3_OP_SPECIAL_RELATION_TO <: Z3_decl_kind
public deftype Z3_OP_SPECIAL_RELATION_TC <: Z3_decl_kind
public deftype Z3_OP_SPECIAL_RELATION_TRC <: Z3_decl_kind
public deftype Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN <: Z3_decl_kind
public deftype Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY <: Z3_decl_kind
public deftype Z3_OP_FPA_RM_TOWARD_POSITIVE <: Z3_decl_kind
public deftype Z3_OP_FPA_RM_TOWARD_NEGATIVE <: Z3_decl_kind
public deftype Z3_OP_FPA_RM_TOWARD_ZERO <: Z3_decl_kind
public deftype Z3_OP_FPA_NUM <: Z3_decl_kind
public deftype Z3_OP_FPA_PLUS_INF <: Z3_decl_kind
public deftype Z3_OP_FPA_MINUS_INF <: Z3_decl_kind
public deftype Z3_OP_FPA_NAN <: Z3_decl_kind
public deftype Z3_OP_FPA_PLUS_ZERO <: Z3_decl_kind
public deftype Z3_OP_FPA_MINUS_ZERO <: Z3_decl_kind
public deftype Z3_OP_FPA_ADD <: Z3_decl_kind
public deftype Z3_OP_FPA_SUB <: Z3_decl_kind
public deftype Z3_OP_FPA_NEG <: Z3_decl_kind
public deftype Z3_OP_FPA_MUL <: Z3_decl_kind
public deftype Z3_OP_FPA_DIV <: Z3_decl_kind
public deftype Z3_OP_FPA_REM <: Z3_decl_kind
public deftype Z3_OP_FPA_ABS <: Z3_decl_kind
public deftype Z3_OP_FPA_MIN <: Z3_decl_kind
public deftype Z3_OP_FPA_MAX <: Z3_decl_kind
public deftype Z3_OP_FPA_FMA <: Z3_decl_kind
public deftype Z3_OP_FPA_SQRT <: Z3_decl_kind
public deftype Z3_OP_FPA_ROUND_TO_INTEGRAL <: Z3_decl_kind
public deftype Z3_OP_FPA_EQ <: Z3_decl_kind
public deftype Z3_OP_FPA_LT <: Z3_decl_kind
public deftype Z3_OP_FPA_GT <: Z3_decl_kind
public deftype Z3_OP_FPA_LE <: Z3_decl_kind
public deftype Z3_OP_FPA_GE <: Z3_decl_kind
public deftype Z3_OP_FPA_IS_NAN <: Z3_decl_kind
public deftype Z3_OP_FPA_IS_INF <: Z3_decl_kind
public deftype Z3_OP_FPA_IS_ZERO <: Z3_decl_kind
public deftype Z3_OP_FPA_IS_NORMAL <: Z3_decl_kind
public deftype Z3_OP_FPA_IS_SUBNORMAL <: Z3_decl_kind
public deftype Z3_OP_FPA_IS_NEGATIVE <: Z3_decl_kind
public deftype Z3_OP_FPA_IS_POSITIVE <: Z3_decl_kind
public deftype Z3_OP_FPA_FP <: Z3_decl_kind
public deftype Z3_OP_FPA_TO_FP <: Z3_decl_kind
public deftype Z3_OP_FPA_TO_FP_UNSIGNED <: Z3_decl_kind
public deftype Z3_OP_FPA_TO_UBV <: Z3_decl_kind
public deftype Z3_OP_FPA_TO_SBV <: Z3_decl_kind
public deftype Z3_OP_FPA_TO_REAL <: Z3_decl_kind
public deftype Z3_OP_FPA_TO_IEEE_BV <: Z3_decl_kind
public deftype Z3_OP_FPA_BVWRAP <: Z3_decl_kind
public deftype Z3_OP_FPA_BV2RM <: Z3_decl_kind
public deftype Z3_OP_INTERNAL <: Z3_decl_kind
public deftype Z3_OP_UNINTERPRETED <: Z3_decl_kind

public val Z3_OP_TRUE = new Z3_OP_TRUE
public val Z3_OP_FALSE = new Z3_OP_FALSE
public val Z3_OP_EQ = new Z3_OP_EQ
public val Z3_OP_DISTINCT = new Z3_OP_DISTINCT
public val Z3_OP_ITE = new Z3_OP_ITE
public val Z3_OP_AND = new Z3_OP_AND
public val Z3_OP_OR = new Z3_OP_OR
public val Z3_OP_IFF = new Z3_OP_IFF
public val Z3_OP_XOR = new Z3_OP_XOR
public val Z3_OP_NOT = new Z3_OP_NOT
public val Z3_OP_IMPLIES = new Z3_OP_IMPLIES
public val Z3_OP_OEQ = new Z3_OP_OEQ
public val Z3_OP_ANUM = new Z3_OP_ANUM
public val Z3_OP_AGNUM = new Z3_OP_AGNUM
public val Z3_OP_LE = new Z3_OP_LE
public val Z3_OP_GE = new Z3_OP_GE
public val Z3_OP_LT = new Z3_OP_LT
public val Z3_OP_GT = new Z3_OP_GT
public val Z3_OP_ADD = new Z3_OP_ADD
public val Z3_OP_SUB = new Z3_OP_SUB
public val Z3_OP_UMINUS = new Z3_OP_UMINUS
public val Z3_OP_MUL = new Z3_OP_MUL
public val Z3_OP_DIV = new Z3_OP_DIV
public val Z3_OP_IDIV = new Z3_OP_IDIV
public val Z3_OP_REM = new Z3_OP_REM
public val Z3_OP_MOD = new Z3_OP_MOD
public val Z3_OP_TO_REAL = new Z3_OP_TO_REAL
public val Z3_OP_TO_INT = new Z3_OP_TO_INT
public val Z3_OP_IS_INT = new Z3_OP_IS_INT
public val Z3_OP_POWER = new Z3_OP_POWER
public val Z3_OP_STORE = new Z3_OP_STORE
public val Z3_OP_SELECT = new Z3_OP_SELECT
public val Z3_OP_CONST_ARRAY = new Z3_OP_CONST_ARRAY
public val Z3_OP_ARRAY_MAP = new Z3_OP_ARRAY_MAP
public val Z3_OP_ARRAY_DEFAULT = new Z3_OP_ARRAY_DEFAULT
public val Z3_OP_SET_UNION = new Z3_OP_SET_UNION
public val Z3_OP_SET_INTERSECT = new Z3_OP_SET_INTERSECT
public val Z3_OP_SET_DIFFERENCE = new Z3_OP_SET_DIFFERENCE
public val Z3_OP_SET_COMPLEMENT = new Z3_OP_SET_COMPLEMENT
public val Z3_OP_SET_SUBSET = new Z3_OP_SET_SUBSET
public val Z3_OP_AS_ARRAY = new Z3_OP_AS_ARRAY
public val Z3_OP_ARRAY_EXT = new Z3_OP_ARRAY_EXT
public val Z3_OP_SET_HAS_SIZE = new Z3_OP_SET_HAS_SIZE
public val Z3_OP_SET_CARD = new Z3_OP_SET_CARD
public val Z3_OP_BNUM = new Z3_OP_BNUM
public val Z3_OP_BIT1 = new Z3_OP_BIT1
public val Z3_OP_BIT0 = new Z3_OP_BIT0
public val Z3_OP_BNEG = new Z3_OP_BNEG
public val Z3_OP_BADD = new Z3_OP_BADD
public val Z3_OP_BSUB = new Z3_OP_BSUB
public val Z3_OP_BMUL = new Z3_OP_BMUL
public val Z3_OP_BSDIV = new Z3_OP_BSDIV
public val Z3_OP_BUDIV = new Z3_OP_BUDIV
public val Z3_OP_BSREM = new Z3_OP_BSREM
public val Z3_OP_BUREM = new Z3_OP_BUREM
public val Z3_OP_BSMOD = new Z3_OP_BSMOD
public val Z3_OP_BSDIV0 = new Z3_OP_BSDIV0
public val Z3_OP_BUDIV0 = new Z3_OP_BUDIV0
public val Z3_OP_BSREM0 = new Z3_OP_BSREM0
public val Z3_OP_BUREM0 = new Z3_OP_BUREM0
public val Z3_OP_BSMOD0 = new Z3_OP_BSMOD0
public val Z3_OP_ULEQ = new Z3_OP_ULEQ
public val Z3_OP_SLEQ = new Z3_OP_SLEQ
public val Z3_OP_UGEQ = new Z3_OP_UGEQ
public val Z3_OP_SGEQ = new Z3_OP_SGEQ
public val Z3_OP_ULT = new Z3_OP_ULT
public val Z3_OP_SLT = new Z3_OP_SLT
public val Z3_OP_UGT = new Z3_OP_UGT
public val Z3_OP_SGT = new Z3_OP_SGT
public val Z3_OP_BAND = new Z3_OP_BAND
public val Z3_OP_BOR = new Z3_OP_BOR
public val Z3_OP_BNOT = new Z3_OP_BNOT
public val Z3_OP_BXOR = new Z3_OP_BXOR
public val Z3_OP_BNAND = new Z3_OP_BNAND
public val Z3_OP_BNOR = new Z3_OP_BNOR
public val Z3_OP_BXNOR = new Z3_OP_BXNOR
public val Z3_OP_CONCAT = new Z3_OP_CONCAT
public val Z3_OP_SIGN_EXT = new Z3_OP_SIGN_EXT
public val Z3_OP_ZERO_EXT = new Z3_OP_ZERO_EXT
public val Z3_OP_EXTRACT = new Z3_OP_EXTRACT
public val Z3_OP_REPEAT = new Z3_OP_REPEAT
public val Z3_OP_BREDOR = new Z3_OP_BREDOR
public val Z3_OP_BREDAND = new Z3_OP_BREDAND
public val Z3_OP_BCOMP = new Z3_OP_BCOMP
public val Z3_OP_BSHL = new Z3_OP_BSHL
public val Z3_OP_BLSHR = new Z3_OP_BLSHR
public val Z3_OP_BASHR = new Z3_OP_BASHR
public val Z3_OP_ROTATE_LEFT = new Z3_OP_ROTATE_LEFT
public val Z3_OP_ROTATE_RIGHT = new Z3_OP_ROTATE_RIGHT
public val Z3_OP_EXT_ROTATE_LEFT = new Z3_OP_EXT_ROTATE_LEFT
public val Z3_OP_EXT_ROTATE_RIGHT = new Z3_OP_EXT_ROTATE_RIGHT
public val Z3_OP_BIT2BOOL = new Z3_OP_BIT2BOOL
public val Z3_OP_INT2BV = new Z3_OP_INT2BV
public val Z3_OP_BV2INT = new Z3_OP_BV2INT
public val Z3_OP_CARRY = new Z3_OP_CARRY
public val Z3_OP_XOR3 = new Z3_OP_XOR3
public val Z3_OP_BSMUL_NO_OVFL = new Z3_OP_BSMUL_NO_OVFL
public val Z3_OP_BUMUL_NO_OVFL = new Z3_OP_BUMUL_NO_OVFL
public val Z3_OP_BSMUL_NO_UDFL = new Z3_OP_BSMUL_NO_UDFL
public val Z3_OP_BSDIV_I = new Z3_OP_BSDIV_I
public val Z3_OP_BUDIV_I = new Z3_OP_BUDIV_I
public val Z3_OP_BSREM_I = new Z3_OP_BSREM_I
public val Z3_OP_BUREM_I = new Z3_OP_BUREM_I
public val Z3_OP_BSMOD_I = new Z3_OP_BSMOD_I
public val Z3_OP_PR_UNDEF = new Z3_OP_PR_UNDEF
public val Z3_OP_PR_TRUE = new Z3_OP_PR_TRUE
public val Z3_OP_PR_ASSERTED = new Z3_OP_PR_ASSERTED
public val Z3_OP_PR_GOAL = new Z3_OP_PR_GOAL
public val Z3_OP_PR_MODUS_PONENS = new Z3_OP_PR_MODUS_PONENS
public val Z3_OP_PR_REFLEXIVITY = new Z3_OP_PR_REFLEXIVITY
public val Z3_OP_PR_SYMMETRY = new Z3_OP_PR_SYMMETRY
public val Z3_OP_PR_TRANSITIVITY = new Z3_OP_PR_TRANSITIVITY
public val Z3_OP_PR_TRANSITIVITY_STAR = new Z3_OP_PR_TRANSITIVITY_STAR
public val Z3_OP_PR_MONOTONICITY = new Z3_OP_PR_MONOTONICITY
public val Z3_OP_PR_QUANT_INTRO = new Z3_OP_PR_QUANT_INTRO
public val Z3_OP_PR_BIND = new Z3_OP_PR_BIND
public val Z3_OP_PR_DISTRIBUTIVITY = new Z3_OP_PR_DISTRIBUTIVITY
public val Z3_OP_PR_AND_ELIM = new Z3_OP_PR_AND_ELIM
public val Z3_OP_PR_NOT_OR_ELIM = new Z3_OP_PR_NOT_OR_ELIM
public val Z3_OP_PR_REWRITE = new Z3_OP_PR_REWRITE
public val Z3_OP_PR_REWRITE_STAR = new Z3_OP_PR_REWRITE_STAR
public val Z3_OP_PR_PULL_QUANT = new Z3_OP_PR_PULL_QUANT
public val Z3_OP_PR_PUSH_QUANT = new Z3_OP_PR_PUSH_QUANT
public val Z3_OP_PR_ELIM_UNUSED_VARS = new Z3_OP_PR_ELIM_UNUSED_VARS
public val Z3_OP_PR_DER = new Z3_OP_PR_DER
public val Z3_OP_PR_QUANT_INST = new Z3_OP_PR_QUANT_INST
public val Z3_OP_PR_HYPOTHESIS = new Z3_OP_PR_HYPOTHESIS
public val Z3_OP_PR_LEMMA = new Z3_OP_PR_LEMMA
public val Z3_OP_PR_UNIT_RESOLUTION = new Z3_OP_PR_UNIT_RESOLUTION
public val Z3_OP_PR_IFF_TRUE = new Z3_OP_PR_IFF_TRUE
public val Z3_OP_PR_IFF_FALSE = new Z3_OP_PR_IFF_FALSE
public val Z3_OP_PR_COMMUTATIVITY = new Z3_OP_PR_COMMUTATIVITY
public val Z3_OP_PR_DEF_AXIOM = new Z3_OP_PR_DEF_AXIOM
public val Z3_OP_PR_ASSUMPTION_ADD = new Z3_OP_PR_ASSUMPTION_ADD
public val Z3_OP_PR_LEMMA_ADD = new Z3_OP_PR_LEMMA_ADD
public val Z3_OP_PR_REDUNDANT_DEL = new Z3_OP_PR_REDUNDANT_DEL
public val Z3_OP_PR_CLAUSE_TRAIL = new Z3_OP_PR_CLAUSE_TRAIL
public val Z3_OP_PR_DEF_INTRO = new Z3_OP_PR_DEF_INTRO
public val Z3_OP_PR_APPLY_DEF = new Z3_OP_PR_APPLY_DEF
public val Z3_OP_PR_IFF_OEQ = new Z3_OP_PR_IFF_OEQ
public val Z3_OP_PR_NNF_POS = new Z3_OP_PR_NNF_POS
public val Z3_OP_PR_NNF_NEG = new Z3_OP_PR_NNF_NEG
public val Z3_OP_PR_SKOLEMIZE = new Z3_OP_PR_SKOLEMIZE
public val Z3_OP_PR_MODUS_PONENS_OEQ = new Z3_OP_PR_MODUS_PONENS_OEQ
public val Z3_OP_PR_TH_LEMMA = new Z3_OP_PR_TH_LEMMA
public val Z3_OP_PR_HYPER_RESOLVE = new Z3_OP_PR_HYPER_RESOLVE
public val Z3_OP_RA_STORE = new Z3_OP_RA_STORE
public val Z3_OP_RA_EMPTY = new Z3_OP_RA_EMPTY
public val Z3_OP_RA_IS_EMPTY = new Z3_OP_RA_IS_EMPTY
public val Z3_OP_RA_JOIN = new Z3_OP_RA_JOIN
public val Z3_OP_RA_UNION = new Z3_OP_RA_UNION
public val Z3_OP_RA_WIDEN = new Z3_OP_RA_WIDEN
public val Z3_OP_RA_PROJECT = new Z3_OP_RA_PROJECT
public val Z3_OP_RA_FILTER = new Z3_OP_RA_FILTER
public val Z3_OP_RA_NEGATION_FILTER = new Z3_OP_RA_NEGATION_FILTER
public val Z3_OP_RA_RENAME = new Z3_OP_RA_RENAME
public val Z3_OP_RA_COMPLEMENT = new Z3_OP_RA_COMPLEMENT
public val Z3_OP_RA_SELECT = new Z3_OP_RA_SELECT
public val Z3_OP_RA_CLONE = new Z3_OP_RA_CLONE
public val Z3_OP_FD_CONSTANT = new Z3_OP_FD_CONSTANT
public val Z3_OP_FD_LT = new Z3_OP_FD_LT
public val Z3_OP_SEQ_UNIT = new Z3_OP_SEQ_UNIT
public val Z3_OP_SEQ_EMPTY = new Z3_OP_SEQ_EMPTY
public val Z3_OP_SEQ_CONCAT = new Z3_OP_SEQ_CONCAT
public val Z3_OP_SEQ_PREFIX = new Z3_OP_SEQ_PREFIX
public val Z3_OP_SEQ_SUFFIX = new Z3_OP_SEQ_SUFFIX
public val Z3_OP_SEQ_CONTAINS = new Z3_OP_SEQ_CONTAINS
public val Z3_OP_SEQ_EXTRACT = new Z3_OP_SEQ_EXTRACT
public val Z3_OP_SEQ_REPLACE = new Z3_OP_SEQ_REPLACE
public val Z3_OP_SEQ_AT = new Z3_OP_SEQ_AT
public val Z3_OP_SEQ_NTH = new Z3_OP_SEQ_NTH
public val Z3_OP_SEQ_LENGTH = new Z3_OP_SEQ_LENGTH
public val Z3_OP_SEQ_INDEX = new Z3_OP_SEQ_INDEX
public val Z3_OP_SEQ_LAST_INDEX = new Z3_OP_SEQ_LAST_INDEX
public val Z3_OP_SEQ_TO_RE = new Z3_OP_SEQ_TO_RE
public val Z3_OP_SEQ_IN_RE = new Z3_OP_SEQ_IN_RE
public val Z3_OP_STR_TO_INT = new Z3_OP_STR_TO_INT
public val Z3_OP_INT_TO_STR = new Z3_OP_INT_TO_STR
public val Z3_OP_STRING_LT = new Z3_OP_STRING_LT
public val Z3_OP_STRING_LE = new Z3_OP_STRING_LE
public val Z3_OP_RE_PLUS = new Z3_OP_RE_PLUS
public val Z3_OP_RE_STAR = new Z3_OP_RE_STAR
public val Z3_OP_RE_OPTION = new Z3_OP_RE_OPTION
public val Z3_OP_RE_CONCAT = new Z3_OP_RE_CONCAT
public val Z3_OP_RE_UNION = new Z3_OP_RE_UNION
public val Z3_OP_RE_RANGE = new Z3_OP_RE_RANGE
public val Z3_OP_RE_LOOP = new Z3_OP_RE_LOOP
public val Z3_OP_RE_INTERSECT = new Z3_OP_RE_INTERSECT
public val Z3_OP_RE_EMPTY_SET = new Z3_OP_RE_EMPTY_SET
public val Z3_OP_RE_FULL_SET = new Z3_OP_RE_FULL_SET
public val Z3_OP_RE_COMPLEMENT = new Z3_OP_RE_COMPLEMENT
public val Z3_OP_LABEL = new Z3_OP_LABEL
public val Z3_OP_LABEL_LIT = new Z3_OP_LABEL_LIT
public val Z3_OP_DT_CONSTRUCTOR = new Z3_OP_DT_CONSTRUCTOR
public val Z3_OP_DT_RECOGNISER = new Z3_OP_DT_RECOGNISER
public val Z3_OP_DT_IS = new Z3_OP_DT_IS
public val Z3_OP_DT_ACCESSOR = new Z3_OP_DT_ACCESSOR
public val Z3_OP_DT_UPDATE_FIELD = new Z3_OP_DT_UPDATE_FIELD
public val Z3_OP_PB_AT_MOST = new Z3_OP_PB_AT_MOST
public val Z3_OP_PB_AT_LEAST = new Z3_OP_PB_AT_LEAST
public val Z3_OP_PB_LE = new Z3_OP_PB_LE
public val Z3_OP_PB_GE = new Z3_OP_PB_GE
public val Z3_OP_PB_EQ = new Z3_OP_PB_EQ
public val Z3_OP_SPECIAL_RELATION_LO = new Z3_OP_SPECIAL_RELATION_LO
public val Z3_OP_SPECIAL_RELATION_PO = new Z3_OP_SPECIAL_RELATION_PO
public val Z3_OP_SPECIAL_RELATION_PLO = new Z3_OP_SPECIAL_RELATION_PLO
public val Z3_OP_SPECIAL_RELATION_TO = new Z3_OP_SPECIAL_RELATION_TO
public val Z3_OP_SPECIAL_RELATION_TC = new Z3_OP_SPECIAL_RELATION_TC
public val Z3_OP_SPECIAL_RELATION_TRC = new Z3_OP_SPECIAL_RELATION_TRC
public val Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN = new Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN
public val Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY = new Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY
public val Z3_OP_FPA_RM_TOWARD_POSITIVE = new Z3_OP_FPA_RM_TOWARD_POSITIVE
public val Z3_OP_FPA_RM_TOWARD_NEGATIVE = new Z3_OP_FPA_RM_TOWARD_NEGATIVE
public val Z3_OP_FPA_RM_TOWARD_ZERO = new Z3_OP_FPA_RM_TOWARD_ZERO
public val Z3_OP_FPA_NUM = new Z3_OP_FPA_NUM
public val Z3_OP_FPA_PLUS_INF = new Z3_OP_FPA_PLUS_INF
public val Z3_OP_FPA_MINUS_INF = new Z3_OP_FPA_MINUS_INF
public val Z3_OP_FPA_NAN = new Z3_OP_FPA_NAN
public val Z3_OP_FPA_PLUS_ZERO = new Z3_OP_FPA_PLUS_ZERO
public val Z3_OP_FPA_MINUS_ZERO = new Z3_OP_FPA_MINUS_ZERO
public val Z3_OP_FPA_ADD = new Z3_OP_FPA_ADD
public val Z3_OP_FPA_SUB = new Z3_OP_FPA_SUB
public val Z3_OP_FPA_NEG = new Z3_OP_FPA_NEG
public val Z3_OP_FPA_MUL = new Z3_OP_FPA_MUL
public val Z3_OP_FPA_DIV = new Z3_OP_FPA_DIV
public val Z3_OP_FPA_REM = new Z3_OP_FPA_REM
public val Z3_OP_FPA_ABS = new Z3_OP_FPA_ABS
public val Z3_OP_FPA_MIN = new Z3_OP_FPA_MIN
public val Z3_OP_FPA_MAX = new Z3_OP_FPA_MAX
public val Z3_OP_FPA_FMA = new Z3_OP_FPA_FMA
public val Z3_OP_FPA_SQRT = new Z3_OP_FPA_SQRT
public val Z3_OP_FPA_ROUND_TO_INTEGRAL = new Z3_OP_FPA_ROUND_TO_INTEGRAL
public val Z3_OP_FPA_EQ = new Z3_OP_FPA_EQ
public val Z3_OP_FPA_LT = new Z3_OP_FPA_LT
public val Z3_OP_FPA_GT = new Z3_OP_FPA_GT
public val Z3_OP_FPA_LE = new Z3_OP_FPA_LE
public val Z3_OP_FPA_GE = new Z3_OP_FPA_GE
public val Z3_OP_FPA_IS_NAN = new Z3_OP_FPA_IS_NAN
public val Z3_OP_FPA_IS_INF = new Z3_OP_FPA_IS_INF
public val Z3_OP_FPA_IS_ZERO = new Z3_OP_FPA_IS_ZERO
public val Z3_OP_FPA_IS_NORMAL = new Z3_OP_FPA_IS_NORMAL
public val Z3_OP_FPA_IS_SUBNORMAL = new Z3_OP_FPA_IS_SUBNORMAL
public val Z3_OP_FPA_IS_NEGATIVE = new Z3_OP_FPA_IS_NEGATIVE
public val Z3_OP_FPA_IS_POSITIVE = new Z3_OP_FPA_IS_POSITIVE
public val Z3_OP_FPA_FP = new Z3_OP_FPA_FP
public val Z3_OP_FPA_TO_FP = new Z3_OP_FPA_TO_FP
public val Z3_OP_FPA_TO_FP_UNSIGNED = new Z3_OP_FPA_TO_FP_UNSIGNED
public val Z3_OP_FPA_TO_UBV = new Z3_OP_FPA_TO_UBV
public val Z3_OP_FPA_TO_SBV = new Z3_OP_FPA_TO_SBV
public val Z3_OP_FPA_TO_REAL = new Z3_OP_FPA_TO_REAL
public val Z3_OP_FPA_TO_IEEE_BV = new Z3_OP_FPA_TO_IEEE_BV
public val Z3_OP_FPA_BVWRAP = new Z3_OP_FPA_BVWRAP
public val Z3_OP_FPA_BV2RM = new Z3_OP_FPA_BV2RM
public val Z3_OP_INTERNAL = new Z3_OP_INTERNAL
public val Z3_OP_UNINTERPRETED = new Z3_OP_UNINTERPRETED

public defn to-int (v:Z3_decl_kind) -> Int:
  match(v) :
    (x:Z3_OP_TRUE) : 256
    (x:Z3_OP_FALSE) : 257
    (x:Z3_OP_EQ) : 258
    (x:Z3_OP_DISTINCT) : 259
    (x:Z3_OP_ITE) : 260
    (x:Z3_OP_AND) : 261
    (x:Z3_OP_OR) : 262
    (x:Z3_OP_IFF) : 263
    (x:Z3_OP_XOR) : 264
    (x:Z3_OP_NOT) : 265
    (x:Z3_OP_IMPLIES) : 266
    (x:Z3_OP_OEQ) : 267
    (x:Z3_OP_ANUM) : 512
    (x:Z3_OP_AGNUM) : 513
    (x:Z3_OP_LE) : 514
    (x:Z3_OP_GE) : 515
    (x:Z3_OP_LT) : 516
    (x:Z3_OP_GT) : 517
    (x:Z3_OP_ADD) : 518
    (x:Z3_OP_SUB) : 519
    (x:Z3_OP_UMINUS) : 520
    (x:Z3_OP_MUL) : 521
    (x:Z3_OP_DIV) : 522
    (x:Z3_OP_IDIV) : 523
    (x:Z3_OP_REM) : 524
    (x:Z3_OP_MOD) : 525
    (x:Z3_OP_TO_REAL) : 526
    (x:Z3_OP_TO_INT) : 527
    (x:Z3_OP_IS_INT) : 528
    (x:Z3_OP_POWER) : 529
    (x:Z3_OP_STORE) : 768
    (x:Z3_OP_SELECT) : 769
    (x:Z3_OP_CONST_ARRAY) : 770
    (x:Z3_OP_ARRAY_MAP) : 771
    (x:Z3_OP_ARRAY_DEFAULT) : 772
    (x:Z3_OP_SET_UNION) : 773
    (x:Z3_OP_SET_INTERSECT) : 774
    (x:Z3_OP_SET_DIFFERENCE) : 775
    (x:Z3_OP_SET_COMPLEMENT) : 776
    (x:Z3_OP_SET_SUBSET) : 777
    (x:Z3_OP_AS_ARRAY) : 778
    (x:Z3_OP_ARRAY_EXT) : 779
    (x:Z3_OP_SET_HAS_SIZE) : 780
    (x:Z3_OP_SET_CARD) : 781
    (x:Z3_OP_BNUM) : 1024
    (x:Z3_OP_BIT1) : 1025
    (x:Z3_OP_BIT0) : 1026
    (x:Z3_OP_BNEG) : 1027
    (x:Z3_OP_BADD) : 1028
    (x:Z3_OP_BSUB) : 1029
    (x:Z3_OP_BMUL) : 1030
    (x:Z3_OP_BSDIV) : 1031
    (x:Z3_OP_BUDIV) : 1032
    (x:Z3_OP_BSREM) : 1033
    (x:Z3_OP_BUREM) : 1034
    (x:Z3_OP_BSMOD) : 1035
    (x:Z3_OP_BSDIV0) : 1036
    (x:Z3_OP_BUDIV0) : 1037
    (x:Z3_OP_BSREM0) : 1038
    (x:Z3_OP_BUREM0) : 1039
    (x:Z3_OP_BSMOD0) : 1040
    (x:Z3_OP_ULEQ) : 1041
    (x:Z3_OP_SLEQ) : 1042
    (x:Z3_OP_UGEQ) : 1043
    (x:Z3_OP_SGEQ) : 1044
    (x:Z3_OP_ULT) : 1045
    (x:Z3_OP_SLT) : 1046
    (x:Z3_OP_UGT) : 1047
    (x:Z3_OP_SGT) : 1048
    (x:Z3_OP_BAND) : 1049
    (x:Z3_OP_BOR) : 1050
    (x:Z3_OP_BNOT) : 1051
    (x:Z3_OP_BXOR) : 1052
    (x:Z3_OP_BNAND) : 1053
    (x:Z3_OP_BNOR) : 1054
    (x:Z3_OP_BXNOR) : 1055
    (x:Z3_OP_CONCAT) : 1056
    (x:Z3_OP_SIGN_EXT) : 1057
    (x:Z3_OP_ZERO_EXT) : 1058
    (x:Z3_OP_EXTRACT) : 1059
    (x:Z3_OP_REPEAT) : 1060
    (x:Z3_OP_BREDOR) : 1061
    (x:Z3_OP_BREDAND) : 1062
    (x:Z3_OP_BCOMP) : 1063
    (x:Z3_OP_BSHL) : 1064
    (x:Z3_OP_BLSHR) : 1065
    (x:Z3_OP_BASHR) : 1066
    (x:Z3_OP_ROTATE_LEFT) : 1067
    (x:Z3_OP_ROTATE_RIGHT) : 1068
    (x:Z3_OP_EXT_ROTATE_LEFT) : 1069
    (x:Z3_OP_EXT_ROTATE_RIGHT) : 1070
    (x:Z3_OP_BIT2BOOL) : 1071
    (x:Z3_OP_INT2BV) : 1072
    (x:Z3_OP_BV2INT) : 1073
    (x:Z3_OP_CARRY) : 1074
    (x:Z3_OP_XOR3) : 1075
    (x:Z3_OP_BSMUL_NO_OVFL) : 1076
    (x:Z3_OP_BUMUL_NO_OVFL) : 1077
    (x:Z3_OP_BSMUL_NO_UDFL) : 1078
    (x:Z3_OP_BSDIV_I) : 1079
    (x:Z3_OP_BUDIV_I) : 1080
    (x:Z3_OP_BSREM_I) : 1081
    (x:Z3_OP_BUREM_I) : 1082
    (x:Z3_OP_BSMOD_I) : 1083
    (x:Z3_OP_PR_UNDEF) : 1280
    (x:Z3_OP_PR_TRUE) : 1281
    (x:Z3_OP_PR_ASSERTED) : 1282
    (x:Z3_OP_PR_GOAL) : 1283
    (x:Z3_OP_PR_MODUS_PONENS) : 1284
    (x:Z3_OP_PR_REFLEXIVITY) : 1285
    (x:Z3_OP_PR_SYMMETRY) : 1286
    (x:Z3_OP_PR_TRANSITIVITY) : 1287
    (x:Z3_OP_PR_TRANSITIVITY_STAR) : 1288
    (x:Z3_OP_PR_MONOTONICITY) : 1289
    (x:Z3_OP_PR_QUANT_INTRO) : 1290
    (x:Z3_OP_PR_BIND) : 1291
    (x:Z3_OP_PR_DISTRIBUTIVITY) : 1292
    (x:Z3_OP_PR_AND_ELIM) : 1293
    (x:Z3_OP_PR_NOT_OR_ELIM) : 1294
    (x:Z3_OP_PR_REWRITE) : 1295
    (x:Z3_OP_PR_REWRITE_STAR) : 1296
    (x:Z3_OP_PR_PULL_QUANT) : 1297
    (x:Z3_OP_PR_PUSH_QUANT) : 1298
    (x:Z3_OP_PR_ELIM_UNUSED_VARS) : 1299
    (x:Z3_OP_PR_DER) : 1300
    (x:Z3_OP_PR_QUANT_INST) : 1301
    (x:Z3_OP_PR_HYPOTHESIS) : 1302
    (x:Z3_OP_PR_LEMMA) : 1303
    (x:Z3_OP_PR_UNIT_RESOLUTION) : 1304
    (x:Z3_OP_PR_IFF_TRUE) : 1305
    (x:Z3_OP_PR_IFF_FALSE) : 1306
    (x:Z3_OP_PR_COMMUTATIVITY) : 1307
    (x:Z3_OP_PR_DEF_AXIOM) : 1308
    (x:Z3_OP_PR_ASSUMPTION_ADD) : 1309
    (x:Z3_OP_PR_LEMMA_ADD) : 1310
    (x:Z3_OP_PR_REDUNDANT_DEL) : 1311
    (x:Z3_OP_PR_CLAUSE_TRAIL) : 1312
    (x:Z3_OP_PR_DEF_INTRO) : 1313
    (x:Z3_OP_PR_APPLY_DEF) : 1314
    (x:Z3_OP_PR_IFF_OEQ) : 1315
    (x:Z3_OP_PR_NNF_POS) : 1316
    (x:Z3_OP_PR_NNF_NEG) : 1317
    (x:Z3_OP_PR_SKOLEMIZE) : 1318
    (x:Z3_OP_PR_MODUS_PONENS_OEQ) : 1319
    (x:Z3_OP_PR_TH_LEMMA) : 1320
    (x:Z3_OP_PR_HYPER_RESOLVE) : 1321
    (x:Z3_OP_RA_STORE) : 1536
    (x:Z3_OP_RA_EMPTY) : 1537
    (x:Z3_OP_RA_IS_EMPTY) : 1538
    (x:Z3_OP_RA_JOIN) : 1539
    (x:Z3_OP_RA_UNION) : 1540
    (x:Z3_OP_RA_WIDEN) : 1541
    (x:Z3_OP_RA_PROJECT) : 1542
    (x:Z3_OP_RA_FILTER) : 1543
    (x:Z3_OP_RA_NEGATION_FILTER) : 1544
    (x:Z3_OP_RA_RENAME) : 1545
    (x:Z3_OP_RA_COMPLEMENT) : 1546
    (x:Z3_OP_RA_SELECT) : 1547
    (x:Z3_OP_RA_CLONE) : 1548
    (x:Z3_OP_FD_CONSTANT) : 1549
    (x:Z3_OP_FD_LT) : 1550
    (x:Z3_OP_SEQ_UNIT) : 1551
    (x:Z3_OP_SEQ_EMPTY) : 1552
    (x:Z3_OP_SEQ_CONCAT) : 1553
    (x:Z3_OP_SEQ_PREFIX) : 1554
    (x:Z3_OP_SEQ_SUFFIX) : 1555
    (x:Z3_OP_SEQ_CONTAINS) : 1556
    (x:Z3_OP_SEQ_EXTRACT) : 1557
    (x:Z3_OP_SEQ_REPLACE) : 1558
    (x:Z3_OP_SEQ_AT) : 1559
    (x:Z3_OP_SEQ_NTH) : 1560
    (x:Z3_OP_SEQ_LENGTH) : 1561
    (x:Z3_OP_SEQ_INDEX) : 1562
    (x:Z3_OP_SEQ_LAST_INDEX) : 1563
    (x:Z3_OP_SEQ_TO_RE) : 1564
    (x:Z3_OP_SEQ_IN_RE) : 1565
    (x:Z3_OP_STR_TO_INT) : 1566
    (x:Z3_OP_INT_TO_STR) : 1567
    (x:Z3_OP_STRING_LT) : 1568
    (x:Z3_OP_STRING_LE) : 1569
    (x:Z3_OP_RE_PLUS) : 1570
    (x:Z3_OP_RE_STAR) : 1571
    (x:Z3_OP_RE_OPTION) : 1572
    (x:Z3_OP_RE_CONCAT) : 1573
    (x:Z3_OP_RE_UNION) : 1574
    (x:Z3_OP_RE_RANGE) : 1575
    (x:Z3_OP_RE_LOOP) : 1576
    (x:Z3_OP_RE_INTERSECT) : 1577
    (x:Z3_OP_RE_EMPTY_SET) : 1578
    (x:Z3_OP_RE_FULL_SET) : 1579
    (x:Z3_OP_RE_COMPLEMENT) : 1580
    (x:Z3_OP_LABEL) : 1792
    (x:Z3_OP_LABEL_LIT) : 1793
    (x:Z3_OP_DT_CONSTRUCTOR) : 2048
    (x:Z3_OP_DT_RECOGNISER) : 2049
    (x:Z3_OP_DT_IS) : 2050
    (x:Z3_OP_DT_ACCESSOR) : 2051
    (x:Z3_OP_DT_UPDATE_FIELD) : 2052
    (x:Z3_OP_PB_AT_MOST) : 2304
    (x:Z3_OP_PB_AT_LEAST) : 2305
    (x:Z3_OP_PB_LE) : 2306
    (x:Z3_OP_PB_GE) : 2307
    (x:Z3_OP_PB_EQ) : 2308
    (x:Z3_OP_SPECIAL_RELATION_LO) : 40960
    (x:Z3_OP_SPECIAL_RELATION_PO) : 40961
    (x:Z3_OP_SPECIAL_RELATION_PLO) : 40962
    (x:Z3_OP_SPECIAL_RELATION_TO) : 40963
    (x:Z3_OP_SPECIAL_RELATION_TC) : 40964
    (x:Z3_OP_SPECIAL_RELATION_TRC) : 40965
    (x:Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN) : 45056
    (x:Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY) : 45057
    (x:Z3_OP_FPA_RM_TOWARD_POSITIVE) : 45058
    (x:Z3_OP_FPA_RM_TOWARD_NEGATIVE) : 45059
    (x:Z3_OP_FPA_RM_TOWARD_ZERO) : 45060
    (x:Z3_OP_FPA_NUM) : 45061
    (x:Z3_OP_FPA_PLUS_INF) : 45062
    (x:Z3_OP_FPA_MINUS_INF) : 45063
    (x:Z3_OP_FPA_NAN) : 45064
    (x:Z3_OP_FPA_PLUS_ZERO) : 45065
    (x:Z3_OP_FPA_MINUS_ZERO) : 45066
    (x:Z3_OP_FPA_ADD) : 45067
    (x:Z3_OP_FPA_SUB) : 45068
    (x:Z3_OP_FPA_NEG) : 45069
    (x:Z3_OP_FPA_MUL) : 45070
    (x:Z3_OP_FPA_DIV) : 45071
    (x:Z3_OP_FPA_REM) : 45072
    (x:Z3_OP_FPA_ABS) : 45073
    (x:Z3_OP_FPA_MIN) : 45074
    (x:Z3_OP_FPA_MAX) : 45075
    (x:Z3_OP_FPA_FMA) : 45076
    (x:Z3_OP_FPA_SQRT) : 45077
    (x:Z3_OP_FPA_ROUND_TO_INTEGRAL) : 45078
    (x:Z3_OP_FPA_EQ) : 45079
    (x:Z3_OP_FPA_LT) : 45080
    (x:Z3_OP_FPA_GT) : 45081
    (x:Z3_OP_FPA_LE) : 45082
    (x:Z3_OP_FPA_GE) : 45083
    (x:Z3_OP_FPA_IS_NAN) : 45084
    (x:Z3_OP_FPA_IS_INF) : 45085
    (x:Z3_OP_FPA_IS_ZERO) : 45086
    (x:Z3_OP_FPA_IS_NORMAL) : 45087
    (x:Z3_OP_FPA_IS_SUBNORMAL) : 45088
    (x:Z3_OP_FPA_IS_NEGATIVE) : 45089
    (x:Z3_OP_FPA_IS_POSITIVE) : 45090
    (x:Z3_OP_FPA_FP) : 45091
    (x:Z3_OP_FPA_TO_FP) : 45092
    (x:Z3_OP_FPA_TO_FP_UNSIGNED) : 45093
    (x:Z3_OP_FPA_TO_UBV) : 45094
    (x:Z3_OP_FPA_TO_SBV) : 45095
    (x:Z3_OP_FPA_TO_REAL) : 45096
    (x:Z3_OP_FPA_TO_IEEE_BV) : 45097
    (x:Z3_OP_FPA_BVWRAP) : 45098
    (x:Z3_OP_FPA_BV2RM) : 45099
    (x:Z3_OP_INTERNAL) : 45100
    (x:Z3_OP_UNINTERPRETED) : 45101

public defn Z3_decl_kind (v:Int) -> Z3_decl_kind :
  switch {v == _}:
    256 : Z3_OP_TRUE
    257 : Z3_OP_FALSE
    258 : Z3_OP_EQ
    259 : Z3_OP_DISTINCT
    260 : Z3_OP_ITE
    261 : Z3_OP_AND
    262 : Z3_OP_OR
    263 : Z3_OP_IFF
    264 : Z3_OP_XOR
    265 : Z3_OP_NOT
    266 : Z3_OP_IMPLIES
    267 : Z3_OP_OEQ
    512 : Z3_OP_ANUM
    513 : Z3_OP_AGNUM
    514 : Z3_OP_LE
    515 : Z3_OP_GE
    516 : Z3_OP_LT
    517 : Z3_OP_GT
    518 : Z3_OP_ADD
    519 : Z3_OP_SUB
    520 : Z3_OP_UMINUS
    521 : Z3_OP_MUL
    522 : Z3_OP_DIV
    523 : Z3_OP_IDIV
    524 : Z3_OP_REM
    525 : Z3_OP_MOD
    526 : Z3_OP_TO_REAL
    527 : Z3_OP_TO_INT
    528 : Z3_OP_IS_INT
    529 : Z3_OP_POWER
    768 : Z3_OP_STORE
    769 : Z3_OP_SELECT
    770 : Z3_OP_CONST_ARRAY
    771 : Z3_OP_ARRAY_MAP
    772 : Z3_OP_ARRAY_DEFAULT
    773 : Z3_OP_SET_UNION
    774 : Z3_OP_SET_INTERSECT
    775 : Z3_OP_SET_DIFFERENCE
    776 : Z3_OP_SET_COMPLEMENT
    777 : Z3_OP_SET_SUBSET
    778 : Z3_OP_AS_ARRAY
    779 : Z3_OP_ARRAY_EXT
    780 : Z3_OP_SET_HAS_SIZE
    781 : Z3_OP_SET_CARD
    1024 : Z3_OP_BNUM
    1025 : Z3_OP_BIT1
    1026 : Z3_OP_BIT0
    1027 : Z3_OP_BNEG
    1028 : Z3_OP_BADD
    1029 : Z3_OP_BSUB
    1030 : Z3_OP_BMUL
    1031 : Z3_OP_BSDIV
    1032 : Z3_OP_BUDIV
    1033 : Z3_OP_BSREM
    1034 : Z3_OP_BUREM
    1035 : Z3_OP_BSMOD
    1036 : Z3_OP_BSDIV0
    1037 : Z3_OP_BUDIV0
    1038 : Z3_OP_BSREM0
    1039 : Z3_OP_BUREM0
    1040 : Z3_OP_BSMOD0
    1041 : Z3_OP_ULEQ
    1042 : Z3_OP_SLEQ
    1043 : Z3_OP_UGEQ
    1044 : Z3_OP_SGEQ
    1045 : Z3_OP_ULT
    1046 : Z3_OP_SLT
    1047 : Z3_OP_UGT
    1048 : Z3_OP_SGT
    1049 : Z3_OP_BAND
    1050 : Z3_OP_BOR
    1051 : Z3_OP_BNOT
    1052 : Z3_OP_BXOR
    1053 : Z3_OP_BNAND
    1054 : Z3_OP_BNOR
    1055 : Z3_OP_BXNOR
    1056 : Z3_OP_CONCAT
    1057 : Z3_OP_SIGN_EXT
    1058 : Z3_OP_ZERO_EXT
    1059 : Z3_OP_EXTRACT
    1060 : Z3_OP_REPEAT
    1061 : Z3_OP_BREDOR
    1062 : Z3_OP_BREDAND
    1063 : Z3_OP_BCOMP
    1064 : Z3_OP_BSHL
    1065 : Z3_OP_BLSHR
    1066 : Z3_OP_BASHR
    1067 : Z3_OP_ROTATE_LEFT
    1068 : Z3_OP_ROTATE_RIGHT
    1069 : Z3_OP_EXT_ROTATE_LEFT
    1070 : Z3_OP_EXT_ROTATE_RIGHT
    1071 : Z3_OP_BIT2BOOL
    1072 : Z3_OP_INT2BV
    1073 : Z3_OP_BV2INT
    1074 : Z3_OP_CARRY
    1075 : Z3_OP_XOR3
    1076 : Z3_OP_BSMUL_NO_OVFL
    1077 : Z3_OP_BUMUL_NO_OVFL
    1078 : Z3_OP_BSMUL_NO_UDFL
    1079 : Z3_OP_BSDIV_I
    1080 : Z3_OP_BUDIV_I
    1081 : Z3_OP_BSREM_I
    1082 : Z3_OP_BUREM_I
    1083 : Z3_OP_BSMOD_I
    1280 : Z3_OP_PR_UNDEF
    1281 : Z3_OP_PR_TRUE
    1282 : Z3_OP_PR_ASSERTED
    1283 : Z3_OP_PR_GOAL
    1284 : Z3_OP_PR_MODUS_PONENS
    1285 : Z3_OP_PR_REFLEXIVITY
    1286 : Z3_OP_PR_SYMMETRY
    1287 : Z3_OP_PR_TRANSITIVITY
    1288 : Z3_OP_PR_TRANSITIVITY_STAR
    1289 : Z3_OP_PR_MONOTONICITY
    1290 : Z3_OP_PR_QUANT_INTRO
    1291 : Z3_OP_PR_BIND
    1292 : Z3_OP_PR_DISTRIBUTIVITY
    1293 : Z3_OP_PR_AND_ELIM
    1294 : Z3_OP_PR_NOT_OR_ELIM
    1295 : Z3_OP_PR_REWRITE
    1296 : Z3_OP_PR_REWRITE_STAR
    1297 : Z3_OP_PR_PULL_QUANT
    1298 : Z3_OP_PR_PUSH_QUANT
    1299 : Z3_OP_PR_ELIM_UNUSED_VARS
    1300 : Z3_OP_PR_DER
    1301 : Z3_OP_PR_QUANT_INST
    1302 : Z3_OP_PR_HYPOTHESIS
    1303 : Z3_OP_PR_LEMMA
    1304 : Z3_OP_PR_UNIT_RESOLUTION
    1305 : Z3_OP_PR_IFF_TRUE
    1306 : Z3_OP_PR_IFF_FALSE
    1307 : Z3_OP_PR_COMMUTATIVITY
    1308 : Z3_OP_PR_DEF_AXIOM
    1309 : Z3_OP_PR_ASSUMPTION_ADD
    1310 : Z3_OP_PR_LEMMA_ADD
    1311 : Z3_OP_PR_REDUNDANT_DEL
    1312 : Z3_OP_PR_CLAUSE_TRAIL
    1313 : Z3_OP_PR_DEF_INTRO
    1314 : Z3_OP_PR_APPLY_DEF
    1315 : Z3_OP_PR_IFF_OEQ
    1316 : Z3_OP_PR_NNF_POS
    1317 : Z3_OP_PR_NNF_NEG
    1318 : Z3_OP_PR_SKOLEMIZE
    1319 : Z3_OP_PR_MODUS_PONENS_OEQ
    1320 : Z3_OP_PR_TH_LEMMA
    1321 : Z3_OP_PR_HYPER_RESOLVE
    1536 : Z3_OP_RA_STORE
    1537 : Z3_OP_RA_EMPTY
    1538 : Z3_OP_RA_IS_EMPTY
    1539 : Z3_OP_RA_JOIN
    1540 : Z3_OP_RA_UNION
    1541 : Z3_OP_RA_WIDEN
    1542 : Z3_OP_RA_PROJECT
    1543 : Z3_OP_RA_FILTER
    1544 : Z3_OP_RA_NEGATION_FILTER
    1545 : Z3_OP_RA_RENAME
    1546 : Z3_OP_RA_COMPLEMENT
    1547 : Z3_OP_RA_SELECT
    1548 : Z3_OP_RA_CLONE
    1549 : Z3_OP_FD_CONSTANT
    1550 : Z3_OP_FD_LT
    1551 : Z3_OP_SEQ_UNIT
    1552 : Z3_OP_SEQ_EMPTY
    1553 : Z3_OP_SEQ_CONCAT
    1554 : Z3_OP_SEQ_PREFIX
    1555 : Z3_OP_SEQ_SUFFIX
    1556 : Z3_OP_SEQ_CONTAINS
    1557 : Z3_OP_SEQ_EXTRACT
    1558 : Z3_OP_SEQ_REPLACE
    1559 : Z3_OP_SEQ_AT
    1560 : Z3_OP_SEQ_NTH
    1561 : Z3_OP_SEQ_LENGTH
    1562 : Z3_OP_SEQ_INDEX
    1563 : Z3_OP_SEQ_LAST_INDEX
    1564 : Z3_OP_SEQ_TO_RE
    1565 : Z3_OP_SEQ_IN_RE
    1566 : Z3_OP_STR_TO_INT
    1567 : Z3_OP_INT_TO_STR
    1568 : Z3_OP_STRING_LT
    1569 : Z3_OP_STRING_LE
    1570 : Z3_OP_RE_PLUS
    1571 : Z3_OP_RE_STAR
    1572 : Z3_OP_RE_OPTION
    1573 : Z3_OP_RE_CONCAT
    1574 : Z3_OP_RE_UNION
    1575 : Z3_OP_RE_RANGE
    1576 : Z3_OP_RE_LOOP
    1577 : Z3_OP_RE_INTERSECT
    1578 : Z3_OP_RE_EMPTY_SET
    1579 : Z3_OP_RE_FULL_SET
    1580 : Z3_OP_RE_COMPLEMENT
    1792 : Z3_OP_LABEL
    1793 : Z3_OP_LABEL_LIT
    2048 : Z3_OP_DT_CONSTRUCTOR
    2049 : Z3_OP_DT_RECOGNISER
    2050 : Z3_OP_DT_IS
    2051 : Z3_OP_DT_ACCESSOR
    2052 : Z3_OP_DT_UPDATE_FIELD
    2304 : Z3_OP_PB_AT_MOST
    2305 : Z3_OP_PB_AT_LEAST
    2306 : Z3_OP_PB_LE
    2307 : Z3_OP_PB_GE
    2308 : Z3_OP_PB_EQ
    40960 : Z3_OP_SPECIAL_RELATION_LO
    40961 : Z3_OP_SPECIAL_RELATION_PO
    40962 : Z3_OP_SPECIAL_RELATION_PLO
    40963 : Z3_OP_SPECIAL_RELATION_TO
    40964 : Z3_OP_SPECIAL_RELATION_TC
    40965 : Z3_OP_SPECIAL_RELATION_TRC
    45056 : Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN
    45057 : Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY
    45058 : Z3_OP_FPA_RM_TOWARD_POSITIVE
    45059 : Z3_OP_FPA_RM_TOWARD_NEGATIVE
    45060 : Z3_OP_FPA_RM_TOWARD_ZERO
    45061 : Z3_OP_FPA_NUM
    45062 : Z3_OP_FPA_PLUS_INF
    45063 : Z3_OP_FPA_MINUS_INF
    45064 : Z3_OP_FPA_NAN
    45065 : Z3_OP_FPA_PLUS_ZERO
    45066 : Z3_OP_FPA_MINUS_ZERO
    45067 : Z3_OP_FPA_ADD
    45068 : Z3_OP_FPA_SUB
    45069 : Z3_OP_FPA_NEG
    45070 : Z3_OP_FPA_MUL
    45071 : Z3_OP_FPA_DIV
    45072 : Z3_OP_FPA_REM
    45073 : Z3_OP_FPA_ABS
    45074 : Z3_OP_FPA_MIN
    45075 : Z3_OP_FPA_MAX
    45076 : Z3_OP_FPA_FMA
    45077 : Z3_OP_FPA_SQRT
    45078 : Z3_OP_FPA_ROUND_TO_INTEGRAL
    45079 : Z3_OP_FPA_EQ
    45080 : Z3_OP_FPA_LT
    45081 : Z3_OP_FPA_GT
    45082 : Z3_OP_FPA_LE
    45083 : Z3_OP_FPA_GE
    45084 : Z3_OP_FPA_IS_NAN
    45085 : Z3_OP_FPA_IS_INF
    45086 : Z3_OP_FPA_IS_ZERO
    45087 : Z3_OP_FPA_IS_NORMAL
    45088 : Z3_OP_FPA_IS_SUBNORMAL
    45089 : Z3_OP_FPA_IS_NEGATIVE
    45090 : Z3_OP_FPA_IS_POSITIVE
    45091 : Z3_OP_FPA_FP
    45092 : Z3_OP_FPA_TO_FP
    45093 : Z3_OP_FPA_TO_FP_UNSIGNED
    45094 : Z3_OP_FPA_TO_UBV
    45095 : Z3_OP_FPA_TO_SBV
    45096 : Z3_OP_FPA_TO_REAL
    45097 : Z3_OP_FPA_TO_IEEE_BV
    45098 : Z3_OP_FPA_BVWRAP
    45099 : Z3_OP_FPA_BV2RM
    45100 : Z3_OP_INTERNAL
    45101 : Z3_OP_UNINTERPRETED
    else: throw(Exception("Z3_decl_kind: Invalid Enum Value: %_" % [v]))

public lostanza defn Z3_decl_kind (v:int) -> ref<Z3_decl_kind> :
  return Z3_decl_kind(new Int{v})

public defmethod print (o:OutputStream, v:Z3_decl_kind) :
  match(v) :
    (x:Z3_OP_TRUE) : print(o, "Z3_OP_TRUE")
    (x:Z3_OP_FALSE) : print(o, "Z3_OP_FALSE")
    (x:Z3_OP_EQ) : print(o, "Z3_OP_EQ")
    (x:Z3_OP_DISTINCT) : print(o, "Z3_OP_DISTINCT")
    (x:Z3_OP_ITE) : print(o, "Z3_OP_ITE")
    (x:Z3_OP_AND) : print(o, "Z3_OP_AND")
    (x:Z3_OP_OR) : print(o, "Z3_OP_OR")
    (x:Z3_OP_IFF) : print(o, "Z3_OP_IFF")
    (x:Z3_OP_XOR) : print(o, "Z3_OP_XOR")
    (x:Z3_OP_NOT) : print(o, "Z3_OP_NOT")
    (x:Z3_OP_IMPLIES) : print(o, "Z3_OP_IMPLIES")
    (x:Z3_OP_OEQ) : print(o, "Z3_OP_OEQ")
    (x:Z3_OP_ANUM) : print(o, "Z3_OP_ANUM")
    (x:Z3_OP_AGNUM) : print(o, "Z3_OP_AGNUM")
    (x:Z3_OP_LE) : print(o, "Z3_OP_LE")
    (x:Z3_OP_GE) : print(o, "Z3_OP_GE")
    (x:Z3_OP_LT) : print(o, "Z3_OP_LT")
    (x:Z3_OP_GT) : print(o, "Z3_OP_GT")
    (x:Z3_OP_ADD) : print(o, "Z3_OP_ADD")
    (x:Z3_OP_SUB) : print(o, "Z3_OP_SUB")
    (x:Z3_OP_UMINUS) : print(o, "Z3_OP_UMINUS")
    (x:Z3_OP_MUL) : print(o, "Z3_OP_MUL")
    (x:Z3_OP_DIV) : print(o, "Z3_OP_DIV")
    (x:Z3_OP_IDIV) : print(o, "Z3_OP_IDIV")
    (x:Z3_OP_REM) : print(o, "Z3_OP_REM")
    (x:Z3_OP_MOD) : print(o, "Z3_OP_MOD")
    (x:Z3_OP_TO_REAL) : print(o, "Z3_OP_TO_REAL")
    (x:Z3_OP_TO_INT) : print(o, "Z3_OP_TO_INT")
    (x:Z3_OP_IS_INT) : print(o, "Z3_OP_IS_INT")
    (x:Z3_OP_POWER) : print(o, "Z3_OP_POWER")
    (x:Z3_OP_STORE) : print(o, "Z3_OP_STORE")
    (x:Z3_OP_SELECT) : print(o, "Z3_OP_SELECT")
    (x:Z3_OP_CONST_ARRAY) : print(o, "Z3_OP_CONST_ARRAY")
    (x:Z3_OP_ARRAY_MAP) : print(o, "Z3_OP_ARRAY_MAP")
    (x:Z3_OP_ARRAY_DEFAULT) : print(o, "Z3_OP_ARRAY_DEFAULT")
    (x:Z3_OP_SET_UNION) : print(o, "Z3_OP_SET_UNION")
    (x:Z3_OP_SET_INTERSECT) : print(o, "Z3_OP_SET_INTERSECT")
    (x:Z3_OP_SET_DIFFERENCE) : print(o, "Z3_OP_SET_DIFFERENCE")
    (x:Z3_OP_SET_COMPLEMENT) : print(o, "Z3_OP_SET_COMPLEMENT")
    (x:Z3_OP_SET_SUBSET) : print(o, "Z3_OP_SET_SUBSET")
    (x:Z3_OP_AS_ARRAY) : print(o, "Z3_OP_AS_ARRAY")
    (x:Z3_OP_ARRAY_EXT) : print(o, "Z3_OP_ARRAY_EXT")
    (x:Z3_OP_SET_HAS_SIZE) : print(o, "Z3_OP_SET_HAS_SIZE")
    (x:Z3_OP_SET_CARD) : print(o, "Z3_OP_SET_CARD")
    (x:Z3_OP_BNUM) : print(o, "Z3_OP_BNUM")
    (x:Z3_OP_BIT1) : print(o, "Z3_OP_BIT1")
    (x:Z3_OP_BIT0) : print(o, "Z3_OP_BIT0")
    (x:Z3_OP_BNEG) : print(o, "Z3_OP_BNEG")
    (x:Z3_OP_BADD) : print(o, "Z3_OP_BADD")
    (x:Z3_OP_BSUB) : print(o, "Z3_OP_BSUB")
    (x:Z3_OP_BMUL) : print(o, "Z3_OP_BMUL")
    (x:Z3_OP_BSDIV) : print(o, "Z3_OP_BSDIV")
    (x:Z3_OP_BUDIV) : print(o, "Z3_OP_BUDIV")
    (x:Z3_OP_BSREM) : print(o, "Z3_OP_BSREM")
    (x:Z3_OP_BUREM) : print(o, "Z3_OP_BUREM")
    (x:Z3_OP_BSMOD) : print(o, "Z3_OP_BSMOD")
    (x:Z3_OP_BSDIV0) : print(o, "Z3_OP_BSDIV0")
    (x:Z3_OP_BUDIV0) : print(o, "Z3_OP_BUDIV0")
    (x:Z3_OP_BSREM0) : print(o, "Z3_OP_BSREM0")
    (x:Z3_OP_BUREM0) : print(o, "Z3_OP_BUREM0")
    (x:Z3_OP_BSMOD0) : print(o, "Z3_OP_BSMOD0")
    (x:Z3_OP_ULEQ) : print(o, "Z3_OP_ULEQ")
    (x:Z3_OP_SLEQ) : print(o, "Z3_OP_SLEQ")
    (x:Z3_OP_UGEQ) : print(o, "Z3_OP_UGEQ")
    (x:Z3_OP_SGEQ) : print(o, "Z3_OP_SGEQ")
    (x:Z3_OP_ULT) : print(o, "Z3_OP_ULT")
    (x:Z3_OP_SLT) : print(o, "Z3_OP_SLT")
    (x:Z3_OP_UGT) : print(o, "Z3_OP_UGT")
    (x:Z3_OP_SGT) : print(o, "Z3_OP_SGT")
    (x:Z3_OP_BAND) : print(o, "Z3_OP_BAND")
    (x:Z3_OP_BOR) : print(o, "Z3_OP_BOR")
    (x:Z3_OP_BNOT) : print(o, "Z3_OP_BNOT")
    (x:Z3_OP_BXOR) : print(o, "Z3_OP_BXOR")
    (x:Z3_OP_BNAND) : print(o, "Z3_OP_BNAND")
    (x:Z3_OP_BNOR) : print(o, "Z3_OP_BNOR")
    (x:Z3_OP_BXNOR) : print(o, "Z3_OP_BXNOR")
    (x:Z3_OP_CONCAT) : print(o, "Z3_OP_CONCAT")
    (x:Z3_OP_SIGN_EXT) : print(o, "Z3_OP_SIGN_EXT")
    (x:Z3_OP_ZERO_EXT) : print(o, "Z3_OP_ZERO_EXT")
    (x:Z3_OP_EXTRACT) : print(o, "Z3_OP_EXTRACT")
    (x:Z3_OP_REPEAT) : print(o, "Z3_OP_REPEAT")
    (x:Z3_OP_BREDOR) : print(o, "Z3_OP_BREDOR")
    (x:Z3_OP_BREDAND) : print(o, "Z3_OP_BREDAND")
    (x:Z3_OP_BCOMP) : print(o, "Z3_OP_BCOMP")
    (x:Z3_OP_BSHL) : print(o, "Z3_OP_BSHL")
    (x:Z3_OP_BLSHR) : print(o, "Z3_OP_BLSHR")
    (x:Z3_OP_BASHR) : print(o, "Z3_OP_BASHR")
    (x:Z3_OP_ROTATE_LEFT) : print(o, "Z3_OP_ROTATE_LEFT")
    (x:Z3_OP_ROTATE_RIGHT) : print(o, "Z3_OP_ROTATE_RIGHT")
    (x:Z3_OP_EXT_ROTATE_LEFT) : print(o, "Z3_OP_EXT_ROTATE_LEFT")
    (x:Z3_OP_EXT_ROTATE_RIGHT) : print(o, "Z3_OP_EXT_ROTATE_RIGHT")
    (x:Z3_OP_BIT2BOOL) : print(o, "Z3_OP_BIT2BOOL")
    (x:Z3_OP_INT2BV) : print(o, "Z3_OP_INT2BV")
    (x:Z3_OP_BV2INT) : print(o, "Z3_OP_BV2INT")
    (x:Z3_OP_CARRY) : print(o, "Z3_OP_CARRY")
    (x:Z3_OP_XOR3) : print(o, "Z3_OP_XOR3")
    (x:Z3_OP_BSMUL_NO_OVFL) : print(o, "Z3_OP_BSMUL_NO_OVFL")
    (x:Z3_OP_BUMUL_NO_OVFL) : print(o, "Z3_OP_BUMUL_NO_OVFL")
    (x:Z3_OP_BSMUL_NO_UDFL) : print(o, "Z3_OP_BSMUL_NO_UDFL")
    (x:Z3_OP_BSDIV_I) : print(o, "Z3_OP_BSDIV_I")
    (x:Z3_OP_BUDIV_I) : print(o, "Z3_OP_BUDIV_I")
    (x:Z3_OP_BSREM_I) : print(o, "Z3_OP_BSREM_I")
    (x:Z3_OP_BUREM_I) : print(o, "Z3_OP_BUREM_I")
    (x:Z3_OP_BSMOD_I) : print(o, "Z3_OP_BSMOD_I")
    (x:Z3_OP_PR_UNDEF) : print(o, "Z3_OP_PR_UNDEF")
    (x:Z3_OP_PR_TRUE) : print(o, "Z3_OP_PR_TRUE")
    (x:Z3_OP_PR_ASSERTED) : print(o, "Z3_OP_PR_ASSERTED")
    (x:Z3_OP_PR_GOAL) : print(o, "Z3_OP_PR_GOAL")
    (x:Z3_OP_PR_MODUS_PONENS) : print(o, "Z3_OP_PR_MODUS_PONENS")
    (x:Z3_OP_PR_REFLEXIVITY) : print(o, "Z3_OP_PR_REFLEXIVITY")
    (x:Z3_OP_PR_SYMMETRY) : print(o, "Z3_OP_PR_SYMMETRY")
    (x:Z3_OP_PR_TRANSITIVITY) : print(o, "Z3_OP_PR_TRANSITIVITY")
    (x:Z3_OP_PR_TRANSITIVITY_STAR) : print(o, "Z3_OP_PR_TRANSITIVITY_STAR")
    (x:Z3_OP_PR_MONOTONICITY) : print(o, "Z3_OP_PR_MONOTONICITY")
    (x:Z3_OP_PR_QUANT_INTRO) : print(o, "Z3_OP_PR_QUANT_INTRO")
    (x:Z3_OP_PR_BIND) : print(o, "Z3_OP_PR_BIND")
    (x:Z3_OP_PR_DISTRIBUTIVITY) : print(o, "Z3_OP_PR_DISTRIBUTIVITY")
    (x:Z3_OP_PR_AND_ELIM) : print(o, "Z3_OP_PR_AND_ELIM")
    (x:Z3_OP_PR_NOT_OR_ELIM) : print(o, "Z3_OP_PR_NOT_OR_ELIM")
    (x:Z3_OP_PR_REWRITE) : print(o, "Z3_OP_PR_REWRITE")
    (x:Z3_OP_PR_REWRITE_STAR) : print(o, "Z3_OP_PR_REWRITE_STAR")
    (x:Z3_OP_PR_PULL_QUANT) : print(o, "Z3_OP_PR_PULL_QUANT")
    (x:Z3_OP_PR_PUSH_QUANT) : print(o, "Z3_OP_PR_PUSH_QUANT")
    (x:Z3_OP_PR_ELIM_UNUSED_VARS) : print(o, "Z3_OP_PR_ELIM_UNUSED_VARS")
    (x:Z3_OP_PR_DER) : print(o, "Z3_OP_PR_DER")
    (x:Z3_OP_PR_QUANT_INST) : print(o, "Z3_OP_PR_QUANT_INST")
    (x:Z3_OP_PR_HYPOTHESIS) : print(o, "Z3_OP_PR_HYPOTHESIS")
    (x:Z3_OP_PR_LEMMA) : print(o, "Z3_OP_PR_LEMMA")
    (x:Z3_OP_PR_UNIT_RESOLUTION) : print(o, "Z3_OP_PR_UNIT_RESOLUTION")
    (x:Z3_OP_PR_IFF_TRUE) : print(o, "Z3_OP_PR_IFF_TRUE")
    (x:Z3_OP_PR_IFF_FALSE) : print(o, "Z3_OP_PR_IFF_FALSE")
    (x:Z3_OP_PR_COMMUTATIVITY) : print(o, "Z3_OP_PR_COMMUTATIVITY")
    (x:Z3_OP_PR_DEF_AXIOM) : print(o, "Z3_OP_PR_DEF_AXIOM")
    (x:Z3_OP_PR_ASSUMPTION_ADD) : print(o, "Z3_OP_PR_ASSUMPTION_ADD")
    (x:Z3_OP_PR_LEMMA_ADD) : print(o, "Z3_OP_PR_LEMMA_ADD")
    (x:Z3_OP_PR_REDUNDANT_DEL) : print(o, "Z3_OP_PR_REDUNDANT_DEL")
    (x:Z3_OP_PR_CLAUSE_TRAIL) : print(o, "Z3_OP_PR_CLAUSE_TRAIL")
    (x:Z3_OP_PR_DEF_INTRO) : print(o, "Z3_OP_PR_DEF_INTRO")
    (x:Z3_OP_PR_APPLY_DEF) : print(o, "Z3_OP_PR_APPLY_DEF")
    (x:Z3_OP_PR_IFF_OEQ) : print(o, "Z3_OP_PR_IFF_OEQ")
    (x:Z3_OP_PR_NNF_POS) : print(o, "Z3_OP_PR_NNF_POS")
    (x:Z3_OP_PR_NNF_NEG) : print(o, "Z3_OP_PR_NNF_NEG")
    (x:Z3_OP_PR_SKOLEMIZE) : print(o, "Z3_OP_PR_SKOLEMIZE")
    (x:Z3_OP_PR_MODUS_PONENS_OEQ) : print(o, "Z3_OP_PR_MODUS_PONENS_OEQ")
    (x:Z3_OP_PR_TH_LEMMA) : print(o, "Z3_OP_PR_TH_LEMMA")
    (x:Z3_OP_PR_HYPER_RESOLVE) : print(o, "Z3_OP_PR_HYPER_RESOLVE")
    (x:Z3_OP_RA_STORE) : print(o, "Z3_OP_RA_STORE")
    (x:Z3_OP_RA_EMPTY) : print(o, "Z3_OP_RA_EMPTY")
    (x:Z3_OP_RA_IS_EMPTY) : print(o, "Z3_OP_RA_IS_EMPTY")
    (x:Z3_OP_RA_JOIN) : print(o, "Z3_OP_RA_JOIN")
    (x:Z3_OP_RA_UNION) : print(o, "Z3_OP_RA_UNION")
    (x:Z3_OP_RA_WIDEN) : print(o, "Z3_OP_RA_WIDEN")
    (x:Z3_OP_RA_PROJECT) : print(o, "Z3_OP_RA_PROJECT")
    (x:Z3_OP_RA_FILTER) : print(o, "Z3_OP_RA_FILTER")
    (x:Z3_OP_RA_NEGATION_FILTER) : print(o, "Z3_OP_RA_NEGATION_FILTER")
    (x:Z3_OP_RA_RENAME) : print(o, "Z3_OP_RA_RENAME")
    (x:Z3_OP_RA_COMPLEMENT) : print(o, "Z3_OP_RA_COMPLEMENT")
    (x:Z3_OP_RA_SELECT) : print(o, "Z3_OP_RA_SELECT")
    (x:Z3_OP_RA_CLONE) : print(o, "Z3_OP_RA_CLONE")
    (x:Z3_OP_FD_CONSTANT) : print(o, "Z3_OP_FD_CONSTANT")
    (x:Z3_OP_FD_LT) : print(o, "Z3_OP_FD_LT")
    (x:Z3_OP_SEQ_UNIT) : print(o, "Z3_OP_SEQ_UNIT")
    (x:Z3_OP_SEQ_EMPTY) : print(o, "Z3_OP_SEQ_EMPTY")
    (x:Z3_OP_SEQ_CONCAT) : print(o, "Z3_OP_SEQ_CONCAT")
    (x:Z3_OP_SEQ_PREFIX) : print(o, "Z3_OP_SEQ_PREFIX")
    (x:Z3_OP_SEQ_SUFFIX) : print(o, "Z3_OP_SEQ_SUFFIX")
    (x:Z3_OP_SEQ_CONTAINS) : print(o, "Z3_OP_SEQ_CONTAINS")
    (x:Z3_OP_SEQ_EXTRACT) : print(o, "Z3_OP_SEQ_EXTRACT")
    (x:Z3_OP_SEQ_REPLACE) : print(o, "Z3_OP_SEQ_REPLACE")
    (x:Z3_OP_SEQ_AT) : print(o, "Z3_OP_SEQ_AT")
    (x:Z3_OP_SEQ_NTH) : print(o, "Z3_OP_SEQ_NTH")
    (x:Z3_OP_SEQ_LENGTH) : print(o, "Z3_OP_SEQ_LENGTH")
    (x:Z3_OP_SEQ_INDEX) : print(o, "Z3_OP_SEQ_INDEX")
    (x:Z3_OP_SEQ_LAST_INDEX) : print(o, "Z3_OP_SEQ_LAST_INDEX")
    (x:Z3_OP_SEQ_TO_RE) : print(o, "Z3_OP_SEQ_TO_RE")
    (x:Z3_OP_SEQ_IN_RE) : print(o, "Z3_OP_SEQ_IN_RE")
    (x:Z3_OP_STR_TO_INT) : print(o, "Z3_OP_STR_TO_INT")
    (x:Z3_OP_INT_TO_STR) : print(o, "Z3_OP_INT_TO_STR")
    (x:Z3_OP_STRING_LT) : print(o, "Z3_OP_STRING_LT")
    (x:Z3_OP_STRING_LE) : print(o, "Z3_OP_STRING_LE")
    (x:Z3_OP_RE_PLUS) : print(o, "Z3_OP_RE_PLUS")
    (x:Z3_OP_RE_STAR) : print(o, "Z3_OP_RE_STAR")
    (x:Z3_OP_RE_OPTION) : print(o, "Z3_OP_RE_OPTION")
    (x:Z3_OP_RE_CONCAT) : print(o, "Z3_OP_RE_CONCAT")
    (x:Z3_OP_RE_UNION) : print(o, "Z3_OP_RE_UNION")
    (x:Z3_OP_RE_RANGE) : print(o, "Z3_OP_RE_RANGE")
    (x:Z3_OP_RE_LOOP) : print(o, "Z3_OP_RE_LOOP")
    (x:Z3_OP_RE_INTERSECT) : print(o, "Z3_OP_RE_INTERSECT")
    (x:Z3_OP_RE_EMPTY_SET) : print(o, "Z3_OP_RE_EMPTY_SET")
    (x:Z3_OP_RE_FULL_SET) : print(o, "Z3_OP_RE_FULL_SET")
    (x:Z3_OP_RE_COMPLEMENT) : print(o, "Z3_OP_RE_COMPLEMENT")
    (x:Z3_OP_LABEL) : print(o, "Z3_OP_LABEL")
    (x:Z3_OP_LABEL_LIT) : print(o, "Z3_OP_LABEL_LIT")
    (x:Z3_OP_DT_CONSTRUCTOR) : print(o, "Z3_OP_DT_CONSTRUCTOR")
    (x:Z3_OP_DT_RECOGNISER) : print(o, "Z3_OP_DT_RECOGNISER")
    (x:Z3_OP_DT_IS) : print(o, "Z3_OP_DT_IS")
    (x:Z3_OP_DT_ACCESSOR) : print(o, "Z3_OP_DT_ACCESSOR")
    (x:Z3_OP_DT_UPDATE_FIELD) : print(o, "Z3_OP_DT_UPDATE_FIELD")
    (x:Z3_OP_PB_AT_MOST) : print(o, "Z3_OP_PB_AT_MOST")
    (x:Z3_OP_PB_AT_LEAST) : print(o, "Z3_OP_PB_AT_LEAST")
    (x:Z3_OP_PB_LE) : print(o, "Z3_OP_PB_LE")
    (x:Z3_OP_PB_GE) : print(o, "Z3_OP_PB_GE")
    (x:Z3_OP_PB_EQ) : print(o, "Z3_OP_PB_EQ")
    (x:Z3_OP_SPECIAL_RELATION_LO) : print(o, "Z3_OP_SPECIAL_RELATION_LO")
    (x:Z3_OP_SPECIAL_RELATION_PO) : print(o, "Z3_OP_SPECIAL_RELATION_PO")
    (x:Z3_OP_SPECIAL_RELATION_PLO) : print(o, "Z3_OP_SPECIAL_RELATION_PLO")
    (x:Z3_OP_SPECIAL_RELATION_TO) : print(o, "Z3_OP_SPECIAL_RELATION_TO")
    (x:Z3_OP_SPECIAL_RELATION_TC) : print(o, "Z3_OP_SPECIAL_RELATION_TC")
    (x:Z3_OP_SPECIAL_RELATION_TRC) : print(o, "Z3_OP_SPECIAL_RELATION_TRC")
    (x:Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN) : print(o, "Z3_OP_FPA_RM_NEAREST_TIES_TO_EVEN")
    (x:Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY) : print(o, "Z3_OP_FPA_RM_NEAREST_TIES_TO_AWAY")
    (x:Z3_OP_FPA_RM_TOWARD_POSITIVE) : print(o, "Z3_OP_FPA_RM_TOWARD_POSITIVE")
    (x:Z3_OP_FPA_RM_TOWARD_NEGATIVE) : print(o, "Z3_OP_FPA_RM_TOWARD_NEGATIVE")
    (x:Z3_OP_FPA_RM_TOWARD_ZERO) : print(o, "Z3_OP_FPA_RM_TOWARD_ZERO")
    (x:Z3_OP_FPA_NUM) : print(o, "Z3_OP_FPA_NUM")
    (x:Z3_OP_FPA_PLUS_INF) : print(o, "Z3_OP_FPA_PLUS_INF")
    (x:Z3_OP_FPA_MINUS_INF) : print(o, "Z3_OP_FPA_MINUS_INF")
    (x:Z3_OP_FPA_NAN) : print(o, "Z3_OP_FPA_NAN")
    (x:Z3_OP_FPA_PLUS_ZERO) : print(o, "Z3_OP_FPA_PLUS_ZERO")
    (x:Z3_OP_FPA_MINUS_ZERO) : print(o, "Z3_OP_FPA_MINUS_ZERO")
    (x:Z3_OP_FPA_ADD) : print(o, "Z3_OP_FPA_ADD")
    (x:Z3_OP_FPA_SUB) : print(o, "Z3_OP_FPA_SUB")
    (x:Z3_OP_FPA_NEG) : print(o, "Z3_OP_FPA_NEG")
    (x:Z3_OP_FPA_MUL) : print(o, "Z3_OP_FPA_MUL")
    (x:Z3_OP_FPA_DIV) : print(o, "Z3_OP_FPA_DIV")
    (x:Z3_OP_FPA_REM) : print(o, "Z3_OP_FPA_REM")
    (x:Z3_OP_FPA_ABS) : print(o, "Z3_OP_FPA_ABS")
    (x:Z3_OP_FPA_MIN) : print(o, "Z3_OP_FPA_MIN")
    (x:Z3_OP_FPA_MAX) : print(o, "Z3_OP_FPA_MAX")
    (x:Z3_OP_FPA_FMA) : print(o, "Z3_OP_FPA_FMA")
    (x:Z3_OP_FPA_SQRT) : print(o, "Z3_OP_FPA_SQRT")
    (x:Z3_OP_FPA_ROUND_TO_INTEGRAL) : print(o, "Z3_OP_FPA_ROUND_TO_INTEGRAL")
    (x:Z3_OP_FPA_EQ) : print(o, "Z3_OP_FPA_EQ")
    (x:Z3_OP_FPA_LT) : print(o, "Z3_OP_FPA_LT")
    (x:Z3_OP_FPA_GT) : print(o, "Z3_OP_FPA_GT")
    (x:Z3_OP_FPA_LE) : print(o, "Z3_OP_FPA_LE")
    (x:Z3_OP_FPA_GE) : print(o, "Z3_OP_FPA_GE")
    (x:Z3_OP_FPA_IS_NAN) : print(o, "Z3_OP_FPA_IS_NAN")
    (x:Z3_OP_FPA_IS_INF) : print(o, "Z3_OP_FPA_IS_INF")
    (x:Z3_OP_FPA_IS_ZERO) : print(o, "Z3_OP_FPA_IS_ZERO")
    (x:Z3_OP_FPA_IS_NORMAL) : print(o, "Z3_OP_FPA_IS_NORMAL")
    (x:Z3_OP_FPA_IS_SUBNORMAL) : print(o, "Z3_OP_FPA_IS_SUBNORMAL")
    (x:Z3_OP_FPA_IS_NEGATIVE) : print(o, "Z3_OP_FPA_IS_NEGATIVE")
    (x:Z3_OP_FPA_IS_POSITIVE) : print(o, "Z3_OP_FPA_IS_POSITIVE")
    (x:Z3_OP_FPA_FP) : print(o, "Z3_OP_FPA_FP")
    (x:Z3_OP_FPA_TO_FP) : print(o, "Z3_OP_FPA_TO_FP")
    (x:Z3_OP_FPA_TO_FP_UNSIGNED) : print(o, "Z3_OP_FPA_TO_FP_UNSIGNED")
    (x:Z3_OP_FPA_TO_UBV) : print(o, "Z3_OP_FPA_TO_UBV")
    (x:Z3_OP_FPA_TO_SBV) : print(o, "Z3_OP_FPA_TO_SBV")
    (x:Z3_OP_FPA_TO_REAL) : print(o, "Z3_OP_FPA_TO_REAL")
    (x:Z3_OP_FPA_TO_IEEE_BV) : print(o, "Z3_OP_FPA_TO_IEEE_BV")
    (x:Z3_OP_FPA_BVWRAP) : print(o, "Z3_OP_FPA_BVWRAP")
    (x:Z3_OP_FPA_BV2RM) : print(o, "Z3_OP_FPA_BV2RM")
    (x:Z3_OP_INTERNAL) : print(o, "Z3_OP_INTERNAL")
    (x:Z3_OP_UNINTERPRETED) : print(o, "Z3_OP_UNINTERPRETED")

public defmethod equal? (a:Z3_decl_kind, b:Z3_decl_kind) -> True|False :
  to-int(a) == to-int(b)

