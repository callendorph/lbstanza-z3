defpackage z3/AST/Vector :
  import core
  import z3/Context
  import z3/AST/AST
  import z3/Wrapper


public lostanza deftype ASTVector <: IndexedCollection<AST> :
  ctx:ref<Context>
  value:ptr<?>

public lostanza defn ASTVector (ctx:ref<Context>, p:ptr<?>) -> ref<ASTVector> :
  if p == null :
    fatal("Invalid ASTVector Pointer")
  val ret = new ASTVector{ctx, p}
  val trk = get-tracker(ctx)
  inc-ref(trk, AST_VECTOR_REF, p)
  return ret

public lostanza defn ASTVector (ctx:ref<Context>) -> ref<ASTVector> :
  val ret = w_Z3_mk_ast_vector(ctx.value)
  return ASTVector(ctx, ret)

public defn ASTVector (ctx:Context, values:Tuple<AST>) -> ASTVector :
  val ret = ASTVector(ctx)
  val cnt = length(values)
  resize(ret, cnt)
  for i in 0 to cnt do:
    ret[i] = values[i]
  ret

public lostanza defn get-size (v:ref<ASTVector>) -> ref<Int> :
  val ret = w_Z3_ast_vector_size(v.ctx.value, v.value)
  return new Int{ret}

public lostanza defn get-value (v:ref<ASTVector>, idx:ref<Int>) -> ref<AST> :
  val ret = w_Z3_ast_vector_get(v.ctx.value, v.value, idx.value)
  return AST(v.ctx, ret)

public lostanza defn set-value (v:ref<ASTVector>, idx:ref<Int>, a:ref<AST>) -> ref<False> :
  return w_Z3_ast_vector_set(v.ctx.value, v.value, idx.value, a.value)

public lostanza defn resize (v:ref<ASTVector>, n:ref<Int>) -> ref<False> :
  return w_Z3_ast_vector_resize(v.ctx.value, v.value, n.value)

public lostanza defn push (v:ref<ASTVector>, a:ref<AST>) -> ref<False> :
  return w_Z3_ast_vector_push(v.ctx.value, v.value, a.value)

public lostanza defn translate (v:ref<ASTVector>, target:ref<Context>) -> ref<ASTVector> :
  val ret = w_Z3_ast_vector_translate(v.ctx.value, v.value, target.value)
  return ASTVector(target, ret)

public lostanza defn mk-string (v:ref<ASTVector>) -> ref<String> :
  val ret = w_Z3_ast_vector_to_string(v.ctx.value, v.value)
  return String(ret)

public defmethod print (o:OutputStream, v:ASTVector) :
  print(o, "%_" % [mk-string(v)])

; Indexed Collection Interface

public defmethod length (v:ASTVector) -> Int :
  get-size(v)

public defmethod get (v:ASTVector, idx:Int) -> AST :
  get-value(v, idx)

public defmethod set (v:ASTVector, idx:Int, a:AST) -> False :
  set-value(v, idx, a)
