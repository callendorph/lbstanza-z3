defpackage z3/Errors :
  import core
  import z3/Context
  import z3/Wrapper
  import z3/Enums/Z3_error_code

public defstruct Z3Error <: Exception:
  msg:String

public lostanza defn Z3Error (msg:ptr<byte>) -> ref<Z3Error> :
  return Z3Error(String(msg))

public defmethod print (o:OutputStream, e:Z3Error) :
  print(o, "Z3Error: %_" % [msg(e)])

public defstruct Z3InternalError <: Exception:
  ctx:Context
  code:Z3_error_code

public lostanza defn Z3InternalError (ctx:ptr<?>, code:ref<Z3_error_code>) -> ref<Z3InternalError> :
  val ret = Z3InternalError(Context(ctx), code)
  return ret

public defmethod print (o:OutputStream, e:Z3InternalError) :
  val c = code(e)
  val msg = get-error-msg(ctx(e), c)
  print(o, "Z3 Internal Error: code=%_ msg=%_" % [c, msg])

public lostanza defn get-error-code (ctx:ptr<?>) -> ref<Z3_error_code> :
  val ret = w_Z3_get_error_code(ctx)
  return Z3_error_code(ret)

public lostanza defn get-error-code (ctx:ref<Context>) -> ref<Z3_error_code> :
  return get-error-code(ctx.value)

public lostanza defn set-error-code (ctx:ref<Context>, code:ref<Z3_error_code>) -> ref<False> :
  return w_Z3_set_error(ctx.value, to-int(code).value)

public lostanza defn get-error-msg (ctx:ref<Context>, code:ref<Z3_error_code>) -> ref<String> :
  val ret = w_Z3_get_error_msg(ctx.value, to-int(code).value)
  return String(ret)

public lostanza defn check-error-code (ctx:ptr<?>) -> ref<False>:
  val code = get-error-code(ctx)
  if code != Z3_OK :
    throw(Z3InternalError(ctx, code))
  return false

public lostanza defn check-error_code (ctx:ref<Context>) -> ref<False> :
  return check-error-code(ctx.value)

; @TODO set_error_handler