; This file was auto-generated by lbstanza-wrapper
; Version 0.1.0
; Manual editing would be unwise
defpackage z3/Wrapper :
  import core
  import core/dynamic-library

#if-defined(COMPILE-STATIC):
  extern Z3_global_param_set : (ptr<byte>,ptr<byte>) -> int  ;  void
  extern Z3_global_param_reset_all : () -> int  ;  void
  extern Z3_global_param_get : (ptr<byte>,ptr<ptr<byte>>) -> byte
  extern Z3_mk_config : () -> ptr<?>
  extern Z3_del_config : (ptr<?>) -> int  ;  void
  extern Z3_set_param_value : (ptr<?>,ptr<byte>,ptr<byte>) -> int  ;  void
  extern Z3_mk_context : (ptr<?>) -> ptr<?>
  extern Z3_mk_context_rc : (ptr<?>) -> ptr<?>
  extern Z3_del_context : (ptr<?>) -> int  ;  void
  extern Z3_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_update_param_value : (ptr<?>,ptr<byte>,ptr<byte>) -> int  ;  void
  extern Z3_get_global_param_descrs : (ptr<?>) -> ptr<?>
  extern Z3_interrupt : (ptr<?>) -> int  ;  void
  extern Z3_enable_concurrent_dec_ref : (ptr<?>) -> int  ;  void
  extern Z3_mk_params : (ptr<?>) -> ptr<?>
  extern Z3_params_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_params_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_params_set_bool : (ptr<?>,ptr<?>,ptr<?>,byte) -> int  ;  void
  extern Z3_params_set_uint : (ptr<?>,ptr<?>,ptr<?>,int) -> int  ;  void
  extern Z3_params_set_double : (ptr<?>,ptr<?>,ptr<?>,double) -> int  ;  void
  extern Z3_params_set_symbol : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_params_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_params_validate : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_param_descrs_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_param_descrs_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_param_descrs_get_kind : (ptr<?>,ptr<?>,ptr<?>) -> int
  extern Z3_param_descrs_size : (ptr<?>,ptr<?>) -> int
  extern Z3_param_descrs_get_name : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_param_descrs_get_documentation : (ptr<?>,ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_param_descrs_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_mk_int_symbol : (ptr<?>,int) -> ptr<?>
  extern Z3_mk_string_symbol : (ptr<?>,ptr<byte>) -> ptr<?>
  extern Z3_mk_uninterpreted_sort : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bool_sort : (ptr<?>) -> ptr<?>
  extern Z3_mk_int_sort : (ptr<?>) -> ptr<?>
  extern Z3_mk_real_sort : (ptr<?>) -> ptr<?>
  extern Z3_mk_bv_sort : (ptr<?>,int) -> ptr<?>
  extern Z3_mk_finite_domain_sort : (ptr<?>,ptr<?>,long) -> ptr<?>
  extern Z3_mk_array_sort : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_array_sort_n : (ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_tuple_sort : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_enumeration_sort : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_list_sort : (ptr<?>,ptr<?>,ptr<?>,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_constructor : (ptr<?>,ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<int>) -> ptr<?>
  extern Z3_del_constructor : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_mk_datatype : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_datatype_sort : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_constructor_list : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_del_constructor_list : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_mk_datatypes : (ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>) -> int  ;  void
  extern Z3_query_constructor : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>) -> int  ;  void
  extern Z3_mk_func_decl : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_app : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_const : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fresh_func_decl : (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_fresh_const : (ptr<?>,ptr<byte>,ptr<?>) -> ptr<?>
  extern Z3_mk_rec_func_decl : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_add_rec_def : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> int  ;  void
  extern Z3_mk_true : (ptr<?>) -> ptr<?>
  extern Z3_mk_false : (ptr<?>) -> ptr<?>
  extern Z3_mk_eq : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_distinct : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_not : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_ite : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_iff : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_implies : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_xor : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_and : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_or : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_add : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_mul : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_sub : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_unary_minus : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_div : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_mod : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_rem : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_power : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_lt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_le : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_gt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_ge : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_divides : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_int2real : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_real2int : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_is_int : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvnot : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvredand : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvredor : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvand : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvor : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvxor : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvnand : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvnor : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvxnor : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvneg : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvadd : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvsub : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvmul : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvudiv : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvsdiv : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvurem : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvsrem : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvsmod : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvult : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvslt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvule : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvsle : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvuge : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvsge : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvugt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvsgt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_concat : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_extract : (ptr<?>,int,int,ptr<?>) -> ptr<?>
  extern Z3_mk_sign_ext : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_zero_ext : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_repeat : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_bit2bool : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_bvshl : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvlshr : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvashr : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_rotate_left : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_rotate_right : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_ext_rotate_left : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_ext_rotate_right : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_int2bv : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_bv2int : (ptr<?>,ptr<?>,byte) -> ptr<?>
  extern Z3_mk_bvadd_no_overflow : (ptr<?>,ptr<?>,ptr<?>,byte) -> ptr<?>
  extern Z3_mk_bvadd_no_underflow : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvsub_no_overflow : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvsub_no_underflow : (ptr<?>,ptr<?>,ptr<?>,byte) -> ptr<?>
  extern Z3_mk_bvsdiv_no_overflow : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvneg_no_overflow : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_bvmul_no_overflow : (ptr<?>,ptr<?>,ptr<?>,byte) -> ptr<?>
  extern Z3_mk_bvmul_no_underflow : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_select : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_select_n : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_store : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_store_n : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_const_array : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_map : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_array_default : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_as_array : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_set_has_size : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_set_sort : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_empty_set : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_full_set : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_set_add : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_set_del : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_set_union : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_set_intersect : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_set_difference : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_set_complement : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_set_member : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_set_subset : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_array_ext : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_numeral : (ptr<?>,ptr<byte>,ptr<?>) -> ptr<?>
  extern Z3_mk_real : (ptr<?>,int,int) -> ptr<?>
  extern Z3_mk_int : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_unsigned_int : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_int64 : (ptr<?>,long,ptr<?>) -> ptr<?>
  extern Z3_mk_unsigned_int64 : (ptr<?>,long,ptr<?>) -> ptr<?>
  extern Z3_mk_bv_numeral : (ptr<?>,int,ptr<byte>) -> ptr<?>
  extern Z3_mk_seq_sort : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_is_seq_sort : (ptr<?>,ptr<?>) -> byte
  extern Z3_get_seq_sort_basis : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_re_sort : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_is_re_sort : (ptr<?>,ptr<?>) -> byte
  extern Z3_get_re_sort_basis : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_string_sort : (ptr<?>) -> ptr<?>
  extern Z3_mk_char_sort : (ptr<?>) -> ptr<?>
  extern Z3_is_string_sort : (ptr<?>,ptr<?>) -> byte
  extern Z3_is_char_sort : (ptr<?>,ptr<?>) -> byte
  extern Z3_mk_string : (ptr<?>,ptr<byte>) -> ptr<?>
  extern Z3_mk_lstring : (ptr<?>,int,ptr<byte>) -> ptr<?>
  extern Z3_mk_u32string : (ptr<?>,int,ptr<int>) -> ptr<?>
  extern Z3_is_string : (ptr<?>,ptr<?>) -> byte
  extern Z3_get_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_get_lstring : (ptr<?>,ptr<?>,ptr<int>) -> ptr<byte>
  extern Z3_get_string_length : (ptr<?>,ptr<?>) -> int
  extern Z3_get_string_contents : (ptr<?>,ptr<?>,int,ptr<int>) -> int  ;  void
  extern Z3_mk_seq_empty : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_unit : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_concat : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_seq_prefix : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_suffix : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_contains : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_str_lt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_str_le : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_extract : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_replace : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_at : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_nth : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_length : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_index : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_last_index : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_str_to_int : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_int_to_str : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_string_to_code : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_string_from_code : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_ubv_to_str : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_sbv_to_str : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_to_re : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_seq_in_re : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_re_plus : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_re_star : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_re_option : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_re_union : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_re_concat : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_re_range : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_re_allchar : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_re_loop : (ptr<?>,ptr<?>,int,int) -> ptr<?>
  extern Z3_mk_re_power : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_mk_re_intersect : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_re_complement : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_re_diff : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_re_empty : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_re_full : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_char : (ptr<?>,int) -> ptr<?>
  extern Z3_mk_char_le : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_char_to_int : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_char_to_bv : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_char_from_bv : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_char_is_digit : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_linear_order : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_mk_partial_order : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_mk_piecewise_linear_order : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_mk_tree_order : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_mk_transitive_closure : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_pattern : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_mk_bound : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_forall : (ptr<?>,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_exists : (ptr<?>,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_quantifier : (ptr<?>,byte,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_quantifier_ex : (ptr<?>,byte,int,ptr<?>,ptr<?>,int,ptr<ptr<?>>,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_forall_const : (ptr<?>,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_exists_const : (ptr<?>,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_quantifier_const : (ptr<?>,byte,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_quantifier_const_ex : (ptr<?>,byte,int,ptr<?>,ptr<?>,int,ptr<ptr<?>>,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_lambda : (ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_mk_lambda_const : (ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_get_symbol_kind : (ptr<?>,ptr<?>) -> int
  extern Z3_get_symbol_int : (ptr<?>,ptr<?>) -> int
  extern Z3_get_symbol_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_get_sort_name : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_sort_id : (ptr<?>,ptr<?>) -> int
  extern Z3_sort_to_ast : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_is_eq_sort : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_get_sort_kind : (ptr<?>,ptr<?>) -> int
  extern Z3_get_bv_sort_size : (ptr<?>,ptr<?>) -> int
  extern Z3_get_finite_domain_sort_size : (ptr<?>,ptr<?>,ptr<long>) -> byte
  extern Z3_get_array_sort_domain : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_array_sort_domain_n : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_array_sort_range : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_tuple_sort_mk_decl : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_tuple_sort_num_fields : (ptr<?>,ptr<?>) -> int
  extern Z3_get_tuple_sort_field_decl : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_datatype_sort_num_constructors : (ptr<?>,ptr<?>) -> int
  extern Z3_get_datatype_sort_constructor : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_datatype_sort_recognizer : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_datatype_sort_constructor_accessor : (ptr<?>,ptr<?>,int,int) -> ptr<?>
  extern Z3_datatype_update_field : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_relation_arity : (ptr<?>,ptr<?>) -> int
  extern Z3_get_relation_column : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_mk_atmost : (ptr<?>,int,ptr<ptr<?>>,int) -> ptr<?>
  extern Z3_mk_atleast : (ptr<?>,int,ptr<ptr<?>>,int) -> ptr<?>
  extern Z3_mk_pble : (ptr<?>,int,ptr<ptr<?>>,ptr<int>,int) -> ptr<?>
  extern Z3_mk_pbge : (ptr<?>,int,ptr<ptr<?>>,ptr<int>,int) -> ptr<?>
  extern Z3_mk_pbeq : (ptr<?>,int,ptr<ptr<?>>,ptr<int>,int) -> ptr<?>
  extern Z3_func_decl_to_ast : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_is_eq_func_decl : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_get_func_decl_id : (ptr<?>,ptr<?>) -> int
  extern Z3_get_decl_name : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_decl_kind : (ptr<?>,ptr<?>) -> int
  extern Z3_get_domain_size : (ptr<?>,ptr<?>) -> int
  extern Z3_get_arity : (ptr<?>,ptr<?>) -> int
  extern Z3_get_domain : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_range : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_decl_num_parameters : (ptr<?>,ptr<?>) -> int
  extern Z3_get_decl_parameter_kind : (ptr<?>,ptr<?>,int) -> int
  extern Z3_get_decl_int_parameter : (ptr<?>,ptr<?>,int) -> int
  extern Z3_get_decl_double_parameter : (ptr<?>,ptr<?>,int) -> double
  extern Z3_get_decl_symbol_parameter : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_decl_sort_parameter : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_decl_ast_parameter : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_decl_func_decl_parameter : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_decl_rational_parameter : (ptr<?>,ptr<?>,int) -> ptr<byte>
  extern Z3_app_to_ast : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_app_decl : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_app_num_args : (ptr<?>,ptr<?>) -> int
  extern Z3_get_app_arg : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_is_eq_ast : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_get_ast_id : (ptr<?>,ptr<?>) -> int
  extern Z3_get_ast_hash : (ptr<?>,ptr<?>) -> int
  extern Z3_get_sort : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_is_well_sorted : (ptr<?>,ptr<?>) -> byte
  extern Z3_get_bool_value : (ptr<?>,ptr<?>) -> int
  extern Z3_get_ast_kind : (ptr<?>,ptr<?>) -> int
  extern Z3_is_app : (ptr<?>,ptr<?>) -> byte
  extern Z3_is_numeral_ast : (ptr<?>,ptr<?>) -> byte
  extern Z3_is_algebraic_number : (ptr<?>,ptr<?>) -> byte
  extern Z3_to_app : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_to_func_decl : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_numeral_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_get_numeral_binary_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_get_numeral_decimal_string : (ptr<?>,ptr<?>,int) -> ptr<byte>
  extern Z3_get_numeral_double : (ptr<?>,ptr<?>) -> double
  extern Z3_get_numerator : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_denominator : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_numeral_small : (ptr<?>,ptr<?>,ptr<long>,ptr<long>) -> byte
  extern Z3_get_numeral_int : (ptr<?>,ptr<?>,ptr<int>) -> byte
  extern Z3_get_numeral_uint : (ptr<?>,ptr<?>,ptr<int>) -> byte
  extern Z3_get_numeral_uint64 : (ptr<?>,ptr<?>,ptr<long>) -> byte
  extern Z3_get_numeral_int64 : (ptr<?>,ptr<?>,ptr<long>) -> byte
  extern Z3_get_numeral_rational_int64 : (ptr<?>,ptr<?>,ptr<long>,ptr<long>) -> byte
  extern Z3_get_algebraic_number_lower : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_algebraic_number_upper : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_pattern_to_ast : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_pattern_num_terms : (ptr<?>,ptr<?>) -> int
  extern Z3_get_pattern : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_index_value : (ptr<?>,ptr<?>) -> int
  extern Z3_is_quantifier_forall : (ptr<?>,ptr<?>) -> byte
  extern Z3_is_quantifier_exists : (ptr<?>,ptr<?>) -> byte
  extern Z3_is_lambda : (ptr<?>,ptr<?>) -> byte
  extern Z3_get_quantifier_weight : (ptr<?>,ptr<?>) -> int
  extern Z3_get_quantifier_num_patterns : (ptr<?>,ptr<?>) -> int
  extern Z3_get_quantifier_pattern_ast : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_quantifier_num_no_patterns : (ptr<?>,ptr<?>) -> int
  extern Z3_get_quantifier_no_pattern_ast : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_quantifier_num_bound : (ptr<?>,ptr<?>) -> int
  extern Z3_get_quantifier_bound_name : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_quantifier_bound_sort : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_get_quantifier_body : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_simplify : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_simplify_ex : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_simplify_get_help : (ptr<?>) -> ptr<byte>
  extern Z3_simplify_get_param_descrs : (ptr<?>) -> ptr<?>
  extern Z3_update_term : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_substitute : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>
  extern Z3_substitute_vars : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_substitute_funs : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>
  extern Z3_translate : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_model : (ptr<?>) -> ptr<?>
  extern Z3_model_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_model_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_model_eval : (ptr<?>,ptr<?>,ptr<?>,byte,ptr<ptr<?>>) -> byte
  extern Z3_model_get_const_interp : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_model_has_interp : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_model_get_func_interp : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_model_get_num_consts : (ptr<?>,ptr<?>) -> int
  extern Z3_model_get_const_decl : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_model_get_num_funcs : (ptr<?>,ptr<?>) -> int
  extern Z3_model_get_func_decl : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_model_get_num_sorts : (ptr<?>,ptr<?>) -> int
  extern Z3_model_get_sort : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_model_get_sort_universe : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_model_translate : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_is_as_array : (ptr<?>,ptr<?>) -> byte
  extern Z3_get_as_array_func_decl : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_add_func_interp : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_add_const_interp : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_func_interp_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_func_interp_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_func_interp_get_num_entries : (ptr<?>,ptr<?>) -> int
  extern Z3_func_interp_get_entry : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_func_interp_get_else : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_func_interp_set_else : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_func_interp_get_arity : (ptr<?>,ptr<?>) -> int
  extern Z3_func_interp_add_entry : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_func_entry_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_func_entry_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_func_entry_get_value : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_func_entry_get_num_args : (ptr<?>,ptr<?>) -> int
  extern Z3_func_entry_get_arg : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_open_log : (ptr<byte>) -> byte
  extern Z3_append_log : (ptr<byte>) -> int  ;  void
  extern Z3_close_log : () -> int  ;  void
  extern Z3_toggle_warning_messages : (byte) -> int  ;  void
  extern Z3_set_ast_print_mode : (ptr<?>,int) -> int  ;  void
  extern Z3_ast_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_pattern_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_sort_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_func_decl_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_model_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_benchmark_to_smtlib_string : (ptr<?>,ptr<byte>,ptr<byte>,ptr<byte>,ptr<byte>,int,ptr<ptr<?>>,ptr<?>) -> ptr<byte>
  extern Z3_parse_smtlib2_string : (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>
  extern Z3_parse_smtlib2_file : (ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>
  extern Z3_eval_smtlib2_string : (ptr<?>,ptr<byte>) -> ptr<byte>
  extern Z3_mk_parser_context : (ptr<?>) -> ptr<?>
  extern Z3_parser_context_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_parser_context_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_parser_context_add_sort : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_parser_context_add_decl : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_parser_context_from_string : (ptr<?>,ptr<?>,ptr<byte>) -> ptr<?>
  extern Z3_get_error_code : (ptr<?>) -> int
  extern Z3_set_error_handler : (ptr<?>,ptr<( (ptr<?>,int) -> int )>) -> int  ;  void
  extern Z3_set_error : (ptr<?>,int) -> int  ;  void
  extern Z3_get_error_msg : (ptr<?>,int) -> ptr<byte>
  extern Z3_get_version : (ptr<int>,ptr<int>,ptr<int>,ptr<int>) -> int  ;  void
  extern Z3_get_full_version : () -> ptr<byte>
  extern Z3_enable_trace : (ptr<byte>) -> int  ;  void
  extern Z3_disable_trace : (ptr<byte>) -> int  ;  void
  extern Z3_reset_memory : () -> int  ;  void
  extern Z3_finalize_memory : () -> int  ;  void
  extern Z3_mk_goal : (ptr<?>,byte,byte,byte) -> ptr<?>
  extern Z3_goal_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_goal_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_goal_precision : (ptr<?>,ptr<?>) -> int
  extern Z3_goal_assert : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_goal_inconsistent : (ptr<?>,ptr<?>) -> byte
  extern Z3_goal_depth : (ptr<?>,ptr<?>) -> int
  extern Z3_goal_reset : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_goal_size : (ptr<?>,ptr<?>) -> int
  extern Z3_goal_formula : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_goal_num_exprs : (ptr<?>,ptr<?>) -> int
  extern Z3_goal_is_decided_sat : (ptr<?>,ptr<?>) -> byte
  extern Z3_goal_is_decided_unsat : (ptr<?>,ptr<?>) -> byte
  extern Z3_goal_translate : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_goal_convert_model : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_goal_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_goal_to_dimacs_string : (ptr<?>,ptr<?>,byte) -> ptr<byte>
  extern Z3_mk_tactic : (ptr<?>,ptr<byte>) -> ptr<?>
  extern Z3_tactic_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_tactic_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_mk_probe : (ptr<?>,ptr<byte>) -> ptr<?>
  extern Z3_probe_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_probe_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_tactic_and_then : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_tactic_or_else : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_tactic_par_or : (ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_tactic_par_and_then : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_tactic_try_for : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_tactic_when : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_tactic_cond : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_tactic_repeat : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_tactic_skip : (ptr<?>) -> ptr<?>
  extern Z3_tactic_fail : (ptr<?>) -> ptr<?>
  extern Z3_tactic_fail_if : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_tactic_fail_if_not_decided : (ptr<?>) -> ptr<?>
  extern Z3_tactic_using_params : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_probe_const : (ptr<?>,double) -> ptr<?>
  extern Z3_probe_lt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_probe_gt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_probe_le : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_probe_ge : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_probe_eq : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_probe_and : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_probe_or : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_probe_not : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_get_num_tactics : (ptr<?>) -> int
  extern Z3_get_tactic_name : (ptr<?>,int) -> ptr<byte>
  extern Z3_get_num_probes : (ptr<?>) -> int
  extern Z3_get_probe_name : (ptr<?>,int) -> ptr<byte>
  extern Z3_tactic_get_help : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_tactic_get_param_descrs : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_tactic_get_descr : (ptr<?>,ptr<byte>) -> ptr<byte>
  extern Z3_probe_get_descr : (ptr<?>,ptr<byte>) -> ptr<byte>
  extern Z3_probe_apply : (ptr<?>,ptr<?>,ptr<?>) -> double
  extern Z3_tactic_apply : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_tactic_apply_ex : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_apply_result_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_apply_result_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_apply_result_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_apply_result_get_num_subgoals : (ptr<?>,ptr<?>) -> int
  extern Z3_apply_result_get_subgoal : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_mk_solver : (ptr<?>) -> ptr<?>
  extern Z3_mk_simple_solver : (ptr<?>) -> ptr<?>
  extern Z3_mk_solver_for_logic : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_solver_from_tactic : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_translate : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_import_model_converter : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_get_help : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_solver_get_param_descrs : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_set_params : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_interrupt : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_push : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_pop : (ptr<?>,ptr<?>,int) -> int  ;  void
  extern Z3_solver_reset : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_get_num_scopes : (ptr<?>,ptr<?>) -> int
  extern Z3_solver_assert : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_assert_and_track : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_from_file : (ptr<?>,ptr<?>,ptr<byte>) -> int  ;  void
  extern Z3_solver_from_string : (ptr<?>,ptr<?>,ptr<byte>) -> int  ;  void
  extern Z3_solver_get_assertions : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_get_units : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_get_trail : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_get_non_units : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_get_levels : (ptr<?>,ptr<?>,ptr<?>,int,ptr<int>) -> int  ;  void
  extern Z3_solver_propagate_init : (ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>) -> int )>,ptr<( (ptr<?>,ptr<?>,int) -> int )>,ptr<( (ptr<?>,ptr<?>) -> ptr<?> )>) -> int  ;  void
  extern Z3_solver_propagate_fixed : (ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern Z3_solver_propagate_final : (ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern Z3_solver_propagate_eq : (ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern Z3_solver_propagate_diseq : (ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern Z3_solver_propagate_created : (ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int  ;  void
  extern Z3_solver_propagate_decide : (ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )>) -> int  ;  void
  extern Z3_solver_next_split : (ptr<?>,ptr<?>,ptr<?>,int,int) -> int  ;  void
  extern Z3_solver_propagate_declare : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_solver_propagate_register : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_propagate_register_cb : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_solver_propagate_consequence : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> int  ;  void
  extern Z3_solver_check : (ptr<?>,ptr<?>) -> int
  extern Z3_solver_check_assumptions : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> int
  extern Z3_get_implied_equalities : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<int>) -> int
  extern Z3_solver_get_consequences : (ptr<?>,ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int
  extern Z3_solver_cube : (ptr<?>,ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_solver_get_model : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_get_proof : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_get_unsat_core : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_get_reason_unknown : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_solver_get_statistics : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_solver_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_solver_to_dimacs_string : (ptr<?>,ptr<?>,byte) -> ptr<byte>
  extern Z3_stats_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_stats_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_stats_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_stats_size : (ptr<?>,ptr<?>) -> int
  extern Z3_stats_get_key : (ptr<?>,ptr<?>,int) -> ptr<byte>
  extern Z3_stats_is_uint : (ptr<?>,ptr<?>,int) -> byte
  extern Z3_stats_is_double : (ptr<?>,ptr<?>,int) -> byte
  extern Z3_stats_get_uint_value : (ptr<?>,ptr<?>,int) -> int
  extern Z3_stats_get_double_value : (ptr<?>,ptr<?>,int) -> double
  extern Z3_get_estimated_alloc_size : () -> long
  extern Z3_mk_ast_vector : (ptr<?>) -> ptr<?>
  extern Z3_ast_vector_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_ast_vector_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_ast_vector_size : (ptr<?>,ptr<?>) -> int
  extern Z3_ast_vector_get : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_ast_vector_set : (ptr<?>,ptr<?>,int,ptr<?>) -> int  ;  void
  extern Z3_ast_vector_resize : (ptr<?>,ptr<?>,int) -> int  ;  void
  extern Z3_ast_vector_push : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_ast_vector_translate : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_ast_vector_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_mk_ast_map : (ptr<?>) -> ptr<?>
  extern Z3_ast_map_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_ast_map_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_ast_map_contains : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_ast_map_find : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_ast_map_insert : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_ast_map_erase : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_ast_map_reset : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_ast_map_size : (ptr<?>,ptr<?>) -> int
  extern Z3_ast_map_keys : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_ast_map_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_algebraic_is_value : (ptr<?>,ptr<?>) -> byte
  extern Z3_algebraic_is_pos : (ptr<?>,ptr<?>) -> byte
  extern Z3_algebraic_is_neg : (ptr<?>,ptr<?>) -> byte
  extern Z3_algebraic_is_zero : (ptr<?>,ptr<?>) -> byte
  extern Z3_algebraic_sign : (ptr<?>,ptr<?>) -> int
  extern Z3_algebraic_add : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_algebraic_sub : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_algebraic_mul : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_algebraic_div : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_algebraic_root : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_algebraic_power : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_algebraic_lt : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_algebraic_gt : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_algebraic_le : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_algebraic_ge : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_algebraic_eq : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_algebraic_neq : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_algebraic_roots : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>
  extern Z3_algebraic_eval : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> int
  extern Z3_algebraic_get_poly : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_algebraic_get_i : (ptr<?>,ptr<?>) -> int
  extern Z3_polynomial_subresultants : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_rcf_del : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_rcf_mk_rational : (ptr<?>,ptr<byte>) -> ptr<?>
  extern Z3_rcf_mk_small_int : (ptr<?>,int) -> ptr<?>
  extern Z3_rcf_mk_pi : (ptr<?>) -> ptr<?>
  extern Z3_rcf_mk_e : (ptr<?>) -> ptr<?>
  extern Z3_rcf_mk_infinitesimal : (ptr<?>) -> ptr<?>
  extern Z3_rcf_mk_roots : (ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> int
  extern Z3_rcf_add : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_rcf_sub : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_rcf_mul : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_rcf_div : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_rcf_neg : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_rcf_inv : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_rcf_power : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_rcf_lt : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_rcf_gt : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_rcf_le : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_rcf_ge : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_rcf_eq : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_rcf_neq : (ptr<?>,ptr<?>,ptr<?>) -> byte
  extern Z3_rcf_num_to_string : (ptr<?>,ptr<?>,byte,byte) -> ptr<byte>
  extern Z3_rcf_num_to_decimal_string : (ptr<?>,ptr<?>,int) -> ptr<byte>
  extern Z3_rcf_get_numerator_denominator : (ptr<?>,ptr<?>,ptr<ptr<?>>,ptr<ptr<?>>) -> int  ;  void
  extern Z3_mk_fixedpoint : (ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_fixedpoint_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_fixedpoint_add_rule : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_fixedpoint_add_fact : (ptr<?>,ptr<?>,ptr<?>,int,ptr<int>) -> int  ;  void
  extern Z3_fixedpoint_assert : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_fixedpoint_query : (ptr<?>,ptr<?>,ptr<?>) -> int
  extern Z3_fixedpoint_query_relations : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> int
  extern Z3_fixedpoint_get_answer : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_get_reason_unknown : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_fixedpoint_update_rule : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_fixedpoint_get_num_levels : (ptr<?>,ptr<?>,ptr<?>) -> int
  extern Z3_fixedpoint_get_cover_delta : (ptr<?>,ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_add_cover : (ptr<?>,ptr<?>,int,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_fixedpoint_get_statistics : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_register_relation : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_fixedpoint_set_predicate_representation : (ptr<?>,ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> int  ;  void
  extern Z3_fixedpoint_get_rules : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_get_assertions : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_set_params : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_fixedpoint_get_help : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_fixedpoint_get_param_descrs : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_to_string : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<byte>
  extern Z3_fixedpoint_from_string : (ptr<?>,ptr<?>,ptr<byte>) -> ptr<?>
  extern Z3_fixedpoint_from_file : (ptr<?>,ptr<?>,ptr<byte>) -> ptr<?>
  extern Z3_fixedpoint_init : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_fixedpoint_set_reduce_assign_callback : (ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,int,ptr<ptr<?>>,int,ptr<ptr<?>>) -> int )>) -> int  ;  void
  extern Z3_fixedpoint_set_reduce_app_callback : (ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> int )>) -> int  ;  void
  extern Z3_fixedpoint_add_callback : (ptr<?>,ptr<?>,ptr<?>,ptr<ptr<( (ptr<?>,ptr<?>,int) -> int )>>,ptr<ptr<( (ptr<?>) -> int )>>,ptr<ptr<( (ptr<?>) -> int )>>) -> int  ;  void
  extern Z3_fixedpoint_add_constraint : (ptr<?>,ptr<?>,ptr<?>,int) -> int  ;  void
  extern Z3_mk_optimize : (ptr<?>) -> ptr<?>
  extern Z3_optimize_inc_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_optimize_dec_ref : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_optimize_assert : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_optimize_assert_and_track : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_optimize_assert_soft : (ptr<?>,ptr<?>,ptr<?>,ptr<byte>,ptr<?>) -> int
  extern Z3_optimize_maximize : (ptr<?>,ptr<?>,ptr<?>) -> int
  extern Z3_optimize_minimize : (ptr<?>,ptr<?>,ptr<?>) -> int
  extern Z3_optimize_push : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_optimize_pop : (ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_optimize_check : (ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> int
  extern Z3_optimize_get_reason_unknown : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_optimize_get_model : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_optimize_get_unsat_core : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_optimize_set_params : (ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_optimize_get_param_descrs : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_optimize_get_lower : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_optimize_get_upper : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_optimize_get_lower_as_vector : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_optimize_get_upper_as_vector : (ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_optimize_to_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_optimize_from_string : (ptr<?>,ptr<?>,ptr<byte>) -> int  ;  void
  extern Z3_optimize_from_file : (ptr<?>,ptr<?>,ptr<byte>) -> int  ;  void
  extern Z3_optimize_get_help : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_optimize_get_statistics : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_optimize_get_assertions : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_optimize_get_objectives : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_optimize_register_model_eh : (ptr<?>,ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int  ;  void
  extern Z3_mk_fpa_rounding_mode_sort : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_round_nearest_ties_to_even : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_rne : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_round_nearest_ties_to_away : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_rna : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_round_toward_positive : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_rtp : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_round_toward_negative : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_rtn : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_round_toward_zero : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_rtz : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_sort : (ptr<?>,int,int) -> ptr<?>
  extern Z3_mk_fpa_sort_half : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_sort_16 : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_sort_single : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_sort_32 : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_sort_double : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_sort_64 : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_sort_quadruple : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_sort_128 : (ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_nan : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_inf : (ptr<?>,ptr<?>,byte) -> ptr<?>
  extern Z3_mk_fpa_zero : (ptr<?>,ptr<?>,byte) -> ptr<?>
  extern Z3_mk_fpa_fp : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_numeral_float : (ptr<?>,float,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_numeral_double : (ptr<?>,double,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_numeral_int : (ptr<?>,int,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_numeral_int_uint : (ptr<?>,byte,int,int,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_numeral_int64_uint64 : (ptr<?>,byte,long,long,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_abs : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_neg : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_add : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_sub : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_mul : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_div : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_fma : (ptr<?>,ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_sqrt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_rem : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_round_to_integral : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_min : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_max : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_leq : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_lt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_geq : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_gt : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_eq : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_is_normal : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_is_subnormal : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_is_zero : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_is_infinite : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_is_nan : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_is_negative : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_is_positive : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_to_fp_bv : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_to_fp_float : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_to_fp_real : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_to_fp_signed : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_to_fp_unsigned : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_to_ubv : (ptr<?>,ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_mk_fpa_to_sbv : (ptr<?>,ptr<?>,ptr<?>,int) -> ptr<?>
  extern Z3_mk_fpa_to_real : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fpa_get_ebits : (ptr<?>,ptr<?>) -> int
  extern Z3_fpa_get_sbits : (ptr<?>,ptr<?>) -> int
  extern Z3_fpa_is_numeral_nan : (ptr<?>,ptr<?>) -> byte
  extern Z3_fpa_is_numeral_inf : (ptr<?>,ptr<?>) -> byte
  extern Z3_fpa_is_numeral_zero : (ptr<?>,ptr<?>) -> byte
  extern Z3_fpa_is_numeral_normal : (ptr<?>,ptr<?>) -> byte
  extern Z3_fpa_is_numeral_subnormal : (ptr<?>,ptr<?>) -> byte
  extern Z3_fpa_is_numeral_positive : (ptr<?>,ptr<?>) -> byte
  extern Z3_fpa_is_numeral_negative : (ptr<?>,ptr<?>) -> byte
  extern Z3_fpa_get_numeral_sign_bv : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fpa_get_numeral_significand_bv : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fpa_get_numeral_sign : (ptr<?>,ptr<?>,ptr<int>) -> byte
  extern Z3_fpa_get_numeral_significand_string : (ptr<?>,ptr<?>) -> ptr<byte>
  extern Z3_fpa_get_numeral_significand_uint64 : (ptr<?>,ptr<?>,ptr<long>) -> byte
  extern Z3_fpa_get_numeral_exponent_string : (ptr<?>,ptr<?>,byte) -> ptr<byte>
  extern Z3_fpa_get_numeral_exponent_int64 : (ptr<?>,ptr<?>,ptr<long>,byte) -> byte
  extern Z3_fpa_get_numeral_exponent_bv : (ptr<?>,ptr<?>,byte) -> ptr<?>
  extern Z3_mk_fpa_to_ieee_bv : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_mk_fpa_to_fp_int_real : (ptr<?>,ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_query_from_lvl : (ptr<?>,ptr<?>,ptr<?>,int) -> int
  extern Z3_fixedpoint_get_ground_sat_answer : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_get_rules_along_trace : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_get_rule_names_along_trace : (ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_fixedpoint_add_invariant : (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int  ;  void
  extern Z3_fixedpoint_get_reachable : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_qe_model_project : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>
  extern Z3_qe_model_project_skolem : (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_model_extrapolate : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  extern Z3_qe_lite : (ptr<?>,ptr<?>,ptr<?>) -> ptr<?>
  public lostanza defn w_Z3_global_param_set (param_id:ptr<byte>, param_value:ptr<byte>) -> ref<False> :
    call-c Z3_global_param_set(param_id, param_value)
    return false
  public lostanza defn w_Z3_global_param_reset_all () -> ref<False> :
    call-c Z3_global_param_reset_all()
    return false
  public lostanza defn w_Z3_global_param_get (param_id:ptr<byte>, param_value:ptr<ptr<byte>>) -> byte :
    val ret = call-c Z3_global_param_get(param_id, param_value)
    return ret
  public lostanza defn w_Z3_mk_config () -> ptr<?> :
    val ret = call-c Z3_mk_config()
    return ret
  public lostanza defn w_Z3_del_config (c:ptr<?>) -> ref<False> :
    call-c Z3_del_config(c)
    return false
  public lostanza defn w_Z3_set_param_value (c:ptr<?>, param_id:ptr<byte>, param_value:ptr<byte>) -> ref<False> :
    call-c Z3_set_param_value(c, param_id, param_value)
    return false
  public lostanza defn w_Z3_mk_context (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_context(c)
    return ret
  public lostanza defn w_Z3_mk_context_rc (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_context_rc(c)
    return ret
  public lostanza defn w_Z3_del_context (c:ptr<?>) -> ref<False> :
    call-c Z3_del_context(c)
    return false
  public lostanza defn w_Z3_inc_ref (c:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c Z3_inc_ref(c, a)
    return false
  public lostanza defn w_Z3_dec_ref (c:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c Z3_dec_ref(c, a)
    return false
  public lostanza defn w_Z3_update_param_value (c:ptr<?>, param_id:ptr<byte>, param_value:ptr<byte>) -> ref<False> :
    call-c Z3_update_param_value(c, param_id, param_value)
    return false
  public lostanza defn w_Z3_get_global_param_descrs (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_global_param_descrs(c)
    return ret
  public lostanza defn w_Z3_interrupt (c:ptr<?>) -> ref<False> :
    call-c Z3_interrupt(c)
    return false
  public lostanza defn w_Z3_enable_concurrent_dec_ref (c:ptr<?>) -> ref<False> :
    call-c Z3_enable_concurrent_dec_ref(c)
    return false
  public lostanza defn w_Z3_mk_params (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_params(c)
    return ret
  public lostanza defn w_Z3_params_inc_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c Z3_params_inc_ref(c, p)
    return false
  public lostanza defn w_Z3_params_dec_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c Z3_params_dec_ref(c, p)
    return false
  public lostanza defn w_Z3_params_set_bool (c:ptr<?>, p:ptr<?>, k:ptr<?>, v:byte) -> ref<False> :
    call-c Z3_params_set_bool(c, p, k, v)
    return false
  public lostanza defn w_Z3_params_set_uint (c:ptr<?>, p:ptr<?>, k:ptr<?>, v:int) -> ref<False> :
    call-c Z3_params_set_uint(c, p, k, v)
    return false
  public lostanza defn w_Z3_params_set_double (c:ptr<?>, p:ptr<?>, k:ptr<?>, v:double) -> ref<False> :
    call-c Z3_params_set_double(c, p, k, v)
    return false
  public lostanza defn w_Z3_params_set_symbol (c:ptr<?>, p:ptr<?>, k:ptr<?>, v:ptr<?>) -> ref<False> :
    call-c Z3_params_set_symbol(c, p, k, v)
    return false
  public lostanza defn w_Z3_params_to_string (c:ptr<?>, p:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_params_to_string(c, p)
    return ret
  public lostanza defn w_Z3_params_validate (c:ptr<?>, p:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c Z3_params_validate(c, p, d)
    return false
  public lostanza defn w_Z3_param_descrs_inc_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c Z3_param_descrs_inc_ref(c, p)
    return false
  public lostanza defn w_Z3_param_descrs_dec_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c Z3_param_descrs_dec_ref(c, p)
    return false
  public lostanza defn w_Z3_param_descrs_get_kind (c:ptr<?>, p:ptr<?>, n:ptr<?>) -> int :
    val ret = call-c Z3_param_descrs_get_kind(c, p, n)
    return ret
  public lostanza defn w_Z3_param_descrs_size (c:ptr<?>, p:ptr<?>) -> int :
    val ret = call-c Z3_param_descrs_size(c, p)
    return ret
  public lostanza defn w_Z3_param_descrs_get_name (c:ptr<?>, p:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_param_descrs_get_name(c, p, i)
    return ret
  public lostanza defn w_Z3_param_descrs_get_documentation (c:ptr<?>, p:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_param_descrs_get_documentation(c, p, s)
    return ret
  public lostanza defn w_Z3_param_descrs_to_string (c:ptr<?>, p:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_param_descrs_to_string(c, p)
    return ret
  public lostanza defn w_Z3_mk_int_symbol (c:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_mk_int_symbol(c, i)
    return ret
  public lostanza defn w_Z3_mk_string_symbol (c:ptr<?>, s:ptr<byte>) -> ptr<?> :
    val ret = call-c Z3_mk_string_symbol(c, s)
    return ret
  public lostanza defn w_Z3_mk_uninterpreted_sort (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_uninterpreted_sort(c, s)
    return ret
  public lostanza defn w_Z3_mk_bool_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bool_sort(c)
    return ret
  public lostanza defn w_Z3_mk_int_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_int_sort(c)
    return ret
  public lostanza defn w_Z3_mk_real_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_real_sort(c)
    return ret
  public lostanza defn w_Z3_mk_bv_sort (c:ptr<?>, sz:int) -> ptr<?> :
    val ret = call-c Z3_mk_bv_sort(c, sz)
    return ret
  public lostanza defn w_Z3_mk_finite_domain_sort (c:ptr<?>, name:ptr<?>, size:long) -> ptr<?> :
    val ret = call-c Z3_mk_finite_domain_sort(c, name, size)
    return ret
  public lostanza defn w_Z3_mk_array_sort (c:ptr<?>, domain:ptr<?>, range:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_array_sort(c, domain, range)
    return ret
  public lostanza defn w_Z3_mk_array_sort_n (c:ptr<?>, n:int, domain:ptr<ptr<?>>, range:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_array_sort_n(c, n, domain, range)
    return ret
  public lostanza defn w_Z3_mk_tuple_sort (c:ptr<?>, mk_tuple_name:ptr<?>, num_fields:int, field_names:ptr<ptr<?>>, field_sorts:ptr<ptr<?>>, mk_tuple_decl:ptr<ptr<?>>, proj_decl:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_tuple_sort(c, mk_tuple_name, num_fields, field_names, field_sorts, mk_tuple_decl, proj_decl)
    return ret
  public lostanza defn w_Z3_mk_enumeration_sort (c:ptr<?>, name:ptr<?>, n:int, enum_names:ptr<ptr<?>>, enum_consts:ptr<ptr<?>>, enum_testers:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_enumeration_sort(c, name, n, enum_names, enum_consts, enum_testers)
    return ret
  public lostanza defn w_Z3_mk_list_sort (c:ptr<?>, name:ptr<?>, elem_sort:ptr<?>, nil_decl:ptr<ptr<?>>, is_nil_decl:ptr<ptr<?>>, cons_decl:ptr<ptr<?>>, is_cons_decl:ptr<ptr<?>>, head_decl:ptr<ptr<?>>, tail_decl:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_list_sort(c, name, elem_sort, nil_decl, is_nil_decl, cons_decl, is_cons_decl, head_decl, tail_decl)
    return ret
  public lostanza defn w_Z3_mk_constructor (c:ptr<?>, name:ptr<?>, recognizer:ptr<?>, num_fields:int, field_names:ptr<ptr<?>>, sorts:ptr<ptr<?>>, sort_refs:ptr<int>) -> ptr<?> :
    val ret = call-c Z3_mk_constructor(c, name, recognizer, num_fields, field_names, sorts, sort_refs)
    return ret
  public lostanza defn w_Z3_del_constructor (c:ptr<?>, constr:ptr<?>) -> ref<False> :
    call-c Z3_del_constructor(c, constr)
    return false
  public lostanza defn w_Z3_mk_datatype (c:ptr<?>, name:ptr<?>, num_constructors:int, constructors:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_datatype(c, name, num_constructors, constructors)
    return ret
  public lostanza defn w_Z3_mk_datatype_sort (c:ptr<?>, name:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_datatype_sort(c, name)
    return ret
  public lostanza defn w_Z3_mk_constructor_list (c:ptr<?>, num_constructors:int, constructors:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_constructor_list(c, num_constructors, constructors)
    return ret
  public lostanza defn w_Z3_del_constructor_list (c:ptr<?>, clist:ptr<?>) -> ref<False> :
    call-c Z3_del_constructor_list(c, clist)
    return false
  public lostanza defn w_Z3_mk_datatypes (c:ptr<?>, num_sorts:int, sort_names:ptr<ptr<?>>, sorts:ptr<ptr<?>>, constructor_lists:ptr<ptr<?>>) -> ref<False> :
    call-c Z3_mk_datatypes(c, num_sorts, sort_names, sorts, constructor_lists)
    return false
  public lostanza defn w_Z3_query_constructor (c:ptr<?>, constr:ptr<?>, num_fields:int, constructor:ptr<ptr<?>>, tester:ptr<ptr<?>>, accessors:ptr<ptr<?>>) -> ref<False> :
    call-c Z3_query_constructor(c, constr, num_fields, constructor, tester, accessors)
    return false
  public lostanza defn w_Z3_mk_func_decl (c:ptr<?>, s:ptr<?>, domain_size:int, domain:ptr<ptr<?>>, range:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_func_decl(c, s, domain_size, domain, range)
    return ret
  public lostanza defn w_Z3_mk_app (c:ptr<?>, d:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_app(c, d, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_const (c:ptr<?>, s:ptr<?>, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_const(c, s, ty)
    return ret
  public lostanza defn w_Z3_mk_fresh_func_decl (c:ptr<?>, prefix:ptr<byte>, domain_size:int, domain:ptr<ptr<?>>, range:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fresh_func_decl(c, prefix, domain_size, domain, range)
    return ret
  public lostanza defn w_Z3_mk_fresh_const (c:ptr<?>, prefix:ptr<byte>, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fresh_const(c, prefix, ty)
    return ret
  public lostanza defn w_Z3_mk_rec_func_decl (c:ptr<?>, s:ptr<?>, domain_size:int, domain:ptr<ptr<?>>, range:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_rec_func_decl(c, s, domain_size, domain, range)
    return ret
  public lostanza defn w_Z3_add_rec_def (c:ptr<?>, f:ptr<?>, n:int, args:ptr<ptr<?>>, body:ptr<?>) -> ref<False> :
    call-c Z3_add_rec_def(c, f, n, args, body)
    return false
  public lostanza defn w_Z3_mk_true (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_true(c)
    return ret
  public lostanza defn w_Z3_mk_false (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_false(c)
    return ret
  public lostanza defn w_Z3_mk_eq (c:ptr<?>, l:ptr<?>, r:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_eq(c, l, r)
    return ret
  public lostanza defn w_Z3_mk_distinct (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_distinct(c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_not (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_not(c, a)
    return ret
  public lostanza defn w_Z3_mk_ite (c:ptr<?>, t1:ptr<?>, t2:ptr<?>, t3:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_ite(c, t1, t2, t3)
    return ret
  public lostanza defn w_Z3_mk_iff (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_iff(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_implies (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_implies(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_xor (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_xor(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_and (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_and(c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_or (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_or(c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_add (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_add(c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_mul (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_mul(c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_sub (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_sub(c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_unary_minus (c:ptr<?>, arg:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_unary_minus(c, arg)
    return ret
  public lostanza defn w_Z3_mk_div (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_div(c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_mod (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_mod(c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_rem (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_rem(c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_power (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_power(c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_lt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_lt(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_le (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_le(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_gt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_gt(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_ge (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_ge(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_divides (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_divides(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_int2real (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_int2real(c, t1)
    return ret
  public lostanza defn w_Z3_mk_real2int (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_real2int(c, t1)
    return ret
  public lostanza defn w_Z3_mk_is_int (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_is_int(c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvnot (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvnot(c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvredand (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvredand(c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvredor (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvredor(c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvand (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvand(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvor (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvor(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvxor (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvxor(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvnand (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvnand(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvnor (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvnor(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvxnor (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvxnor(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvneg (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvneg(c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvadd (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvadd(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsub (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvsub(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvmul (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvmul(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvudiv (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvudiv(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsdiv (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvsdiv(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvurem (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvurem(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsrem (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvsrem(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsmod (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvsmod(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvult (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvult(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvslt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvslt(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvule (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvule(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsle (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvsle(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvuge (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvuge(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsge (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvsge(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvugt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvugt(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsgt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvsgt(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_concat (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_concat(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_extract (c:ptr<?>, high:int, low:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_extract(c, high, low, t1)
    return ret
  public lostanza defn w_Z3_mk_sign_ext (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_sign_ext(c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_zero_ext (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_zero_ext(c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_repeat (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_repeat(c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_bit2bool (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bit2bool(c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_bvshl (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvshl(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvlshr (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvlshr(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvashr (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvashr(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_rotate_left (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_rotate_left(c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_rotate_right (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_rotate_right(c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_ext_rotate_left (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_ext_rotate_left(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_ext_rotate_right (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_ext_rotate_right(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_int2bv (c:ptr<?>, n:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_int2bv(c, n, t1)
    return ret
  public lostanza defn w_Z3_mk_bv2int (c:ptr<?>, t1:ptr<?>, is_signed:byte) -> ptr<?> :
    val ret = call-c Z3_mk_bv2int(c, t1, is_signed)
    return ret
  public lostanza defn w_Z3_mk_bvadd_no_overflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>, is_signed:byte) -> ptr<?> :
    val ret = call-c Z3_mk_bvadd_no_overflow(c, t1, t2, is_signed)
    return ret
  public lostanza defn w_Z3_mk_bvadd_no_underflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvadd_no_underflow(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsub_no_overflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvsub_no_overflow(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsub_no_underflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>, is_signed:byte) -> ptr<?> :
    val ret = call-c Z3_mk_bvsub_no_underflow(c, t1, t2, is_signed)
    return ret
  public lostanza defn w_Z3_mk_bvsdiv_no_overflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvsdiv_no_overflow(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvneg_no_overflow (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvneg_no_overflow(c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvmul_no_overflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>, is_signed:byte) -> ptr<?> :
    val ret = call-c Z3_mk_bvmul_no_overflow(c, t1, t2, is_signed)
    return ret
  public lostanza defn w_Z3_mk_bvmul_no_underflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bvmul_no_underflow(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_select (c:ptr<?>, a:ptr<?>, i:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_select(c, a, i)
    return ret
  public lostanza defn w_Z3_mk_select_n (c:ptr<?>, a:ptr<?>, n:int, idxs:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_select_n(c, a, n, idxs)
    return ret
  public lostanza defn w_Z3_mk_store (c:ptr<?>, a:ptr<?>, i:ptr<?>, v:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_store(c, a, i, v)
    return ret
  public lostanza defn w_Z3_mk_store_n (c:ptr<?>, a:ptr<?>, n:int, idxs:ptr<ptr<?>>, v:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_store_n(c, a, n, idxs, v)
    return ret
  public lostanza defn w_Z3_mk_const_array (c:ptr<?>, domain:ptr<?>, v:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_const_array(c, domain, v)
    return ret
  public lostanza defn w_Z3_mk_map (c:ptr<?>, f:ptr<?>, n:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_map(c, f, n, args)
    return ret
  public lostanza defn w_Z3_mk_array_default (c:ptr<?>, array:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_array_default(c, array)
    return ret
  public lostanza defn w_Z3_mk_as_array (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_as_array(c, f)
    return ret
  public lostanza defn w_Z3_mk_set_has_size (c:ptr<?>, set:ptr<?>, k:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_set_has_size(c, set, k)
    return ret
  public lostanza defn w_Z3_mk_set_sort (c:ptr<?>, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_set_sort(c, ty)
    return ret
  public lostanza defn w_Z3_mk_empty_set (c:ptr<?>, domain:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_empty_set(c, domain)
    return ret
  public lostanza defn w_Z3_mk_full_set (c:ptr<?>, domain:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_full_set(c, domain)
    return ret
  public lostanza defn w_Z3_mk_set_add (c:ptr<?>, set:ptr<?>, elem:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_set_add(c, set, elem)
    return ret
  public lostanza defn w_Z3_mk_set_del (c:ptr<?>, set:ptr<?>, elem:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_set_del(c, set, elem)
    return ret
  public lostanza defn w_Z3_mk_set_union (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_set_union(c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_set_intersect (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_set_intersect(c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_set_difference (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_set_difference(c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_set_complement (c:ptr<?>, arg:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_set_complement(c, arg)
    return ret
  public lostanza defn w_Z3_mk_set_member (c:ptr<?>, elem:ptr<?>, set:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_set_member(c, elem, set)
    return ret
  public lostanza defn w_Z3_mk_set_subset (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_set_subset(c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_array_ext (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_array_ext(c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_numeral (c:ptr<?>, numeral:ptr<byte>, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_numeral(c, numeral, ty)
    return ret
  public lostanza defn w_Z3_mk_real (c:ptr<?>, num:int, den:int) -> ptr<?> :
    val ret = call-c Z3_mk_real(c, num, den)
    return ret
  public lostanza defn w_Z3_mk_int (c:ptr<?>, v:int, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_int(c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_unsigned_int (c:ptr<?>, v:int, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_unsigned_int(c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_int64 (c:ptr<?>, v:long, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_int64(c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_unsigned_int64 (c:ptr<?>, v:long, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_unsigned_int64(c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_bv_numeral (c:ptr<?>, sz:int, bits:ptr<byte>) -> ptr<?> :
    val ret = call-c Z3_mk_bv_numeral(c, sz, bits)
    return ret
  public lostanza defn w_Z3_mk_seq_sort (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_sort(c, s)
    return ret
  public lostanza defn w_Z3_is_seq_sort (c:ptr<?>, s:ptr<?>) -> byte :
    val ret = call-c Z3_is_seq_sort(c, s)
    return ret
  public lostanza defn w_Z3_get_seq_sort_basis (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_seq_sort_basis(c, s)
    return ret
  public lostanza defn w_Z3_mk_re_sort (c:ptr<?>, seq:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_re_sort(c, seq)
    return ret
  public lostanza defn w_Z3_is_re_sort (c:ptr<?>, s:ptr<?>) -> byte :
    val ret = call-c Z3_is_re_sort(c, s)
    return ret
  public lostanza defn w_Z3_get_re_sort_basis (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_re_sort_basis(c, s)
    return ret
  public lostanza defn w_Z3_mk_string_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_string_sort(c)
    return ret
  public lostanza defn w_Z3_mk_char_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_char_sort(c)
    return ret
  public lostanza defn w_Z3_is_string_sort (c:ptr<?>, s:ptr<?>) -> byte :
    val ret = call-c Z3_is_string_sort(c, s)
    return ret
  public lostanza defn w_Z3_is_char_sort (c:ptr<?>, s:ptr<?>) -> byte :
    val ret = call-c Z3_is_char_sort(c, s)
    return ret
  public lostanza defn w_Z3_mk_string (c:ptr<?>, s:ptr<byte>) -> ptr<?> :
    val ret = call-c Z3_mk_string(c, s)
    return ret
  public lostanza defn w_Z3_mk_lstring (c:ptr<?>, len:int, s:ptr<byte>) -> ptr<?> :
    val ret = call-c Z3_mk_lstring(c, len, s)
    return ret
  public lostanza defn w_Z3_mk_u32string (c:ptr<?>, len:int, chars:ptr<int>) -> ptr<?> :
    val ret = call-c Z3_mk_u32string(c, len, chars)
    return ret
  public lostanza defn w_Z3_is_string (c:ptr<?>, s:ptr<?>) -> byte :
    val ret = call-c Z3_is_string(c, s)
    return ret
  public lostanza defn w_Z3_get_string (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_get_string(c, s)
    return ret
  public lostanza defn w_Z3_get_lstring (c:ptr<?>, s:ptr<?>, length:ptr<int>) -> ptr<byte> :
    val ret = call-c Z3_get_lstring(c, s, length)
    return ret
  public lostanza defn w_Z3_get_string_length (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c Z3_get_string_length(c, s)
    return ret
  public lostanza defn w_Z3_get_string_contents (c:ptr<?>, s:ptr<?>, length:int, contents:ptr<int>) -> ref<False> :
    call-c Z3_get_string_contents(c, s, length, contents)
    return false
  public lostanza defn w_Z3_mk_seq_empty (c:ptr<?>, seq:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_empty(c, seq)
    return ret
  public lostanza defn w_Z3_mk_seq_unit (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_unit(c, a)
    return ret
  public lostanza defn w_Z3_mk_seq_concat (c:ptr<?>, n:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_concat(c, n, args)
    return ret
  public lostanza defn w_Z3_mk_seq_prefix (c:ptr<?>, prefix:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_prefix(c, prefix, s)
    return ret
  public lostanza defn w_Z3_mk_seq_suffix (c:ptr<?>, suffix:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_suffix(c, suffix, s)
    return ret
  public lostanza defn w_Z3_mk_seq_contains (c:ptr<?>, container:ptr<?>, containee:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_contains(c, container, containee)
    return ret
  public lostanza defn w_Z3_mk_str_lt (c:ptr<?>, prefix:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_str_lt(c, prefix, s)
    return ret
  public lostanza defn w_Z3_mk_str_le (c:ptr<?>, prefix:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_str_le(c, prefix, s)
    return ret
  public lostanza defn w_Z3_mk_seq_extract (c:ptr<?>, s:ptr<?>, offset:ptr<?>, length:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_extract(c, s, offset, length)
    return ret
  public lostanza defn w_Z3_mk_seq_replace (c:ptr<?>, s:ptr<?>, src:ptr<?>, dst:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_replace(c, s, src, dst)
    return ret
  public lostanza defn w_Z3_mk_seq_at (c:ptr<?>, s:ptr<?>, index:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_at(c, s, index)
    return ret
  public lostanza defn w_Z3_mk_seq_nth (c:ptr<?>, s:ptr<?>, index:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_nth(c, s, index)
    return ret
  public lostanza defn w_Z3_mk_seq_length (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_length(c, s)
    return ret
  public lostanza defn w_Z3_mk_seq_index (c:ptr<?>, s:ptr<?>, substr:ptr<?>, offset:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_index(c, s, substr, offset)
    return ret
  public lostanza defn w_Z3_mk_seq_last_index (c:ptr<?>, missing_name_v:ptr<?>, substr:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_last_index(c, missing_name_v, substr)
    return ret
  public lostanza defn w_Z3_mk_str_to_int (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_str_to_int(c, s)
    return ret
  public lostanza defn w_Z3_mk_int_to_str (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_int_to_str(c, s)
    return ret
  public lostanza defn w_Z3_mk_string_to_code (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_string_to_code(c, a)
    return ret
  public lostanza defn w_Z3_mk_string_from_code (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_string_from_code(c, a)
    return ret
  public lostanza defn w_Z3_mk_ubv_to_str (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_ubv_to_str(c, s)
    return ret
  public lostanza defn w_Z3_mk_sbv_to_str (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_sbv_to_str(c, s)
    return ret
  public lostanza defn w_Z3_mk_seq_to_re (c:ptr<?>, seq:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_to_re(c, seq)
    return ret
  public lostanza defn w_Z3_mk_seq_in_re (c:ptr<?>, seq:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_seq_in_re(c, seq, re)
    return ret
  public lostanza defn w_Z3_mk_re_plus (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_re_plus(c, re)
    return ret
  public lostanza defn w_Z3_mk_re_star (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_re_star(c, re)
    return ret
  public lostanza defn w_Z3_mk_re_option (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_re_option(c, re)
    return ret
  public lostanza defn w_Z3_mk_re_union (c:ptr<?>, n:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_re_union(c, n, args)
    return ret
  public lostanza defn w_Z3_mk_re_concat (c:ptr<?>, n:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_re_concat(c, n, args)
    return ret
  public lostanza defn w_Z3_mk_re_range (c:ptr<?>, lo:ptr<?>, hi:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_re_range(c, lo, hi)
    return ret
  public lostanza defn w_Z3_mk_re_allchar (c:ptr<?>, regex_sort:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_re_allchar(c, regex_sort)
    return ret
  public lostanza defn w_Z3_mk_re_loop (c:ptr<?>, r:ptr<?>, lo:int, hi:int) -> ptr<?> :
    val ret = call-c Z3_mk_re_loop(c, r, lo, hi)
    return ret
  public lostanza defn w_Z3_mk_re_power (c:ptr<?>, missing_name_v:ptr<?>, n:int) -> ptr<?> :
    val ret = call-c Z3_mk_re_power(c, missing_name_v, n)
    return ret
  public lostanza defn w_Z3_mk_re_intersect (c:ptr<?>, n:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_re_intersect(c, n, args)
    return ret
  public lostanza defn w_Z3_mk_re_complement (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_re_complement(c, re)
    return ret
  public lostanza defn w_Z3_mk_re_diff (c:ptr<?>, re1:ptr<?>, re2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_re_diff(c, re1, re2)
    return ret
  public lostanza defn w_Z3_mk_re_empty (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_re_empty(c, re)
    return ret
  public lostanza defn w_Z3_mk_re_full (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_re_full(c, re)
    return ret
  public lostanza defn w_Z3_mk_char (c:ptr<?>, ch:int) -> ptr<?> :
    val ret = call-c Z3_mk_char(c, ch)
    return ret
  public lostanza defn w_Z3_mk_char_le (c:ptr<?>, ch1:ptr<?>, ch2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_char_le(c, ch1, ch2)
    return ret
  public lostanza defn w_Z3_mk_char_to_int (c:ptr<?>, ch:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_char_to_int(c, ch)
    return ret
  public lostanza defn w_Z3_mk_char_to_bv (c:ptr<?>, ch:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_char_to_bv(c, ch)
    return ret
  public lostanza defn w_Z3_mk_char_from_bv (c:ptr<?>, bv:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_char_from_bv(c, bv)
    return ret
  public lostanza defn w_Z3_mk_char_is_digit (c:ptr<?>, ch:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_char_is_digit(c, ch)
    return ret
  public lostanza defn w_Z3_mk_linear_order (c:ptr<?>, a:ptr<?>, id:int) -> ptr<?> :
    val ret = call-c Z3_mk_linear_order(c, a, id)
    return ret
  public lostanza defn w_Z3_mk_partial_order (c:ptr<?>, a:ptr<?>, id:int) -> ptr<?> :
    val ret = call-c Z3_mk_partial_order(c, a, id)
    return ret
  public lostanza defn w_Z3_mk_piecewise_linear_order (c:ptr<?>, a:ptr<?>, id:int) -> ptr<?> :
    val ret = call-c Z3_mk_piecewise_linear_order(c, a, id)
    return ret
  public lostanza defn w_Z3_mk_tree_order (c:ptr<?>, a:ptr<?>, id:int) -> ptr<?> :
    val ret = call-c Z3_mk_tree_order(c, a, id)
    return ret
  public lostanza defn w_Z3_mk_transitive_closure (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_transitive_closure(c, f)
    return ret
  public lostanza defn w_Z3_mk_pattern (c:ptr<?>, num_patterns:int, terms:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_mk_pattern(c, num_patterns, terms)
    return ret
  public lostanza defn w_Z3_mk_bound (c:ptr<?>, index:int, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_bound(c, index, ty)
    return ret
  public lostanza defn w_Z3_mk_forall (c:ptr<?>, weight:int, num_patterns:int, patterns:ptr<ptr<?>>, num_decls:int, sorts:ptr<ptr<?>>, decl_names:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_forall(c, weight, num_patterns, patterns, num_decls, sorts, decl_names, body)
    return ret
  public lostanza defn w_Z3_mk_exists (c:ptr<?>, weight:int, num_patterns:int, patterns:ptr<ptr<?>>, num_decls:int, sorts:ptr<ptr<?>>, decl_names:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_exists(c, weight, num_patterns, patterns, num_decls, sorts, decl_names, body)
    return ret
  public lostanza defn w_Z3_mk_quantifier (c:ptr<?>, is_forall:byte, weight:int, num_patterns:int, patterns:ptr<ptr<?>>, num_decls:int, sorts:ptr<ptr<?>>, decl_names:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_quantifier(c, is_forall, weight, num_patterns, patterns, num_decls, sorts, decl_names, body)
    return ret
  public lostanza defn w_Z3_mk_quantifier_ex (c:ptr<?>, is_forall:byte, weight:int, quantifier_id:ptr<?>, skolem_id:ptr<?>, num_patterns:int, patterns:ptr<ptr<?>>, num_no_patterns:int, no_patterns:ptr<ptr<?>>, num_decls:int, sorts:ptr<ptr<?>>, decl_names:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_quantifier_ex(c, is_forall, weight, quantifier_id, skolem_id, num_patterns, patterns, num_no_patterns, no_patterns, num_decls, sorts, decl_names, body)
    return ret
  public lostanza defn w_Z3_mk_forall_const (c:ptr<?>, weight:int, num_bound:int, bound:ptr<ptr<?>>, num_patterns:int, patterns:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_forall_const(c, weight, num_bound, bound, num_patterns, patterns, body)
    return ret
  public lostanza defn w_Z3_mk_exists_const (c:ptr<?>, weight:int, num_bound:int, bound:ptr<ptr<?>>, num_patterns:int, patterns:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_exists_const(c, weight, num_bound, bound, num_patterns, patterns, body)
    return ret
  public lostanza defn w_Z3_mk_quantifier_const (c:ptr<?>, is_forall:byte, weight:int, num_bound:int, bound:ptr<ptr<?>>, num_patterns:int, patterns:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_quantifier_const(c, is_forall, weight, num_bound, bound, num_patterns, patterns, body)
    return ret
  public lostanza defn w_Z3_mk_quantifier_const_ex (c:ptr<?>, is_forall:byte, weight:int, quantifier_id:ptr<?>, skolem_id:ptr<?>, num_bound:int, bound:ptr<ptr<?>>, num_patterns:int, patterns:ptr<ptr<?>>, num_no_patterns:int, no_patterns:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_quantifier_const_ex(c, is_forall, weight, quantifier_id, skolem_id, num_bound, bound, num_patterns, patterns, num_no_patterns, no_patterns, body)
    return ret
  public lostanza defn w_Z3_mk_lambda (c:ptr<?>, num_decls:int, sorts:ptr<ptr<?>>, decl_names:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_lambda(c, num_decls, sorts, decl_names, body)
    return ret
  public lostanza defn w_Z3_mk_lambda_const (c:ptr<?>, num_bound:int, bound:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_lambda_const(c, num_bound, bound, body)
    return ret
  public lostanza defn w_Z3_get_symbol_kind (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c Z3_get_symbol_kind(c, s)
    return ret
  public lostanza defn w_Z3_get_symbol_int (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c Z3_get_symbol_int(c, s)
    return ret
  public lostanza defn w_Z3_get_symbol_string (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_get_symbol_string(c, s)
    return ret
  public lostanza defn w_Z3_get_sort_name (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_sort_name(c, d)
    return ret
  public lostanza defn w_Z3_get_sort_id (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c Z3_get_sort_id(c, s)
    return ret
  public lostanza defn w_Z3_sort_to_ast (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_sort_to_ast(c, s)
    return ret
  public lostanza defn w_Z3_is_eq_sort (c:ptr<?>, s1:ptr<?>, s2:ptr<?>) -> byte :
    val ret = call-c Z3_is_eq_sort(c, s1, s2)
    return ret
  public lostanza defn w_Z3_get_sort_kind (c:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c Z3_get_sort_kind(c, t)
    return ret
  public lostanza defn w_Z3_get_bv_sort_size (c:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c Z3_get_bv_sort_size(c, t)
    return ret
  public lostanza defn w_Z3_get_finite_domain_sort_size (c:ptr<?>, s:ptr<?>, r:ptr<long>) -> byte :
    val ret = call-c Z3_get_finite_domain_sort_size(c, s, r)
    return ret
  public lostanza defn w_Z3_get_array_sort_domain (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_array_sort_domain(c, t)
    return ret
  public lostanza defn w_Z3_get_array_sort_domain_n (c:ptr<?>, t:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_get_array_sort_domain_n(c, t, idx)
    return ret
  public lostanza defn w_Z3_get_array_sort_range (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_array_sort_range(c, t)
    return ret
  public lostanza defn w_Z3_get_tuple_sort_mk_decl (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_tuple_sort_mk_decl(c, t)
    return ret
  public lostanza defn w_Z3_get_tuple_sort_num_fields (c:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c Z3_get_tuple_sort_num_fields(c, t)
    return ret
  public lostanza defn w_Z3_get_tuple_sort_field_decl (c:ptr<?>, t:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_get_tuple_sort_field_decl(c, t, i)
    return ret
  public lostanza defn w_Z3_get_datatype_sort_num_constructors (c:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c Z3_get_datatype_sort_num_constructors(c, t)
    return ret
  public lostanza defn w_Z3_get_datatype_sort_constructor (c:ptr<?>, t:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_get_datatype_sort_constructor(c, t, idx)
    return ret
  public lostanza defn w_Z3_get_datatype_sort_recognizer (c:ptr<?>, t:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_get_datatype_sort_recognizer(c, t, idx)
    return ret
  public lostanza defn w_Z3_get_datatype_sort_constructor_accessor (c:ptr<?>, t:ptr<?>, idx_c:int, idx_a:int) -> ptr<?> :
    val ret = call-c Z3_get_datatype_sort_constructor_accessor(c, t, idx_c, idx_a)
    return ret
  public lostanza defn w_Z3_datatype_update_field (c:ptr<?>, field_access:ptr<?>, t:ptr<?>, value:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_datatype_update_field(c, field_access, t, value)
    return ret
  public lostanza defn w_Z3_get_relation_arity (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c Z3_get_relation_arity(c, s)
    return ret
  public lostanza defn w_Z3_get_relation_column (c:ptr<?>, s:ptr<?>, col:int) -> ptr<?> :
    val ret = call-c Z3_get_relation_column(c, s, col)
    return ret
  public lostanza defn w_Z3_mk_atmost (c:ptr<?>, num_args:int, args:ptr<ptr<?>>, k:int) -> ptr<?> :
    val ret = call-c Z3_mk_atmost(c, num_args, args, k)
    return ret
  public lostanza defn w_Z3_mk_atleast (c:ptr<?>, num_args:int, args:ptr<ptr<?>>, k:int) -> ptr<?> :
    val ret = call-c Z3_mk_atleast(c, num_args, args, k)
    return ret
  public lostanza defn w_Z3_mk_pble (c:ptr<?>, num_args:int, args:ptr<ptr<?>>, coeffs:ptr<int>, k:int) -> ptr<?> :
    val ret = call-c Z3_mk_pble(c, num_args, args, coeffs, k)
    return ret
  public lostanza defn w_Z3_mk_pbge (c:ptr<?>, num_args:int, args:ptr<ptr<?>>, coeffs:ptr<int>, k:int) -> ptr<?> :
    val ret = call-c Z3_mk_pbge(c, num_args, args, coeffs, k)
    return ret
  public lostanza defn w_Z3_mk_pbeq (c:ptr<?>, num_args:int, args:ptr<ptr<?>>, coeffs:ptr<int>, k:int) -> ptr<?> :
    val ret = call-c Z3_mk_pbeq(c, num_args, args, coeffs, k)
    return ret
  public lostanza defn w_Z3_func_decl_to_ast (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_func_decl_to_ast(c, f)
    return ret
  public lostanza defn w_Z3_is_eq_func_decl (c:ptr<?>, f1:ptr<?>, f2:ptr<?>) -> byte :
    val ret = call-c Z3_is_eq_func_decl(c, f1, f2)
    return ret
  public lostanza defn w_Z3_get_func_decl_id (c:ptr<?>, f:ptr<?>) -> int :
    val ret = call-c Z3_get_func_decl_id(c, f)
    return ret
  public lostanza defn w_Z3_get_decl_name (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_decl_name(c, d)
    return ret
  public lostanza defn w_Z3_get_decl_kind (c:ptr<?>, d:ptr<?>) -> int :
    val ret = call-c Z3_get_decl_kind(c, d)
    return ret
  public lostanza defn w_Z3_get_domain_size (c:ptr<?>, d:ptr<?>) -> int :
    val ret = call-c Z3_get_domain_size(c, d)
    return ret
  public lostanza defn w_Z3_get_arity (c:ptr<?>, d:ptr<?>) -> int :
    val ret = call-c Z3_get_arity(c, d)
    return ret
  public lostanza defn w_Z3_get_domain (c:ptr<?>, d:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_get_domain(c, d, i)
    return ret
  public lostanza defn w_Z3_get_range (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_range(c, d)
    return ret
  public lostanza defn w_Z3_get_decl_num_parameters (c:ptr<?>, d:ptr<?>) -> int :
    val ret = call-c Z3_get_decl_num_parameters(c, d)
    return ret
  public lostanza defn w_Z3_get_decl_parameter_kind (c:ptr<?>, d:ptr<?>, idx:int) -> int :
    val ret = call-c Z3_get_decl_parameter_kind(c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_int_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> int :
    val ret = call-c Z3_get_decl_int_parameter(c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_double_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> double :
    val ret = call-c Z3_get_decl_double_parameter(c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_symbol_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_get_decl_symbol_parameter(c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_sort_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_get_decl_sort_parameter(c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_ast_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_get_decl_ast_parameter(c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_func_decl_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_get_decl_func_decl_parameter(c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_rational_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> ptr<byte> :
    val ret = call-c Z3_get_decl_rational_parameter(c, d, idx)
    return ret
  public lostanza defn w_Z3_app_to_ast (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_app_to_ast(c, a)
    return ret
  public lostanza defn w_Z3_get_app_decl (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_app_decl(c, a)
    return ret
  public lostanza defn w_Z3_get_app_num_args (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_get_app_num_args(c, a)
    return ret
  public lostanza defn w_Z3_get_app_arg (c:ptr<?>, a:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_get_app_arg(c, a, i)
    return ret
  public lostanza defn w_Z3_is_eq_ast (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> byte :
    val ret = call-c Z3_is_eq_ast(c, t1, t2)
    return ret
  public lostanza defn w_Z3_get_ast_id (c:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c Z3_get_ast_id(c, t)
    return ret
  public lostanza defn w_Z3_get_ast_hash (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_get_ast_hash(c, a)
    return ret
  public lostanza defn w_Z3_get_sort (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_sort(c, a)
    return ret
  public lostanza defn w_Z3_is_well_sorted (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c Z3_is_well_sorted(c, t)
    return ret
  public lostanza defn w_Z3_get_bool_value (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_get_bool_value(c, a)
    return ret
  public lostanza defn w_Z3_get_ast_kind (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_get_ast_kind(c, a)
    return ret
  public lostanza defn w_Z3_is_app (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_is_app(c, a)
    return ret
  public lostanza defn w_Z3_is_numeral_ast (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_is_numeral_ast(c, a)
    return ret
  public lostanza defn w_Z3_is_algebraic_number (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_is_algebraic_number(c, a)
    return ret
  public lostanza defn w_Z3_to_app (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_to_app(c, a)
    return ret
  public lostanza defn w_Z3_to_func_decl (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_to_func_decl(c, a)
    return ret
  public lostanza defn w_Z3_get_numeral_string (c:ptr<?>, a:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_get_numeral_string(c, a)
    return ret
  public lostanza defn w_Z3_get_numeral_binary_string (c:ptr<?>, a:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_get_numeral_binary_string(c, a)
    return ret
  public lostanza defn w_Z3_get_numeral_decimal_string (c:ptr<?>, a:ptr<?>, precision:int) -> ptr<byte> :
    val ret = call-c Z3_get_numeral_decimal_string(c, a, precision)
    return ret
  public lostanza defn w_Z3_get_numeral_double (c:ptr<?>, a:ptr<?>) -> double :
    val ret = call-c Z3_get_numeral_double(c, a)
    return ret
  public lostanza defn w_Z3_get_numerator (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_numerator(c, a)
    return ret
  public lostanza defn w_Z3_get_denominator (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_denominator(c, a)
    return ret
  public lostanza defn w_Z3_get_numeral_small (c:ptr<?>, a:ptr<?>, num:ptr<long>, den:ptr<long>) -> byte :
    val ret = call-c Z3_get_numeral_small(c, a, num, den)
    return ret
  public lostanza defn w_Z3_get_numeral_int (c:ptr<?>, v:ptr<?>, i:ptr<int>) -> byte :
    val ret = call-c Z3_get_numeral_int(c, v, i)
    return ret
  public lostanza defn w_Z3_get_numeral_uint (c:ptr<?>, v:ptr<?>, u:ptr<int>) -> byte :
    val ret = call-c Z3_get_numeral_uint(c, v, u)
    return ret
  public lostanza defn w_Z3_get_numeral_uint64 (c:ptr<?>, v:ptr<?>, u:ptr<long>) -> byte :
    val ret = call-c Z3_get_numeral_uint64(c, v, u)
    return ret
  public lostanza defn w_Z3_get_numeral_int64 (c:ptr<?>, v:ptr<?>, i:ptr<long>) -> byte :
    val ret = call-c Z3_get_numeral_int64(c, v, i)
    return ret
  public lostanza defn w_Z3_get_numeral_rational_int64 (c:ptr<?>, v:ptr<?>, num:ptr<long>, den:ptr<long>) -> byte :
    val ret = call-c Z3_get_numeral_rational_int64(c, v, num, den)
    return ret
  public lostanza defn w_Z3_get_algebraic_number_lower (c:ptr<?>, a:ptr<?>, precision:int) -> ptr<?> :
    val ret = call-c Z3_get_algebraic_number_lower(c, a, precision)
    return ret
  public lostanza defn w_Z3_get_algebraic_number_upper (c:ptr<?>, a:ptr<?>, precision:int) -> ptr<?> :
    val ret = call-c Z3_get_algebraic_number_upper(c, a, precision)
    return ret
  public lostanza defn w_Z3_pattern_to_ast (c:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_pattern_to_ast(c, p)
    return ret
  public lostanza defn w_Z3_get_pattern_num_terms (c:ptr<?>, p:ptr<?>) -> int :
    val ret = call-c Z3_get_pattern_num_terms(c, p)
    return ret
  public lostanza defn w_Z3_get_pattern (c:ptr<?>, p:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_get_pattern(c, p, idx)
    return ret
  public lostanza defn w_Z3_get_index_value (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_get_index_value(c, a)
    return ret
  public lostanza defn w_Z3_is_quantifier_forall (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_is_quantifier_forall(c, a)
    return ret
  public lostanza defn w_Z3_is_quantifier_exists (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_is_quantifier_exists(c, a)
    return ret
  public lostanza defn w_Z3_is_lambda (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_is_lambda(c, a)
    return ret
  public lostanza defn w_Z3_get_quantifier_weight (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_get_quantifier_weight(c, a)
    return ret
  public lostanza defn w_Z3_get_quantifier_num_patterns (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_get_quantifier_num_patterns(c, a)
    return ret
  public lostanza defn w_Z3_get_quantifier_pattern_ast (c:ptr<?>, a:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_get_quantifier_pattern_ast(c, a, i)
    return ret
  public lostanza defn w_Z3_get_quantifier_num_no_patterns (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_get_quantifier_num_no_patterns(c, a)
    return ret
  public lostanza defn w_Z3_get_quantifier_no_pattern_ast (c:ptr<?>, a:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_get_quantifier_no_pattern_ast(c, a, i)
    return ret
  public lostanza defn w_Z3_get_quantifier_num_bound (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_get_quantifier_num_bound(c, a)
    return ret
  public lostanza defn w_Z3_get_quantifier_bound_name (c:ptr<?>, a:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_get_quantifier_bound_name(c, a, i)
    return ret
  public lostanza defn w_Z3_get_quantifier_bound_sort (c:ptr<?>, a:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_get_quantifier_bound_sort(c, a, i)
    return ret
  public lostanza defn w_Z3_get_quantifier_body (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_quantifier_body(c, a)
    return ret
  public lostanza defn w_Z3_simplify (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_simplify(c, a)
    return ret
  public lostanza defn w_Z3_simplify_ex (c:ptr<?>, a:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_simplify_ex(c, a, p)
    return ret
  public lostanza defn w_Z3_simplify_get_help (c:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_simplify_get_help(c)
    return ret
  public lostanza defn w_Z3_simplify_get_param_descrs (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_simplify_get_param_descrs(c)
    return ret
  public lostanza defn w_Z3_update_term (c:ptr<?>, a:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_update_term(c, a, num_args, args)
    return ret
  public lostanza defn w_Z3_substitute (c:ptr<?>, a:ptr<?>, num_exprs:int, from_v:ptr<ptr<?>>, to_v:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_substitute(c, a, num_exprs, from_v, to_v)
    return ret
  public lostanza defn w_Z3_substitute_vars (c:ptr<?>, a:ptr<?>, num_exprs:int, to_v:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_substitute_vars(c, a, num_exprs, to_v)
    return ret
  public lostanza defn w_Z3_substitute_funs (c:ptr<?>, a:ptr<?>, num_funs:int, from_v:ptr<ptr<?>>, to_v:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_substitute_funs(c, a, num_funs, from_v, to_v)
    return ret
  public lostanza defn w_Z3_translate (source:ptr<?>, a:ptr<?>, target:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_translate(source, a, target)
    return ret
  public lostanza defn w_Z3_mk_model (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_model(c)
    return ret
  public lostanza defn w_Z3_model_inc_ref (c:ptr<?>, m:ptr<?>) -> ref<False> :
    call-c Z3_model_inc_ref(c, m)
    return false
  public lostanza defn w_Z3_model_dec_ref (c:ptr<?>, m:ptr<?>) -> ref<False> :
    call-c Z3_model_dec_ref(c, m)
    return false
  public lostanza defn w_Z3_model_eval (c:ptr<?>, m:ptr<?>, t:ptr<?>, model_completion:byte, v:ptr<ptr<?>>) -> byte :
    val ret = call-c Z3_model_eval(c, m, t, model_completion, v)
    return ret
  public lostanza defn w_Z3_model_get_const_interp (c:ptr<?>, m:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_model_get_const_interp(c, m, a)
    return ret
  public lostanza defn w_Z3_model_has_interp (c:ptr<?>, m:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_model_has_interp(c, m, a)
    return ret
  public lostanza defn w_Z3_model_get_func_interp (c:ptr<?>, m:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_model_get_func_interp(c, m, f)
    return ret
  public lostanza defn w_Z3_model_get_num_consts (c:ptr<?>, m:ptr<?>) -> int :
    val ret = call-c Z3_model_get_num_consts(c, m)
    return ret
  public lostanza defn w_Z3_model_get_const_decl (c:ptr<?>, m:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_model_get_const_decl(c, m, i)
    return ret
  public lostanza defn w_Z3_model_get_num_funcs (c:ptr<?>, m:ptr<?>) -> int :
    val ret = call-c Z3_model_get_num_funcs(c, m)
    return ret
  public lostanza defn w_Z3_model_get_func_decl (c:ptr<?>, m:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_model_get_func_decl(c, m, i)
    return ret
  public lostanza defn w_Z3_model_get_num_sorts (c:ptr<?>, m:ptr<?>) -> int :
    val ret = call-c Z3_model_get_num_sorts(c, m)
    return ret
  public lostanza defn w_Z3_model_get_sort (c:ptr<?>, m:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_model_get_sort(c, m, i)
    return ret
  public lostanza defn w_Z3_model_get_sort_universe (c:ptr<?>, m:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_model_get_sort_universe(c, m, s)
    return ret
  public lostanza defn w_Z3_model_translate (c:ptr<?>, m:ptr<?>, dst:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_model_translate(c, m, dst)
    return ret
  public lostanza defn w_Z3_is_as_array (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_is_as_array(c, a)
    return ret
  public lostanza defn w_Z3_get_as_array_func_decl (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_get_as_array_func_decl(c, a)
    return ret
  public lostanza defn w_Z3_add_func_interp (c:ptr<?>, m:ptr<?>, f:ptr<?>, default_value:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_add_func_interp(c, m, f, default_value)
    return ret
  public lostanza defn w_Z3_add_const_interp (c:ptr<?>, m:ptr<?>, f:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c Z3_add_const_interp(c, m, f, a)
    return false
  public lostanza defn w_Z3_func_interp_inc_ref (c:ptr<?>, f:ptr<?>) -> ref<False> :
    call-c Z3_func_interp_inc_ref(c, f)
    return false
  public lostanza defn w_Z3_func_interp_dec_ref (c:ptr<?>, f:ptr<?>) -> ref<False> :
    call-c Z3_func_interp_dec_ref(c, f)
    return false
  public lostanza defn w_Z3_func_interp_get_num_entries (c:ptr<?>, f:ptr<?>) -> int :
    val ret = call-c Z3_func_interp_get_num_entries(c, f)
    return ret
  public lostanza defn w_Z3_func_interp_get_entry (c:ptr<?>, f:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_func_interp_get_entry(c, f, i)
    return ret
  public lostanza defn w_Z3_func_interp_get_else (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_func_interp_get_else(c, f)
    return ret
  public lostanza defn w_Z3_func_interp_set_else (c:ptr<?>, f:ptr<?>, else_value:ptr<?>) -> ref<False> :
    call-c Z3_func_interp_set_else(c, f, else_value)
    return false
  public lostanza defn w_Z3_func_interp_get_arity (c:ptr<?>, f:ptr<?>) -> int :
    val ret = call-c Z3_func_interp_get_arity(c, f)
    return ret
  public lostanza defn w_Z3_func_interp_add_entry (c:ptr<?>, fi:ptr<?>, args:ptr<?>, value:ptr<?>) -> ref<False> :
    call-c Z3_func_interp_add_entry(c, fi, args, value)
    return false
  public lostanza defn w_Z3_func_entry_inc_ref (c:ptr<?>, e:ptr<?>) -> ref<False> :
    call-c Z3_func_entry_inc_ref(c, e)
    return false
  public lostanza defn w_Z3_func_entry_dec_ref (c:ptr<?>, e:ptr<?>) -> ref<False> :
    call-c Z3_func_entry_dec_ref(c, e)
    return false
  public lostanza defn w_Z3_func_entry_get_value (c:ptr<?>, e:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_func_entry_get_value(c, e)
    return ret
  public lostanza defn w_Z3_func_entry_get_num_args (c:ptr<?>, e:ptr<?>) -> int :
    val ret = call-c Z3_func_entry_get_num_args(c, e)
    return ret
  public lostanza defn w_Z3_func_entry_get_arg (c:ptr<?>, e:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_func_entry_get_arg(c, e, i)
    return ret
  public lostanza defn w_Z3_open_log (filename:ptr<byte>) -> byte :
    val ret = call-c Z3_open_log(filename)
    return ret
  public lostanza defn w_Z3_append_log (string:ptr<byte>) -> ref<False> :
    call-c Z3_append_log(string)
    return false
  public lostanza defn w_Z3_close_log () -> ref<False> :
    call-c Z3_close_log()
    return false
  public lostanza defn w_Z3_toggle_warning_messages (enabled:byte) -> ref<False> :
    call-c Z3_toggle_warning_messages(enabled)
    return false
  public lostanza defn w_Z3_set_ast_print_mode (c:ptr<?>, mode:int) -> ref<False> :
    call-c Z3_set_ast_print_mode(c, mode)
    return false
  public lostanza defn w_Z3_ast_to_string (c:ptr<?>, a:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_ast_to_string(c, a)
    return ret
  public lostanza defn w_Z3_pattern_to_string (c:ptr<?>, p:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_pattern_to_string(c, p)
    return ret
  public lostanza defn w_Z3_sort_to_string (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_sort_to_string(c, s)
    return ret
  public lostanza defn w_Z3_func_decl_to_string (c:ptr<?>, d:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_func_decl_to_string(c, d)
    return ret
  public lostanza defn w_Z3_model_to_string (c:ptr<?>, m:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_model_to_string(c, m)
    return ret
  public lostanza defn w_Z3_benchmark_to_smtlib_string (c:ptr<?>, name:ptr<byte>, logic:ptr<byte>, status:ptr<byte>, attributes:ptr<byte>, num_assumptions:int, assumptions:ptr<ptr<?>>, formula:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_benchmark_to_smtlib_string(c, name, logic, status, attributes, num_assumptions, assumptions, formula)
    return ret
  public lostanza defn w_Z3_parse_smtlib2_string (c:ptr<?>, str:ptr<byte>, num_sorts:int, sort_names:ptr<ptr<?>>, sorts:ptr<ptr<?>>, num_decls:int, decl_names:ptr<ptr<?>>, decls:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_parse_smtlib2_string(c, str, num_sorts, sort_names, sorts, num_decls, decl_names, decls)
    return ret
  public lostanza defn w_Z3_parse_smtlib2_file (c:ptr<?>, file_name:ptr<byte>, num_sorts:int, sort_names:ptr<ptr<?>>, sorts:ptr<ptr<?>>, num_decls:int, decl_names:ptr<ptr<?>>, decls:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_parse_smtlib2_file(c, file_name, num_sorts, sort_names, sorts, num_decls, decl_names, decls)
    return ret
  public lostanza defn w_Z3_eval_smtlib2_string (missing_name_v:ptr<?>, str:ptr<byte>) -> ptr<byte> :
    val ret = call-c Z3_eval_smtlib2_string(missing_name_v, str)
    return ret
  public lostanza defn w_Z3_mk_parser_context (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_parser_context(c)
    return ret
  public lostanza defn w_Z3_parser_context_inc_ref (c:ptr<?>, pc:ptr<?>) -> ref<False> :
    call-c Z3_parser_context_inc_ref(c, pc)
    return false
  public lostanza defn w_Z3_parser_context_dec_ref (c:ptr<?>, pc:ptr<?>) -> ref<False> :
    call-c Z3_parser_context_dec_ref(c, pc)
    return false
  public lostanza defn w_Z3_parser_context_add_sort (c:ptr<?>, pc:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c Z3_parser_context_add_sort(c, pc, s)
    return false
  public lostanza defn w_Z3_parser_context_add_decl (c:ptr<?>, pc:ptr<?>, f:ptr<?>) -> ref<False> :
    call-c Z3_parser_context_add_decl(c, pc, f)
    return false
  public lostanza defn w_Z3_parser_context_from_string (c:ptr<?>, pc:ptr<?>, s:ptr<byte>) -> ptr<?> :
    val ret = call-c Z3_parser_context_from_string(c, pc, s)
    return ret
  public lostanza defn w_Z3_get_error_code (c:ptr<?>) -> int :
    val ret = call-c Z3_get_error_code(c)
    return ret
  public lostanza defn w_Z3_set_error_handler (c:ptr<?>, h:ptr<( (ptr<?>,int) -> int )>) -> ref<False> :
    call-c Z3_set_error_handler(c, h)
    return false
  public lostanza defn w_Z3_set_error (c:ptr<?>, e:int) -> ref<False> :
    call-c Z3_set_error(c, e)
    return false
  public lostanza defn w_Z3_get_error_msg (c:ptr<?>, err:int) -> ptr<byte> :
    val ret = call-c Z3_get_error_msg(c, err)
    return ret
  public lostanza defn w_Z3_get_version (major:ptr<int>, minor:ptr<int>, build_number:ptr<int>, revision_number:ptr<int>) -> ref<False> :
    call-c Z3_get_version(major, minor, build_number, revision_number)
    return false
  public lostanza defn w_Z3_get_full_version () -> ptr<byte> :
    val ret = call-c Z3_get_full_version()
    return ret
  public lostanza defn w_Z3_enable_trace (tag:ptr<byte>) -> ref<False> :
    call-c Z3_enable_trace(tag)
    return false
  public lostanza defn w_Z3_disable_trace (tag:ptr<byte>) -> ref<False> :
    call-c Z3_disable_trace(tag)
    return false
  public lostanza defn w_Z3_reset_memory () -> ref<False> :
    call-c Z3_reset_memory()
    return false
  public lostanza defn w_Z3_finalize_memory () -> ref<False> :
    call-c Z3_finalize_memory()
    return false
  public lostanza defn w_Z3_mk_goal (c:ptr<?>, models:byte, unsat_cores:byte, proofs:byte) -> ptr<?> :
    val ret = call-c Z3_mk_goal(c, models, unsat_cores, proofs)
    return ret
  public lostanza defn w_Z3_goal_inc_ref (c:ptr<?>, g:ptr<?>) -> ref<False> :
    call-c Z3_goal_inc_ref(c, g)
    return false
  public lostanza defn w_Z3_goal_dec_ref (c:ptr<?>, g:ptr<?>) -> ref<False> :
    call-c Z3_goal_dec_ref(c, g)
    return false
  public lostanza defn w_Z3_goal_precision (c:ptr<?>, g:ptr<?>) -> int :
    val ret = call-c Z3_goal_precision(c, g)
    return ret
  public lostanza defn w_Z3_goal_assert (c:ptr<?>, g:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c Z3_goal_assert(c, g, a)
    return false
  public lostanza defn w_Z3_goal_inconsistent (c:ptr<?>, g:ptr<?>) -> byte :
    val ret = call-c Z3_goal_inconsistent(c, g)
    return ret
  public lostanza defn w_Z3_goal_depth (c:ptr<?>, g:ptr<?>) -> int :
    val ret = call-c Z3_goal_depth(c, g)
    return ret
  public lostanza defn w_Z3_goal_reset (c:ptr<?>, g:ptr<?>) -> ref<False> :
    call-c Z3_goal_reset(c, g)
    return false
  public lostanza defn w_Z3_goal_size (c:ptr<?>, g:ptr<?>) -> int :
    val ret = call-c Z3_goal_size(c, g)
    return ret
  public lostanza defn w_Z3_goal_formula (c:ptr<?>, g:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_goal_formula(c, g, idx)
    return ret
  public lostanza defn w_Z3_goal_num_exprs (c:ptr<?>, g:ptr<?>) -> int :
    val ret = call-c Z3_goal_num_exprs(c, g)
    return ret
  public lostanza defn w_Z3_goal_is_decided_sat (c:ptr<?>, g:ptr<?>) -> byte :
    val ret = call-c Z3_goal_is_decided_sat(c, g)
    return ret
  public lostanza defn w_Z3_goal_is_decided_unsat (c:ptr<?>, g:ptr<?>) -> byte :
    val ret = call-c Z3_goal_is_decided_unsat(c, g)
    return ret
  public lostanza defn w_Z3_goal_translate (source:ptr<?>, g:ptr<?>, target:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_goal_translate(source, g, target)
    return ret
  public lostanza defn w_Z3_goal_convert_model (c:ptr<?>, g:ptr<?>, m:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_goal_convert_model(c, g, m)
    return ret
  public lostanza defn w_Z3_goal_to_string (c:ptr<?>, g:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_goal_to_string(c, g)
    return ret
  public lostanza defn w_Z3_goal_to_dimacs_string (c:ptr<?>, g:ptr<?>, include_names:byte) -> ptr<byte> :
    val ret = call-c Z3_goal_to_dimacs_string(c, g, include_names)
    return ret
  public lostanza defn w_Z3_mk_tactic (c:ptr<?>, name:ptr<byte>) -> ptr<?> :
    val ret = call-c Z3_mk_tactic(c, name)
    return ret
  public lostanza defn w_Z3_tactic_inc_ref (c:ptr<?>, t:ptr<?>) -> ref<False> :
    call-c Z3_tactic_inc_ref(c, t)
    return false
  public lostanza defn w_Z3_tactic_dec_ref (c:ptr<?>, g:ptr<?>) -> ref<False> :
    call-c Z3_tactic_dec_ref(c, g)
    return false
  public lostanza defn w_Z3_mk_probe (c:ptr<?>, name:ptr<byte>) -> ptr<?> :
    val ret = call-c Z3_mk_probe(c, name)
    return ret
  public lostanza defn w_Z3_probe_inc_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c Z3_probe_inc_ref(c, p)
    return false
  public lostanza defn w_Z3_probe_dec_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c Z3_probe_dec_ref(c, p)
    return false
  public lostanza defn w_Z3_tactic_and_then (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_and_then(c, t1, t2)
    return ret
  public lostanza defn w_Z3_tactic_or_else (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_or_else(c, t1, t2)
    return ret
  public lostanza defn w_Z3_tactic_par_or (c:ptr<?>, num:int, ts:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_tactic_par_or(c, num, ts)
    return ret
  public lostanza defn w_Z3_tactic_par_and_then (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_par_and_then(c, t1, t2)
    return ret
  public lostanza defn w_Z3_tactic_try_for (c:ptr<?>, t:ptr<?>, ms:int) -> ptr<?> :
    val ret = call-c Z3_tactic_try_for(c, t, ms)
    return ret
  public lostanza defn w_Z3_tactic_when (c:ptr<?>, p:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_when(c, p, t)
    return ret
  public lostanza defn w_Z3_tactic_cond (c:ptr<?>, p:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_cond(c, p, t1, t2)
    return ret
  public lostanza defn w_Z3_tactic_repeat (c:ptr<?>, t:ptr<?>, max:int) -> ptr<?> :
    val ret = call-c Z3_tactic_repeat(c, t, max)
    return ret
  public lostanza defn w_Z3_tactic_skip (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_skip(c)
    return ret
  public lostanza defn w_Z3_tactic_fail (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_fail(c)
    return ret
  public lostanza defn w_Z3_tactic_fail_if (c:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_fail_if(c, p)
    return ret
  public lostanza defn w_Z3_tactic_fail_if_not_decided (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_fail_if_not_decided(c)
    return ret
  public lostanza defn w_Z3_tactic_using_params (c:ptr<?>, t:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_using_params(c, t, p)
    return ret
  public lostanza defn w_Z3_probe_const (x:ptr<?>, val_v:double) -> ptr<?> :
    val ret = call-c Z3_probe_const(x, val_v)
    return ret
  public lostanza defn w_Z3_probe_lt (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_probe_lt(x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_gt (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_probe_gt(x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_le (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_probe_le(x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_ge (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_probe_ge(x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_eq (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_probe_eq(x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_and (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_probe_and(x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_or (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_probe_or(x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_not (x:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_probe_not(x, p)
    return ret
  public lostanza defn w_Z3_get_num_tactics (c:ptr<?>) -> int :
    val ret = call-c Z3_get_num_tactics(c)
    return ret
  public lostanza defn w_Z3_get_tactic_name (c:ptr<?>, i:int) -> ptr<byte> :
    val ret = call-c Z3_get_tactic_name(c, i)
    return ret
  public lostanza defn w_Z3_get_num_probes (c:ptr<?>) -> int :
    val ret = call-c Z3_get_num_probes(c)
    return ret
  public lostanza defn w_Z3_get_probe_name (c:ptr<?>, i:int) -> ptr<byte> :
    val ret = call-c Z3_get_probe_name(c, i)
    return ret
  public lostanza defn w_Z3_tactic_get_help (c:ptr<?>, t:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_tactic_get_help(c, t)
    return ret
  public lostanza defn w_Z3_tactic_get_param_descrs (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_get_param_descrs(c, t)
    return ret
  public lostanza defn w_Z3_tactic_get_descr (c:ptr<?>, name:ptr<byte>) -> ptr<byte> :
    val ret = call-c Z3_tactic_get_descr(c, name)
    return ret
  public lostanza defn w_Z3_probe_get_descr (c:ptr<?>, name:ptr<byte>) -> ptr<byte> :
    val ret = call-c Z3_probe_get_descr(c, name)
    return ret
  public lostanza defn w_Z3_probe_apply (c:ptr<?>, p:ptr<?>, g:ptr<?>) -> double :
    val ret = call-c Z3_probe_apply(c, p, g)
    return ret
  public lostanza defn w_Z3_tactic_apply (c:ptr<?>, t:ptr<?>, g:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_apply(c, t, g)
    return ret
  public lostanza defn w_Z3_tactic_apply_ex (c:ptr<?>, t:ptr<?>, g:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_tactic_apply_ex(c, t, g, p)
    return ret
  public lostanza defn w_Z3_apply_result_inc_ref (c:ptr<?>, r:ptr<?>) -> ref<False> :
    call-c Z3_apply_result_inc_ref(c, r)
    return false
  public lostanza defn w_Z3_apply_result_dec_ref (c:ptr<?>, r:ptr<?>) -> ref<False> :
    call-c Z3_apply_result_dec_ref(c, r)
    return false
  public lostanza defn w_Z3_apply_result_to_string (c:ptr<?>, r:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_apply_result_to_string(c, r)
    return ret
  public lostanza defn w_Z3_apply_result_get_num_subgoals (c:ptr<?>, r:ptr<?>) -> int :
    val ret = call-c Z3_apply_result_get_num_subgoals(c, r)
    return ret
  public lostanza defn w_Z3_apply_result_get_subgoal (c:ptr<?>, r:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_apply_result_get_subgoal(c, r, i)
    return ret
  public lostanza defn w_Z3_mk_solver (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_solver(c)
    return ret
  public lostanza defn w_Z3_mk_simple_solver (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_simple_solver(c)
    return ret
  public lostanza defn w_Z3_mk_solver_for_logic (c:ptr<?>, logic:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_solver_for_logic(c, logic)
    return ret
  public lostanza defn w_Z3_mk_solver_from_tactic (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_solver_from_tactic(c, t)
    return ret
  public lostanza defn w_Z3_solver_translate (source:ptr<?>, s:ptr<?>, target:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_translate(source, s, target)
    return ret
  public lostanza defn w_Z3_solver_import_model_converter (ctx:ptr<?>, src:ptr<?>, dst:ptr<?>) -> ref<False> :
    call-c Z3_solver_import_model_converter(ctx, src, dst)
    return false
  public lostanza defn w_Z3_solver_get_help (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_solver_get_help(c, s)
    return ret
  public lostanza defn w_Z3_solver_get_param_descrs (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_get_param_descrs(c, s)
    return ret
  public lostanza defn w_Z3_solver_set_params (c:ptr<?>, s:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c Z3_solver_set_params(c, s, p)
    return false
  public lostanza defn w_Z3_solver_inc_ref (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c Z3_solver_inc_ref(c, s)
    return false
  public lostanza defn w_Z3_solver_dec_ref (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c Z3_solver_dec_ref(c, s)
    return false
  public lostanza defn w_Z3_solver_interrupt (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c Z3_solver_interrupt(c, s)
    return false
  public lostanza defn w_Z3_solver_push (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c Z3_solver_push(c, s)
    return false
  public lostanza defn w_Z3_solver_pop (c:ptr<?>, s:ptr<?>, n:int) -> ref<False> :
    call-c Z3_solver_pop(c, s, n)
    return false
  public lostanza defn w_Z3_solver_reset (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c Z3_solver_reset(c, s)
    return false
  public lostanza defn w_Z3_solver_get_num_scopes (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c Z3_solver_get_num_scopes(c, s)
    return ret
  public lostanza defn w_Z3_solver_assert (c:ptr<?>, s:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c Z3_solver_assert(c, s, a)
    return false
  public lostanza defn w_Z3_solver_assert_and_track (c:ptr<?>, s:ptr<?>, a:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c Z3_solver_assert_and_track(c, s, a, p)
    return false
  public lostanza defn w_Z3_solver_from_file (c:ptr<?>, s:ptr<?>, file_name:ptr<byte>) -> ref<False> :
    call-c Z3_solver_from_file(c, s, file_name)
    return false
  public lostanza defn w_Z3_solver_from_string (c:ptr<?>, s:ptr<?>, file_name:ptr<byte>) -> ref<False> :
    call-c Z3_solver_from_string(c, s, file_name)
    return false
  public lostanza defn w_Z3_solver_get_assertions (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_get_assertions(c, s)
    return ret
  public lostanza defn w_Z3_solver_get_units (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_get_units(c, s)
    return ret
  public lostanza defn w_Z3_solver_get_trail (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_get_trail(c, s)
    return ret
  public lostanza defn w_Z3_solver_get_non_units (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_get_non_units(c, s)
    return ret
  public lostanza defn w_Z3_solver_get_levels (c:ptr<?>, s:ptr<?>, literals:ptr<?>, sz:int, levels:ptr<int>) -> ref<False> :
    call-c Z3_solver_get_levels(c, s, literals, sz, levels)
    return false
  public lostanza defn w_Z3_solver_propagate_init (c:ptr<?>, s:ptr<?>, user_context:ptr<?>, push_eh:ptr<( (ptr<?>,ptr<?>) -> int )>, pop_eh:ptr<( (ptr<?>,ptr<?>,int) -> int )>, fresh_eh:ptr<( (ptr<?>,ptr<?>) -> ptr<?> )>) -> ref<False> :
    call-c Z3_solver_propagate_init(c, s, user_context, push_eh, pop_eh, fresh_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_fixed (c:ptr<?>, s:ptr<?>, fixed_eh:ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c Z3_solver_propagate_fixed(c, s, fixed_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_final (c:ptr<?>, s:ptr<?>, final_eh:ptr<( (ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c Z3_solver_propagate_final(c, s, final_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_eq (c:ptr<?>, s:ptr<?>, eq_eh:ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c Z3_solver_propagate_eq(c, s, eq_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_diseq (c:ptr<?>, s:ptr<?>, eq_eh:ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c Z3_solver_propagate_diseq(c, s, eq_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_created (c:ptr<?>, s:ptr<?>, created_eh:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c Z3_solver_propagate_created(c, s, created_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_decide (c:ptr<?>, s:ptr<?>, decide_eh:ptr<( (ptr<?>,ptr<?>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )>) -> ref<False> :
    call-c Z3_solver_propagate_decide(c, s, decide_eh)
    return false
  public lostanza defn w_Z3_solver_next_split (c:ptr<?>, cb:ptr<?>, t:ptr<?>, idx:int, phase:int) -> ref<False> :
    call-c Z3_solver_next_split(c, cb, t, idx, phase)
    return false
  public lostanza defn w_Z3_solver_propagate_declare (c:ptr<?>, name:ptr<?>, n:int, domain:ptr<ptr<?>>, range:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_propagate_declare(c, name, n, domain, range)
    return ret
  public lostanza defn w_Z3_solver_propagate_register (c:ptr<?>, s:ptr<?>, e:ptr<?>) -> ref<False> :
    call-c Z3_solver_propagate_register(c, s, e)
    return false
  public lostanza defn w_Z3_solver_propagate_register_cb (c:ptr<?>, cb:ptr<?>, e:ptr<?>) -> ref<False> :
    call-c Z3_solver_propagate_register_cb(c, cb, e)
    return false
  public lostanza defn w_Z3_solver_propagate_consequence (c:ptr<?>, missing_name_v:ptr<?>, num_fixed:int, fixed:ptr<ptr<?>>, num_eqs:int, eq_lhs:ptr<ptr<?>>, eq_rhs:ptr<ptr<?>>, conseq:ptr<?>) -> ref<False> :
    call-c Z3_solver_propagate_consequence(c, missing_name_v, num_fixed, fixed, num_eqs, eq_lhs, eq_rhs, conseq)
    return false
  public lostanza defn w_Z3_solver_check (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c Z3_solver_check(c, s)
    return ret
  public lostanza defn w_Z3_solver_check_assumptions (c:ptr<?>, s:ptr<?>, num_assumptions:int, assumptions:ptr<ptr<?>>) -> int :
    val ret = call-c Z3_solver_check_assumptions(c, s, num_assumptions, assumptions)
    return ret
  public lostanza defn w_Z3_get_implied_equalities (c:ptr<?>, s:ptr<?>, num_terms:int, terms:ptr<ptr<?>>, class_ids:ptr<int>) -> int :
    val ret = call-c Z3_get_implied_equalities(c, s, num_terms, terms, class_ids)
    return ret
  public lostanza defn w_Z3_solver_get_consequences (c:ptr<?>, s:ptr<?>, assumptions:ptr<?>, variables:ptr<?>, consequences:ptr<?>) -> int :
    val ret = call-c Z3_solver_get_consequences(c, s, assumptions, variables, consequences)
    return ret
  public lostanza defn w_Z3_solver_cube (c:ptr<?>, s:ptr<?>, vars:ptr<?>, backtrack_level:int) -> ptr<?> :
    val ret = call-c Z3_solver_cube(c, s, vars, backtrack_level)
    return ret
  public lostanza defn w_Z3_solver_get_model (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_get_model(c, s)
    return ret
  public lostanza defn w_Z3_solver_get_proof (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_get_proof(c, s)
    return ret
  public lostanza defn w_Z3_solver_get_unsat_core (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_get_unsat_core(c, s)
    return ret
  public lostanza defn w_Z3_solver_get_reason_unknown (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_solver_get_reason_unknown(c, s)
    return ret
  public lostanza defn w_Z3_solver_get_statistics (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_solver_get_statistics(c, s)
    return ret
  public lostanza defn w_Z3_solver_to_string (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_solver_to_string(c, s)
    return ret
  public lostanza defn w_Z3_solver_to_dimacs_string (c:ptr<?>, s:ptr<?>, include_names:byte) -> ptr<byte> :
    val ret = call-c Z3_solver_to_dimacs_string(c, s, include_names)
    return ret
  public lostanza defn w_Z3_stats_to_string (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_stats_to_string(c, s)
    return ret
  public lostanza defn w_Z3_stats_inc_ref (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c Z3_stats_inc_ref(c, s)
    return false
  public lostanza defn w_Z3_stats_dec_ref (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c Z3_stats_dec_ref(c, s)
    return false
  public lostanza defn w_Z3_stats_size (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c Z3_stats_size(c, s)
    return ret
  public lostanza defn w_Z3_stats_get_key (c:ptr<?>, s:ptr<?>, idx:int) -> ptr<byte> :
    val ret = call-c Z3_stats_get_key(c, s, idx)
    return ret
  public lostanza defn w_Z3_stats_is_uint (c:ptr<?>, s:ptr<?>, idx:int) -> byte :
    val ret = call-c Z3_stats_is_uint(c, s, idx)
    return ret
  public lostanza defn w_Z3_stats_is_double (c:ptr<?>, s:ptr<?>, idx:int) -> byte :
    val ret = call-c Z3_stats_is_double(c, s, idx)
    return ret
  public lostanza defn w_Z3_stats_get_uint_value (c:ptr<?>, s:ptr<?>, idx:int) -> int :
    val ret = call-c Z3_stats_get_uint_value(c, s, idx)
    return ret
  public lostanza defn w_Z3_stats_get_double_value (c:ptr<?>, s:ptr<?>, idx:int) -> double :
    val ret = call-c Z3_stats_get_double_value(c, s, idx)
    return ret
  public lostanza defn w_Z3_get_estimated_alloc_size () -> long :
    val ret = call-c Z3_get_estimated_alloc_size()
    return ret
  public lostanza defn w_Z3_mk_ast_vector (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_ast_vector(c)
    return ret
  public lostanza defn w_Z3_ast_vector_inc_ref (c:ptr<?>, v:ptr<?>) -> ref<False> :
    call-c Z3_ast_vector_inc_ref(c, v)
    return false
  public lostanza defn w_Z3_ast_vector_dec_ref (c:ptr<?>, v:ptr<?>) -> ref<False> :
    call-c Z3_ast_vector_dec_ref(c, v)
    return false
  public lostanza defn w_Z3_ast_vector_size (c:ptr<?>, v:ptr<?>) -> int :
    val ret = call-c Z3_ast_vector_size(c, v)
    return ret
  public lostanza defn w_Z3_ast_vector_get (c:ptr<?>, v:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c Z3_ast_vector_get(c, v, i)
    return ret
  public lostanza defn w_Z3_ast_vector_set (c:ptr<?>, v:ptr<?>, i:int, a:ptr<?>) -> ref<False> :
    call-c Z3_ast_vector_set(c, v, i, a)
    return false
  public lostanza defn w_Z3_ast_vector_resize (c:ptr<?>, v:ptr<?>, n:int) -> ref<False> :
    call-c Z3_ast_vector_resize(c, v, n)
    return false
  public lostanza defn w_Z3_ast_vector_push (c:ptr<?>, v:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c Z3_ast_vector_push(c, v, a)
    return false
  public lostanza defn w_Z3_ast_vector_translate (s:ptr<?>, v:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_ast_vector_translate(s, v, t)
    return ret
  public lostanza defn w_Z3_ast_vector_to_string (c:ptr<?>, v:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_ast_vector_to_string(c, v)
    return ret
  public lostanza defn w_Z3_mk_ast_map (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_ast_map(c)
    return ret
  public lostanza defn w_Z3_ast_map_inc_ref (c:ptr<?>, m:ptr<?>) -> ref<False> :
    call-c Z3_ast_map_inc_ref(c, m)
    return false
  public lostanza defn w_Z3_ast_map_dec_ref (c:ptr<?>, m:ptr<?>) -> ref<False> :
    call-c Z3_ast_map_dec_ref(c, m)
    return false
  public lostanza defn w_Z3_ast_map_contains (c:ptr<?>, m:ptr<?>, k:ptr<?>) -> byte :
    val ret = call-c Z3_ast_map_contains(c, m, k)
    return ret
  public lostanza defn w_Z3_ast_map_find (c:ptr<?>, m:ptr<?>, k:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_ast_map_find(c, m, k)
    return ret
  public lostanza defn w_Z3_ast_map_insert (c:ptr<?>, m:ptr<?>, k:ptr<?>, v:ptr<?>) -> ref<False> :
    call-c Z3_ast_map_insert(c, m, k, v)
    return false
  public lostanza defn w_Z3_ast_map_erase (c:ptr<?>, m:ptr<?>, k:ptr<?>) -> ref<False> :
    call-c Z3_ast_map_erase(c, m, k)
    return false
  public lostanza defn w_Z3_ast_map_reset (c:ptr<?>, m:ptr<?>) -> ref<False> :
    call-c Z3_ast_map_reset(c, m)
    return false
  public lostanza defn w_Z3_ast_map_size (c:ptr<?>, m:ptr<?>) -> int :
    val ret = call-c Z3_ast_map_size(c, m)
    return ret
  public lostanza defn w_Z3_ast_map_keys (c:ptr<?>, m:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_ast_map_keys(c, m)
    return ret
  public lostanza defn w_Z3_ast_map_to_string (c:ptr<?>, m:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_ast_map_to_string(c, m)
    return ret
  public lostanza defn w_Z3_algebraic_is_value (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_algebraic_is_value(c, a)
    return ret
  public lostanza defn w_Z3_algebraic_is_pos (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_algebraic_is_pos(c, a)
    return ret
  public lostanza defn w_Z3_algebraic_is_neg (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_algebraic_is_neg(c, a)
    return ret
  public lostanza defn w_Z3_algebraic_is_zero (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c Z3_algebraic_is_zero(c, a)
    return ret
  public lostanza defn w_Z3_algebraic_sign (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_algebraic_sign(c, a)
    return ret
  public lostanza defn w_Z3_algebraic_add (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_algebraic_add(c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_sub (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_algebraic_sub(c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_mul (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_algebraic_mul(c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_div (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_algebraic_div(c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_root (c:ptr<?>, a:ptr<?>, k:int) -> ptr<?> :
    val ret = call-c Z3_algebraic_root(c, a, k)
    return ret
  public lostanza defn w_Z3_algebraic_power (c:ptr<?>, a:ptr<?>, k:int) -> ptr<?> :
    val ret = call-c Z3_algebraic_power(c, a, k)
    return ret
  public lostanza defn w_Z3_algebraic_lt (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_algebraic_lt(c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_gt (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_algebraic_gt(c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_le (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_algebraic_le(c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_ge (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_algebraic_ge(c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_eq (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_algebraic_eq(c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_neq (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_algebraic_neq(c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_roots (c:ptr<?>, p:ptr<?>, n:int, a:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c Z3_algebraic_roots(c, p, n, a)
    return ret
  public lostanza defn w_Z3_algebraic_eval (c:ptr<?>, p:ptr<?>, n:int, a:ptr<ptr<?>>) -> int :
    val ret = call-c Z3_algebraic_eval(c, p, n, a)
    return ret
  public lostanza defn w_Z3_algebraic_get_poly (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_algebraic_get_poly(c, a)
    return ret
  public lostanza defn w_Z3_algebraic_get_i (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c Z3_algebraic_get_i(c, a)
    return ret
  public lostanza defn w_Z3_polynomial_subresultants (c:ptr<?>, p:ptr<?>, q:ptr<?>, x:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_polynomial_subresultants(c, p, q, x)
    return ret
  public lostanza defn w_Z3_rcf_del (c:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c Z3_rcf_del(c, a)
    return false
  public lostanza defn w_Z3_rcf_mk_rational (c:ptr<?>, val_v:ptr<byte>) -> ptr<?> :
    val ret = call-c Z3_rcf_mk_rational(c, val_v)
    return ret
  public lostanza defn w_Z3_rcf_mk_small_int (c:ptr<?>, val_v:int) -> ptr<?> :
    val ret = call-c Z3_rcf_mk_small_int(c, val_v)
    return ret
  public lostanza defn w_Z3_rcf_mk_pi (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_rcf_mk_pi(c)
    return ret
  public lostanza defn w_Z3_rcf_mk_e (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_rcf_mk_e(c)
    return ret
  public lostanza defn w_Z3_rcf_mk_infinitesimal (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_rcf_mk_infinitesimal(c)
    return ret
  public lostanza defn w_Z3_rcf_mk_roots (c:ptr<?>, n:int, a:ptr<ptr<?>>, roots:ptr<ptr<?>>) -> int :
    val ret = call-c Z3_rcf_mk_roots(c, n, a, roots)
    return ret
  public lostanza defn w_Z3_rcf_add (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_rcf_add(c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_sub (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_rcf_sub(c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_mul (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_rcf_mul(c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_div (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_rcf_div(c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_neg (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_rcf_neg(c, a)
    return ret
  public lostanza defn w_Z3_rcf_inv (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_rcf_inv(c, a)
    return ret
  public lostanza defn w_Z3_rcf_power (c:ptr<?>, a:ptr<?>, k:int) -> ptr<?> :
    val ret = call-c Z3_rcf_power(c, a, k)
    return ret
  public lostanza defn w_Z3_rcf_lt (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_rcf_lt(c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_gt (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_rcf_gt(c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_le (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_rcf_le(c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_ge (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_rcf_ge(c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_eq (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_rcf_eq(c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_neq (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c Z3_rcf_neq(c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_num_to_string (c:ptr<?>, a:ptr<?>, compact:byte, html:byte) -> ptr<byte> :
    val ret = call-c Z3_rcf_num_to_string(c, a, compact, html)
    return ret
  public lostanza defn w_Z3_rcf_num_to_decimal_string (c:ptr<?>, a:ptr<?>, prec:int) -> ptr<byte> :
    val ret = call-c Z3_rcf_num_to_decimal_string(c, a, prec)
    return ret
  public lostanza defn w_Z3_rcf_get_numerator_denominator (c:ptr<?>, a:ptr<?>, n:ptr<ptr<?>>, d:ptr<ptr<?>>) -> ref<False> :
    call-c Z3_rcf_get_numerator_denominator(c, a, n, d)
    return false
  public lostanza defn w_Z3_mk_fixedpoint (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fixedpoint(c)
    return ret
  public lostanza defn w_Z3_fixedpoint_inc_ref (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c Z3_fixedpoint_inc_ref(c, d)
    return false
  public lostanza defn w_Z3_fixedpoint_dec_ref (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c Z3_fixedpoint_dec_ref(c, d)
    return false
  public lostanza defn w_Z3_fixedpoint_add_rule (c:ptr<?>, d:ptr<?>, rule:ptr<?>, name:ptr<?>) -> ref<False> :
    call-c Z3_fixedpoint_add_rule(c, d, rule, name)
    return false
  public lostanza defn w_Z3_fixedpoint_add_fact (c:ptr<?>, d:ptr<?>, r:ptr<?>, num_args:int, args:ptr<int>) -> ref<False> :
    call-c Z3_fixedpoint_add_fact(c, d, r, num_args, args)
    return false
  public lostanza defn w_Z3_fixedpoint_assert (c:ptr<?>, d:ptr<?>, axiom:ptr<?>) -> ref<False> :
    call-c Z3_fixedpoint_assert(c, d, axiom)
    return false
  public lostanza defn w_Z3_fixedpoint_query (c:ptr<?>, d:ptr<?>, query:ptr<?>) -> int :
    val ret = call-c Z3_fixedpoint_query(c, d, query)
    return ret
  public lostanza defn w_Z3_fixedpoint_query_relations (c:ptr<?>, d:ptr<?>, num_relations:int, relations:ptr<ptr<?>>) -> int :
    val ret = call-c Z3_fixedpoint_query_relations(c, d, num_relations, relations)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_answer (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_get_answer(c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_reason_unknown (c:ptr<?>, d:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_fixedpoint_get_reason_unknown(c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_update_rule (c:ptr<?>, d:ptr<?>, a:ptr<?>, name:ptr<?>) -> ref<False> :
    call-c Z3_fixedpoint_update_rule(c, d, a, name)
    return false
  public lostanza defn w_Z3_fixedpoint_get_num_levels (c:ptr<?>, d:ptr<?>, pred:ptr<?>) -> int :
    val ret = call-c Z3_fixedpoint_get_num_levels(c, d, pred)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_cover_delta (c:ptr<?>, d:ptr<?>, level:int, pred:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_get_cover_delta(c, d, level, pred)
    return ret
  public lostanza defn w_Z3_fixedpoint_add_cover (c:ptr<?>, d:ptr<?>, level:int, pred:ptr<?>, property:ptr<?>) -> ref<False> :
    call-c Z3_fixedpoint_add_cover(c, d, level, pred, property)
    return false
  public lostanza defn w_Z3_fixedpoint_get_statistics (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_get_statistics(c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_register_relation (c:ptr<?>, d:ptr<?>, f:ptr<?>) -> ref<False> :
    call-c Z3_fixedpoint_register_relation(c, d, f)
    return false
  public lostanza defn w_Z3_fixedpoint_set_predicate_representation (c:ptr<?>, d:ptr<?>, f:ptr<?>, num_relations:int, relation_kinds:ptr<ptr<?>>) -> ref<False> :
    call-c Z3_fixedpoint_set_predicate_representation(c, d, f, num_relations, relation_kinds)
    return false
  public lostanza defn w_Z3_fixedpoint_get_rules (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_get_rules(c, f)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_assertions (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_get_assertions(c, f)
    return ret
  public lostanza defn w_Z3_fixedpoint_set_params (c:ptr<?>, f:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c Z3_fixedpoint_set_params(c, f, p)
    return false
  public lostanza defn w_Z3_fixedpoint_get_help (c:ptr<?>, f:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_fixedpoint_get_help(c, f)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_param_descrs (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_get_param_descrs(c, f)
    return ret
  public lostanza defn w_Z3_fixedpoint_to_string (c:ptr<?>, f:ptr<?>, num_queries:int, queries:ptr<ptr<?>>) -> ptr<byte> :
    val ret = call-c Z3_fixedpoint_to_string(c, f, num_queries, queries)
    return ret
  public lostanza defn w_Z3_fixedpoint_from_string (c:ptr<?>, f:ptr<?>, s:ptr<byte>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_from_string(c, f, s)
    return ret
  public lostanza defn w_Z3_fixedpoint_from_file (c:ptr<?>, f:ptr<?>, s:ptr<byte>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_from_file(c, f, s)
    return ret
  public lostanza defn w_Z3_fixedpoint_init (c:ptr<?>, d:ptr<?>, state:ptr<?>) -> ref<False> :
    call-c Z3_fixedpoint_init(c, d, state)
    return false
  public lostanza defn w_Z3_fixedpoint_set_reduce_assign_callback (c:ptr<?>, d:ptr<?>, cb:ptr<( (ptr<?>,ptr<?>,int,ptr<ptr<?>>,int,ptr<ptr<?>>) -> int )>) -> ref<False> :
    call-c Z3_fixedpoint_set_reduce_assign_callback(c, d, cb)
    return false
  public lostanza defn w_Z3_fixedpoint_set_reduce_app_callback (c:ptr<?>, d:ptr<?>, cb:ptr<( (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> int )>) -> ref<False> :
    call-c Z3_fixedpoint_set_reduce_app_callback(c, d, cb)
    return false
  public lostanza defn w_Z3_fixedpoint_add_callback (ctx:ptr<?>, f:ptr<?>, state:ptr<?>, new_lemma_eh:ptr<ptr<( (ptr<?>,ptr<?>,int) -> int )>>, predecessor_eh:ptr<ptr<( (ptr<?>) -> int )>>, unfold_eh:ptr<ptr<( (ptr<?>) -> int )>>) -> ref<False> :
    call-c Z3_fixedpoint_add_callback(ctx, f, state, new_lemma_eh, predecessor_eh, unfold_eh)
    return false
  public lostanza defn w_Z3_fixedpoint_add_constraint (c:ptr<?>, d:ptr<?>, e:ptr<?>, lvl:int) -> ref<False> :
    call-c Z3_fixedpoint_add_constraint(c, d, e, lvl)
    return false
  public lostanza defn w_Z3_mk_optimize (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_optimize(c)
    return ret
  public lostanza defn w_Z3_optimize_inc_ref (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c Z3_optimize_inc_ref(c, d)
    return false
  public lostanza defn w_Z3_optimize_dec_ref (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c Z3_optimize_dec_ref(c, d)
    return false
  public lostanza defn w_Z3_optimize_assert (c:ptr<?>, o:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c Z3_optimize_assert(c, o, a)
    return false
  public lostanza defn w_Z3_optimize_assert_and_track (c:ptr<?>, o:ptr<?>, a:ptr<?>, t:ptr<?>) -> ref<False> :
    call-c Z3_optimize_assert_and_track(c, o, a, t)
    return false
  public lostanza defn w_Z3_optimize_assert_soft (c:ptr<?>, o:ptr<?>, a:ptr<?>, weight:ptr<byte>, id:ptr<?>) -> int :
    val ret = call-c Z3_optimize_assert_soft(c, o, a, weight, id)
    return ret
  public lostanza defn w_Z3_optimize_maximize (c:ptr<?>, o:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c Z3_optimize_maximize(c, o, t)
    return ret
  public lostanza defn w_Z3_optimize_minimize (c:ptr<?>, o:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c Z3_optimize_minimize(c, o, t)
    return ret
  public lostanza defn w_Z3_optimize_push (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c Z3_optimize_push(c, d)
    return false
  public lostanza defn w_Z3_optimize_pop (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c Z3_optimize_pop(c, d)
    return false
  public lostanza defn w_Z3_optimize_check (c:ptr<?>, o:ptr<?>, num_assumptions:int, assumptions:ptr<ptr<?>>) -> int :
    val ret = call-c Z3_optimize_check(c, o, num_assumptions, assumptions)
    return ret
  public lostanza defn w_Z3_optimize_get_reason_unknown (c:ptr<?>, d:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_optimize_get_reason_unknown(c, d)
    return ret
  public lostanza defn w_Z3_optimize_get_model (c:ptr<?>, o:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_optimize_get_model(c, o)
    return ret
  public lostanza defn w_Z3_optimize_get_unsat_core (c:ptr<?>, o:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_optimize_get_unsat_core(c, o)
    return ret
  public lostanza defn w_Z3_optimize_set_params (c:ptr<?>, o:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c Z3_optimize_set_params(c, o, p)
    return false
  public lostanza defn w_Z3_optimize_get_param_descrs (c:ptr<?>, o:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_optimize_get_param_descrs(c, o)
    return ret
  public lostanza defn w_Z3_optimize_get_lower (c:ptr<?>, o:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_optimize_get_lower(c, o, idx)
    return ret
  public lostanza defn w_Z3_optimize_get_upper (c:ptr<?>, o:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_optimize_get_upper(c, o, idx)
    return ret
  public lostanza defn w_Z3_optimize_get_lower_as_vector (c:ptr<?>, o:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_optimize_get_lower_as_vector(c, o, idx)
    return ret
  public lostanza defn w_Z3_optimize_get_upper_as_vector (c:ptr<?>, o:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c Z3_optimize_get_upper_as_vector(c, o, idx)
    return ret
  public lostanza defn w_Z3_optimize_to_string (c:ptr<?>, o:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_optimize_to_string(c, o)
    return ret
  public lostanza defn w_Z3_optimize_from_string (c:ptr<?>, o:ptr<?>, s:ptr<byte>) -> ref<False> :
    call-c Z3_optimize_from_string(c, o, s)
    return false
  public lostanza defn w_Z3_optimize_from_file (c:ptr<?>, o:ptr<?>, s:ptr<byte>) -> ref<False> :
    call-c Z3_optimize_from_file(c, o, s)
    return false
  public lostanza defn w_Z3_optimize_get_help (c:ptr<?>, t:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_optimize_get_help(c, t)
    return ret
  public lostanza defn w_Z3_optimize_get_statistics (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_optimize_get_statistics(c, d)
    return ret
  public lostanza defn w_Z3_optimize_get_assertions (c:ptr<?>, o:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_optimize_get_assertions(c, o)
    return ret
  public lostanza defn w_Z3_optimize_get_objectives (c:ptr<?>, o:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_optimize_get_objectives(c, o)
    return ret
  public lostanza defn w_Z3_optimize_register_model_eh (c:ptr<?>, o:ptr<?>, m:ptr<?>, ctx:ptr<?>, model_eh:ptr<( (ptr<?>) -> int )>) -> ref<False> :
    call-c Z3_optimize_register_model_eh(c, o, m, ctx, model_eh)
    return false
  public lostanza defn w_Z3_mk_fpa_rounding_mode_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_rounding_mode_sort(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_nearest_ties_to_even (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_round_nearest_ties_to_even(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_rne (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_rne(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_nearest_ties_to_away (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_round_nearest_ties_to_away(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_rna (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_rna(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_toward_positive (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_round_toward_positive(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_rtp (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_rtp(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_toward_negative (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_round_toward_negative(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_rtn (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_rtn(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_toward_zero (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_round_toward_zero(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_rtz (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_rtz(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort (c:ptr<?>, ebits:int, sbits:int) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sort(c, ebits, sbits)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_half (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sort_half(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_16 (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sort_16(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_single (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sort_single(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_32 (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sort_32(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_double (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sort_double(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_64 (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sort_64(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_quadruple (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sort_quadruple(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_128 (c:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sort_128(c)
    return ret
  public lostanza defn w_Z3_mk_fpa_nan (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_nan(c, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_inf (c:ptr<?>, s:ptr<?>, negative:byte) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_inf(c, s, negative)
    return ret
  public lostanza defn w_Z3_mk_fpa_zero (c:ptr<?>, s:ptr<?>, negative:byte) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_zero(c, s, negative)
    return ret
  public lostanza defn w_Z3_mk_fpa_fp (c:ptr<?>, sgn:ptr<?>, exp:ptr<?>, sig:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_fp(c, sgn, exp, sig)
    return ret
  public lostanza defn w_Z3_mk_fpa_numeral_float (c:ptr<?>, v:float, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_numeral_float(c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_fpa_numeral_double (c:ptr<?>, v:double, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_numeral_double(c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_fpa_numeral_int (c:ptr<?>, v:int, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_numeral_int(c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_fpa_numeral_int_uint (c:ptr<?>, sgn:byte, exp:int, sig:int, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_numeral_int_uint(c, sgn, exp, sig, ty)
    return ret
  public lostanza defn w_Z3_mk_fpa_numeral_int64_uint64 (c:ptr<?>, sgn:byte, exp:long, sig:long, ty:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_numeral_int64_uint64(c, sgn, exp, sig, ty)
    return ret
  public lostanza defn w_Z3_mk_fpa_abs (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_abs(c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_neg (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_neg(c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_add (c:ptr<?>, rm:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_add(c, rm, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_sub (c:ptr<?>, rm:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sub(c, rm, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_mul (c:ptr<?>, rm:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_mul(c, rm, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_div (c:ptr<?>, rm:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_div(c, rm, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_fma (c:ptr<?>, rm:ptr<?>, t1:ptr<?>, t2:ptr<?>, t3:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_fma(c, rm, t1, t2, t3)
    return ret
  public lostanza defn w_Z3_mk_fpa_sqrt (c:ptr<?>, rm:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_sqrt(c, rm, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_rem (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_rem(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_to_integral (c:ptr<?>, rm:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_round_to_integral(c, rm, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_min (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_min(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_max (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_max(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_leq (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_leq(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_lt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_lt(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_geq (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_geq(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_gt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_gt(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_eq (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_eq(c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_normal (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_is_normal(c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_subnormal (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_is_subnormal(c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_zero (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_is_zero(c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_infinite (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_is_infinite(c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_nan (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_is_nan(c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_negative (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_is_negative(c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_positive (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_is_positive(c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_bv (c:ptr<?>, bv:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_to_fp_bv(c, bv, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_float (c:ptr<?>, rm:ptr<?>, t:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_to_fp_float(c, rm, t, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_real (c:ptr<?>, rm:ptr<?>, t:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_to_fp_real(c, rm, t, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_signed (c:ptr<?>, rm:ptr<?>, t:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_to_fp_signed(c, rm, t, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_unsigned (c:ptr<?>, rm:ptr<?>, t:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_to_fp_unsigned(c, rm, t, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_ubv (c:ptr<?>, rm:ptr<?>, t:ptr<?>, sz:int) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_to_ubv(c, rm, t, sz)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_sbv (c:ptr<?>, rm:ptr<?>, t:ptr<?>, sz:int) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_to_sbv(c, rm, t, sz)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_real (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_to_real(c, t)
    return ret
  public lostanza defn w_Z3_fpa_get_ebits (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c Z3_fpa_get_ebits(c, s)
    return ret
  public lostanza defn w_Z3_fpa_get_sbits (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c Z3_fpa_get_sbits(c, s)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_nan (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c Z3_fpa_is_numeral_nan(c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_inf (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c Z3_fpa_is_numeral_inf(c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_zero (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c Z3_fpa_is_numeral_zero(c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_normal (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c Z3_fpa_is_numeral_normal(c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_subnormal (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c Z3_fpa_is_numeral_subnormal(c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_positive (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c Z3_fpa_is_numeral_positive(c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_negative (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c Z3_fpa_is_numeral_negative(c, t)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_sign_bv (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fpa_get_numeral_sign_bv(c, t)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_significand_bv (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fpa_get_numeral_significand_bv(c, t)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_sign (c:ptr<?>, t:ptr<?>, sgn:ptr<int>) -> byte :
    val ret = call-c Z3_fpa_get_numeral_sign(c, t, sgn)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_significand_string (c:ptr<?>, t:ptr<?>) -> ptr<byte> :
    val ret = call-c Z3_fpa_get_numeral_significand_string(c, t)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_significand_uint64 (c:ptr<?>, t:ptr<?>, n:ptr<long>) -> byte :
    val ret = call-c Z3_fpa_get_numeral_significand_uint64(c, t, n)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_exponent_string (c:ptr<?>, t:ptr<?>, biased:byte) -> ptr<byte> :
    val ret = call-c Z3_fpa_get_numeral_exponent_string(c, t, biased)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_exponent_int64 (c:ptr<?>, t:ptr<?>, n:ptr<long>, biased:byte) -> byte :
    val ret = call-c Z3_fpa_get_numeral_exponent_int64(c, t, n, biased)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_exponent_bv (c:ptr<?>, t:ptr<?>, biased:byte) -> ptr<?> :
    val ret = call-c Z3_fpa_get_numeral_exponent_bv(c, t, biased)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_ieee_bv (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_to_ieee_bv(c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_int_real (c:ptr<?>, rm:ptr<?>, exp:ptr<?>, sig:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_mk_fpa_to_fp_int_real(c, rm, exp, sig, s)
    return ret
  public lostanza defn w_Z3_fixedpoint_query_from_lvl (c:ptr<?>, d:ptr<?>, query:ptr<?>, lvl:int) -> int :
    val ret = call-c Z3_fixedpoint_query_from_lvl(c, d, query, lvl)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_ground_sat_answer (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_get_ground_sat_answer(c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_rules_along_trace (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_get_rules_along_trace(c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_rule_names_along_trace (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_get_rule_names_along_trace(c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_add_invariant (c:ptr<?>, d:ptr<?>, pred:ptr<?>, property:ptr<?>) -> ref<False> :
    call-c Z3_fixedpoint_add_invariant(c, d, pred, property)
    return false
  public lostanza defn w_Z3_fixedpoint_get_reachable (c:ptr<?>, d:ptr<?>, pred:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_fixedpoint_get_reachable(c, d, pred)
    return ret
  public lostanza defn w_Z3_qe_model_project (c:ptr<?>, m:ptr<?>, num_bounds:int, bound:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_qe_model_project(c, m, num_bounds, bound, body)
    return ret
  public lostanza defn w_Z3_qe_model_project_skolem (c:ptr<?>, m:ptr<?>, num_bounds:int, bound:ptr<ptr<?>>, body:ptr<?>, map:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_qe_model_project_skolem(c, m, num_bounds, bound, body, map)
    return ret
  public lostanza defn w_Z3_model_extrapolate (c:ptr<?>, m:ptr<?>, fml:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_model_extrapolate(c, m, fml)
    return ret
  public lostanza defn w_Z3_qe_lite (c:ptr<?>, vars:ptr<?>, body:ptr<?>) -> ptr<?> :
    val ret = call-c Z3_qe_lite(c, vars, body)
    return ret
#else:
  val DEF_LIB_PATH = "./libz3.dll"
  val ENV_LIB_PATH_NAME = "Z3_SHARED_LIB"
  defn get-shared-lib () -> String :
    label<String> return:
      var sharedLib = get-env(ENV_LIB_PATH_NAME)
      match(sharedLib) :
        (fpath:String) :
          return(fpath)
        (x:False):
          return(DEF_LIB_PATH)
  
  val shlibPath = get-shared-lib()
  val shlib = dynamic-library-open(shlibPath)
  
  lostanza val p_Z3_global_param_set: ptr<((ptr<byte>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_global_param_set")).address
  
  lostanza val p_Z3_global_param_reset_all: ptr<(() -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_global_param_reset_all")).address
  
  lostanza val p_Z3_global_param_get: ptr<((ptr<byte>,ptr<ptr<byte>>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_global_param_get")).address
  
  lostanza val p_Z3_mk_config: ptr<(() -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_config")).address
  
  lostanza val p_Z3_del_config: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_del_config")).address
  
  lostanza val p_Z3_set_param_value: ptr<((ptr<?>,ptr<byte>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_set_param_value")).address
  
  lostanza val p_Z3_mk_context: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_context")).address
  
  lostanza val p_Z3_mk_context_rc: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_context_rc")).address
  
  lostanza val p_Z3_del_context: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_del_context")).address
  
  lostanza val p_Z3_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_inc_ref")).address
  
  lostanza val p_Z3_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_dec_ref")).address
  
  lostanza val p_Z3_update_param_value: ptr<((ptr<?>,ptr<byte>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_update_param_value")).address
  
  lostanza val p_Z3_get_global_param_descrs: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_global_param_descrs")).address
  
  lostanza val p_Z3_interrupt: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_interrupt")).address
  
  lostanza val p_Z3_enable_concurrent_dec_ref: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_enable_concurrent_dec_ref")).address
  
  lostanza val p_Z3_mk_params: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_params")).address
  
  lostanza val p_Z3_params_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_params_inc_ref")).address
  
  lostanza val p_Z3_params_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_params_dec_ref")).address
  
  lostanza val p_Z3_params_set_bool: ptr<((ptr<?>,ptr<?>,ptr<?>,byte) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_params_set_bool")).address
  
  lostanza val p_Z3_params_set_uint: ptr<((ptr<?>,ptr<?>,ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_params_set_uint")).address
  
  lostanza val p_Z3_params_set_double: ptr<((ptr<?>,ptr<?>,ptr<?>,double) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_params_set_double")).address
  
  lostanza val p_Z3_params_set_symbol: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_params_set_symbol")).address
  
  lostanza val p_Z3_params_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_params_to_string")).address
  
  lostanza val p_Z3_params_validate: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_params_validate")).address
  
  lostanza val p_Z3_param_descrs_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_param_descrs_inc_ref")).address
  
  lostanza val p_Z3_param_descrs_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_param_descrs_dec_ref")).address
  
  lostanza val p_Z3_param_descrs_get_kind: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_param_descrs_get_kind")).address
  
  lostanza val p_Z3_param_descrs_size: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_param_descrs_size")).address
  
  lostanza val p_Z3_param_descrs_get_name: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_param_descrs_get_name")).address
  
  lostanza val p_Z3_param_descrs_get_documentation: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_param_descrs_get_documentation")).address
  
  lostanza val p_Z3_param_descrs_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_param_descrs_to_string")).address
  
  lostanza val p_Z3_mk_int_symbol: ptr<((ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_int_symbol")).address
  
  lostanza val p_Z3_mk_string_symbol: ptr<((ptr<?>,ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_string_symbol")).address
  
  lostanza val p_Z3_mk_uninterpreted_sort: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_uninterpreted_sort")).address
  
  lostanza val p_Z3_mk_bool_sort: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bool_sort")).address
  
  lostanza val p_Z3_mk_int_sort: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_int_sort")).address
  
  lostanza val p_Z3_mk_real_sort: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_real_sort")).address
  
  lostanza val p_Z3_mk_bv_sort: ptr<((ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bv_sort")).address
  
  lostanza val p_Z3_mk_finite_domain_sort: ptr<((ptr<?>,ptr<?>,long) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_finite_domain_sort")).address
  
  lostanza val p_Z3_mk_array_sort: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_array_sort")).address
  
  lostanza val p_Z3_mk_array_sort_n: ptr<((ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_array_sort_n")).address
  
  lostanza val p_Z3_mk_tuple_sort: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_tuple_sort")).address
  
  lostanza val p_Z3_mk_enumeration_sort: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_enumeration_sort")).address
  
  lostanza val p_Z3_mk_list_sort: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_list_sort")).address
  
  lostanza val p_Z3_mk_constructor: ptr<((ptr<?>,ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<int>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_constructor")).address
  
  lostanza val p_Z3_del_constructor: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_del_constructor")).address
  
  lostanza val p_Z3_mk_datatype: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_datatype")).address
  
  lostanza val p_Z3_mk_datatype_sort: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_datatype_sort")).address
  
  lostanza val p_Z3_mk_constructor_list: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_constructor_list")).address
  
  lostanza val p_Z3_del_constructor_list: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_del_constructor_list")).address
  
  lostanza val p_Z3_mk_datatypes: ptr<((ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_datatypes")).address
  
  lostanza val p_Z3_query_constructor: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<ptr<?>>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_query_constructor")).address
  
  lostanza val p_Z3_mk_func_decl: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_func_decl")).address
  
  lostanza val p_Z3_mk_app: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_app")).address
  
  lostanza val p_Z3_mk_const: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_const")).address
  
  lostanza val p_Z3_mk_fresh_func_decl: ptr<((ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fresh_func_decl")).address
  
  lostanza val p_Z3_mk_fresh_const: ptr<((ptr<?>,ptr<byte>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fresh_const")).address
  
  lostanza val p_Z3_mk_rec_func_decl: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_rec_func_decl")).address
  
  lostanza val p_Z3_add_rec_def: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_add_rec_def")).address
  
  lostanza val p_Z3_mk_true: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_true")).address
  
  lostanza val p_Z3_mk_false: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_false")).address
  
  lostanza val p_Z3_mk_eq: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_eq")).address
  
  lostanza val p_Z3_mk_distinct: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_distinct")).address
  
  lostanza val p_Z3_mk_not: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_not")).address
  
  lostanza val p_Z3_mk_ite: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_ite")).address
  
  lostanza val p_Z3_mk_iff: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_iff")).address
  
  lostanza val p_Z3_mk_implies: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_implies")).address
  
  lostanza val p_Z3_mk_xor: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_xor")).address
  
  lostanza val p_Z3_mk_and: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_and")).address
  
  lostanza val p_Z3_mk_or: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_or")).address
  
  lostanza val p_Z3_mk_add: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_add")).address
  
  lostanza val p_Z3_mk_mul: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_mul")).address
  
  lostanza val p_Z3_mk_sub: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_sub")).address
  
  lostanza val p_Z3_mk_unary_minus: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_unary_minus")).address
  
  lostanza val p_Z3_mk_div: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_div")).address
  
  lostanza val p_Z3_mk_mod: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_mod")).address
  
  lostanza val p_Z3_mk_rem: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_rem")).address
  
  lostanza val p_Z3_mk_power: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_power")).address
  
  lostanza val p_Z3_mk_lt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_lt")).address
  
  lostanza val p_Z3_mk_le: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_le")).address
  
  lostanza val p_Z3_mk_gt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_gt")).address
  
  lostanza val p_Z3_mk_ge: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_ge")).address
  
  lostanza val p_Z3_mk_divides: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_divides")).address
  
  lostanza val p_Z3_mk_int2real: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_int2real")).address
  
  lostanza val p_Z3_mk_real2int: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_real2int")).address
  
  lostanza val p_Z3_mk_is_int: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_is_int")).address
  
  lostanza val p_Z3_mk_bvnot: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvnot")).address
  
  lostanza val p_Z3_mk_bvredand: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvredand")).address
  
  lostanza val p_Z3_mk_bvredor: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvredor")).address
  
  lostanza val p_Z3_mk_bvand: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvand")).address
  
  lostanza val p_Z3_mk_bvor: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvor")).address
  
  lostanza val p_Z3_mk_bvxor: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvxor")).address
  
  lostanza val p_Z3_mk_bvnand: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvnand")).address
  
  lostanza val p_Z3_mk_bvnor: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvnor")).address
  
  lostanza val p_Z3_mk_bvxnor: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvxnor")).address
  
  lostanza val p_Z3_mk_bvneg: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvneg")).address
  
  lostanza val p_Z3_mk_bvadd: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvadd")).address
  
  lostanza val p_Z3_mk_bvsub: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvsub")).address
  
  lostanza val p_Z3_mk_bvmul: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvmul")).address
  
  lostanza val p_Z3_mk_bvudiv: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvudiv")).address
  
  lostanza val p_Z3_mk_bvsdiv: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvsdiv")).address
  
  lostanza val p_Z3_mk_bvurem: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvurem")).address
  
  lostanza val p_Z3_mk_bvsrem: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvsrem")).address
  
  lostanza val p_Z3_mk_bvsmod: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvsmod")).address
  
  lostanza val p_Z3_mk_bvult: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvult")).address
  
  lostanza val p_Z3_mk_bvslt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvslt")).address
  
  lostanza val p_Z3_mk_bvule: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvule")).address
  
  lostanza val p_Z3_mk_bvsle: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvsle")).address
  
  lostanza val p_Z3_mk_bvuge: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvuge")).address
  
  lostanza val p_Z3_mk_bvsge: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvsge")).address
  
  lostanza val p_Z3_mk_bvugt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvugt")).address
  
  lostanza val p_Z3_mk_bvsgt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvsgt")).address
  
  lostanza val p_Z3_mk_concat: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_concat")).address
  
  lostanza val p_Z3_mk_extract: ptr<((ptr<?>,int,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_extract")).address
  
  lostanza val p_Z3_mk_sign_ext: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_sign_ext")).address
  
  lostanza val p_Z3_mk_zero_ext: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_zero_ext")).address
  
  lostanza val p_Z3_mk_repeat: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_repeat")).address
  
  lostanza val p_Z3_mk_bit2bool: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bit2bool")).address
  
  lostanza val p_Z3_mk_bvshl: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvshl")).address
  
  lostanza val p_Z3_mk_bvlshr: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvlshr")).address
  
  lostanza val p_Z3_mk_bvashr: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvashr")).address
  
  lostanza val p_Z3_mk_rotate_left: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_rotate_left")).address
  
  lostanza val p_Z3_mk_rotate_right: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_rotate_right")).address
  
  lostanza val p_Z3_mk_ext_rotate_left: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_ext_rotate_left")).address
  
  lostanza val p_Z3_mk_ext_rotate_right: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_ext_rotate_right")).address
  
  lostanza val p_Z3_mk_int2bv: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_int2bv")).address
  
  lostanza val p_Z3_mk_bv2int: ptr<((ptr<?>,ptr<?>,byte) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bv2int")).address
  
  lostanza val p_Z3_mk_bvadd_no_overflow: ptr<((ptr<?>,ptr<?>,ptr<?>,byte) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvadd_no_overflow")).address
  
  lostanza val p_Z3_mk_bvadd_no_underflow: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvadd_no_underflow")).address
  
  lostanza val p_Z3_mk_bvsub_no_overflow: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvsub_no_overflow")).address
  
  lostanza val p_Z3_mk_bvsub_no_underflow: ptr<((ptr<?>,ptr<?>,ptr<?>,byte) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvsub_no_underflow")).address
  
  lostanza val p_Z3_mk_bvsdiv_no_overflow: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvsdiv_no_overflow")).address
  
  lostanza val p_Z3_mk_bvneg_no_overflow: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvneg_no_overflow")).address
  
  lostanza val p_Z3_mk_bvmul_no_overflow: ptr<((ptr<?>,ptr<?>,ptr<?>,byte) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvmul_no_overflow")).address
  
  lostanza val p_Z3_mk_bvmul_no_underflow: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bvmul_no_underflow")).address
  
  lostanza val p_Z3_mk_select: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_select")).address
  
  lostanza val p_Z3_mk_select_n: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_select_n")).address
  
  lostanza val p_Z3_mk_store: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_store")).address
  
  lostanza val p_Z3_mk_store_n: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_store_n")).address
  
  lostanza val p_Z3_mk_const_array: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_const_array")).address
  
  lostanza val p_Z3_mk_map: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_map")).address
  
  lostanza val p_Z3_mk_array_default: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_array_default")).address
  
  lostanza val p_Z3_mk_as_array: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_as_array")).address
  
  lostanza val p_Z3_mk_set_has_size: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_set_has_size")).address
  
  lostanza val p_Z3_mk_set_sort: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_set_sort")).address
  
  lostanza val p_Z3_mk_empty_set: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_empty_set")).address
  
  lostanza val p_Z3_mk_full_set: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_full_set")).address
  
  lostanza val p_Z3_mk_set_add: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_set_add")).address
  
  lostanza val p_Z3_mk_set_del: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_set_del")).address
  
  lostanza val p_Z3_mk_set_union: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_set_union")).address
  
  lostanza val p_Z3_mk_set_intersect: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_set_intersect")).address
  
  lostanza val p_Z3_mk_set_difference: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_set_difference")).address
  
  lostanza val p_Z3_mk_set_complement: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_set_complement")).address
  
  lostanza val p_Z3_mk_set_member: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_set_member")).address
  
  lostanza val p_Z3_mk_set_subset: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_set_subset")).address
  
  lostanza val p_Z3_mk_array_ext: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_array_ext")).address
  
  lostanza val p_Z3_mk_numeral: ptr<((ptr<?>,ptr<byte>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_numeral")).address
  
  lostanza val p_Z3_mk_real: ptr<((ptr<?>,int,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_real")).address
  
  lostanza val p_Z3_mk_int: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_int")).address
  
  lostanza val p_Z3_mk_unsigned_int: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_unsigned_int")).address
  
  lostanza val p_Z3_mk_int64: ptr<((ptr<?>,long,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_int64")).address
  
  lostanza val p_Z3_mk_unsigned_int64: ptr<((ptr<?>,long,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_unsigned_int64")).address
  
  lostanza val p_Z3_mk_bv_numeral: ptr<((ptr<?>,int,ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bv_numeral")).address
  
  lostanza val p_Z3_mk_seq_sort: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_sort")).address
  
  lostanza val p_Z3_is_seq_sort: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_seq_sort")).address
  
  lostanza val p_Z3_get_seq_sort_basis: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_seq_sort_basis")).address
  
  lostanza val p_Z3_mk_re_sort: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_sort")).address
  
  lostanza val p_Z3_is_re_sort: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_re_sort")).address
  
  lostanza val p_Z3_get_re_sort_basis: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_re_sort_basis")).address
  
  lostanza val p_Z3_mk_string_sort: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_string_sort")).address
  
  lostanza val p_Z3_mk_char_sort: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_char_sort")).address
  
  lostanza val p_Z3_is_string_sort: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_string_sort")).address
  
  lostanza val p_Z3_is_char_sort: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_char_sort")).address
  
  lostanza val p_Z3_mk_string: ptr<((ptr<?>,ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_string")).address
  
  lostanza val p_Z3_mk_lstring: ptr<((ptr<?>,int,ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_lstring")).address
  
  lostanza val p_Z3_mk_u32string: ptr<((ptr<?>,int,ptr<int>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_u32string")).address
  
  lostanza val p_Z3_is_string: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_string")).address
  
  lostanza val p_Z3_get_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_string")).address
  
  lostanza val p_Z3_get_lstring: ptr<((ptr<?>,ptr<?>,ptr<int>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_lstring")).address
  
  lostanza val p_Z3_get_string_length: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_string_length")).address
  
  lostanza val p_Z3_get_string_contents: ptr<((ptr<?>,ptr<?>,int,ptr<int>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_string_contents")).address
  
  lostanza val p_Z3_mk_seq_empty: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_empty")).address
  
  lostanza val p_Z3_mk_seq_unit: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_unit")).address
  
  lostanza val p_Z3_mk_seq_concat: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_concat")).address
  
  lostanza val p_Z3_mk_seq_prefix: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_prefix")).address
  
  lostanza val p_Z3_mk_seq_suffix: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_suffix")).address
  
  lostanza val p_Z3_mk_seq_contains: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_contains")).address
  
  lostanza val p_Z3_mk_str_lt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_str_lt")).address
  
  lostanza val p_Z3_mk_str_le: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_str_le")).address
  
  lostanza val p_Z3_mk_seq_extract: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_extract")).address
  
  lostanza val p_Z3_mk_seq_replace: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_replace")).address
  
  lostanza val p_Z3_mk_seq_at: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_at")).address
  
  lostanza val p_Z3_mk_seq_nth: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_nth")).address
  
  lostanza val p_Z3_mk_seq_length: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_length")).address
  
  lostanza val p_Z3_mk_seq_index: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_index")).address
  
  lostanza val p_Z3_mk_seq_last_index: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_last_index")).address
  
  lostanza val p_Z3_mk_str_to_int: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_str_to_int")).address
  
  lostanza val p_Z3_mk_int_to_str: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_int_to_str")).address
  
  lostanza val p_Z3_mk_string_to_code: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_string_to_code")).address
  
  lostanza val p_Z3_mk_string_from_code: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_string_from_code")).address
  
  lostanza val p_Z3_mk_ubv_to_str: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_ubv_to_str")).address
  
  lostanza val p_Z3_mk_sbv_to_str: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_sbv_to_str")).address
  
  lostanza val p_Z3_mk_seq_to_re: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_to_re")).address
  
  lostanza val p_Z3_mk_seq_in_re: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_seq_in_re")).address
  
  lostanza val p_Z3_mk_re_plus: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_plus")).address
  
  lostanza val p_Z3_mk_re_star: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_star")).address
  
  lostanza val p_Z3_mk_re_option: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_option")).address
  
  lostanza val p_Z3_mk_re_union: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_union")).address
  
  lostanza val p_Z3_mk_re_concat: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_concat")).address
  
  lostanza val p_Z3_mk_re_range: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_range")).address
  
  lostanza val p_Z3_mk_re_allchar: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_allchar")).address
  
  lostanza val p_Z3_mk_re_loop: ptr<((ptr<?>,ptr<?>,int,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_loop")).address
  
  lostanza val p_Z3_mk_re_power: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_power")).address
  
  lostanza val p_Z3_mk_re_intersect: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_intersect")).address
  
  lostanza val p_Z3_mk_re_complement: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_complement")).address
  
  lostanza val p_Z3_mk_re_diff: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_diff")).address
  
  lostanza val p_Z3_mk_re_empty: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_empty")).address
  
  lostanza val p_Z3_mk_re_full: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_re_full")).address
  
  lostanza val p_Z3_mk_char: ptr<((ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_char")).address
  
  lostanza val p_Z3_mk_char_le: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_char_le")).address
  
  lostanza val p_Z3_mk_char_to_int: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_char_to_int")).address
  
  lostanza val p_Z3_mk_char_to_bv: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_char_to_bv")).address
  
  lostanza val p_Z3_mk_char_from_bv: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_char_from_bv")).address
  
  lostanza val p_Z3_mk_char_is_digit: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_char_is_digit")).address
  
  lostanza val p_Z3_mk_linear_order: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_linear_order")).address
  
  lostanza val p_Z3_mk_partial_order: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_partial_order")).address
  
  lostanza val p_Z3_mk_piecewise_linear_order: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_piecewise_linear_order")).address
  
  lostanza val p_Z3_mk_tree_order: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_tree_order")).address
  
  lostanza val p_Z3_mk_transitive_closure: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_transitive_closure")).address
  
  lostanza val p_Z3_mk_pattern: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_pattern")).address
  
  lostanza val p_Z3_mk_bound: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_bound")).address
  
  lostanza val p_Z3_mk_forall: ptr<((ptr<?>,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_forall")).address
  
  lostanza val p_Z3_mk_exists: ptr<((ptr<?>,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_exists")).address
  
  lostanza val p_Z3_mk_quantifier: ptr<((ptr<?>,byte,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_quantifier")).address
  
  lostanza val p_Z3_mk_quantifier_ex: ptr<((ptr<?>,byte,int,ptr<?>,ptr<?>,int,ptr<ptr<?>>,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_quantifier_ex")).address
  
  lostanza val p_Z3_mk_forall_const: ptr<((ptr<?>,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_forall_const")).address
  
  lostanza val p_Z3_mk_exists_const: ptr<((ptr<?>,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_exists_const")).address
  
  lostanza val p_Z3_mk_quantifier_const: ptr<((ptr<?>,byte,int,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_quantifier_const")).address
  
  lostanza val p_Z3_mk_quantifier_const_ex: ptr<((ptr<?>,byte,int,ptr<?>,ptr<?>,int,ptr<ptr<?>>,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_quantifier_const_ex")).address
  
  lostanza val p_Z3_mk_lambda: ptr<((ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_lambda")).address
  
  lostanza val p_Z3_mk_lambda_const: ptr<((ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_lambda_const")).address
  
  lostanza val p_Z3_get_symbol_kind: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_symbol_kind")).address
  
  lostanza val p_Z3_get_symbol_int: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_symbol_int")).address
  
  lostanza val p_Z3_get_symbol_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_symbol_string")).address
  
  lostanza val p_Z3_get_sort_name: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_sort_name")).address
  
  lostanza val p_Z3_get_sort_id: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_sort_id")).address
  
  lostanza val p_Z3_sort_to_ast: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_sort_to_ast")).address
  
  lostanza val p_Z3_is_eq_sort: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_eq_sort")).address
  
  lostanza val p_Z3_get_sort_kind: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_sort_kind")).address
  
  lostanza val p_Z3_get_bv_sort_size: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_bv_sort_size")).address
  
  lostanza val p_Z3_get_finite_domain_sort_size: ptr<((ptr<?>,ptr<?>,ptr<long>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_get_finite_domain_sort_size")).address
  
  lostanza val p_Z3_get_array_sort_domain: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_array_sort_domain")).address
  
  lostanza val p_Z3_get_array_sort_domain_n: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_array_sort_domain_n")).address
  
  lostanza val p_Z3_get_array_sort_range: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_array_sort_range")).address
  
  lostanza val p_Z3_get_tuple_sort_mk_decl: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_tuple_sort_mk_decl")).address
  
  lostanza val p_Z3_get_tuple_sort_num_fields: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_tuple_sort_num_fields")).address
  
  lostanza val p_Z3_get_tuple_sort_field_decl: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_tuple_sort_field_decl")).address
  
  lostanza val p_Z3_get_datatype_sort_num_constructors: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_datatype_sort_num_constructors")).address
  
  lostanza val p_Z3_get_datatype_sort_constructor: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_datatype_sort_constructor")).address
  
  lostanza val p_Z3_get_datatype_sort_recognizer: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_datatype_sort_recognizer")).address
  
  lostanza val p_Z3_get_datatype_sort_constructor_accessor: ptr<((ptr<?>,ptr<?>,int,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_datatype_sort_constructor_accessor")).address
  
  lostanza val p_Z3_datatype_update_field: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_datatype_update_field")).address
  
  lostanza val p_Z3_get_relation_arity: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_relation_arity")).address
  
  lostanza val p_Z3_get_relation_column: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_relation_column")).address
  
  lostanza val p_Z3_mk_atmost: ptr<((ptr<?>,int,ptr<ptr<?>>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_atmost")).address
  
  lostanza val p_Z3_mk_atleast: ptr<((ptr<?>,int,ptr<ptr<?>>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_atleast")).address
  
  lostanza val p_Z3_mk_pble: ptr<((ptr<?>,int,ptr<ptr<?>>,ptr<int>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_pble")).address
  
  lostanza val p_Z3_mk_pbge: ptr<((ptr<?>,int,ptr<ptr<?>>,ptr<int>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_pbge")).address
  
  lostanza val p_Z3_mk_pbeq: ptr<((ptr<?>,int,ptr<ptr<?>>,ptr<int>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_pbeq")).address
  
  lostanza val p_Z3_func_decl_to_ast: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_func_decl_to_ast")).address
  
  lostanza val p_Z3_is_eq_func_decl: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_eq_func_decl")).address
  
  lostanza val p_Z3_get_func_decl_id: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_func_decl_id")).address
  
  lostanza val p_Z3_get_decl_name: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_name")).address
  
  lostanza val p_Z3_get_decl_kind: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_kind")).address
  
  lostanza val p_Z3_get_domain_size: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_domain_size")).address
  
  lostanza val p_Z3_get_arity: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_arity")).address
  
  lostanza val p_Z3_get_domain: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_domain")).address
  
  lostanza val p_Z3_get_range: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_range")).address
  
  lostanza val p_Z3_get_decl_num_parameters: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_num_parameters")).address
  
  lostanza val p_Z3_get_decl_parameter_kind: ptr<((ptr<?>,ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_parameter_kind")).address
  
  lostanza val p_Z3_get_decl_int_parameter: ptr<((ptr<?>,ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_int_parameter")).address
  
  lostanza val p_Z3_get_decl_double_parameter: ptr<((ptr<?>,ptr<?>,int) -> double)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_double_parameter")).address
  
  lostanza val p_Z3_get_decl_symbol_parameter: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_symbol_parameter")).address
  
  lostanza val p_Z3_get_decl_sort_parameter: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_sort_parameter")).address
  
  lostanza val p_Z3_get_decl_ast_parameter: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_ast_parameter")).address
  
  lostanza val p_Z3_get_decl_func_decl_parameter: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_func_decl_parameter")).address
  
  lostanza val p_Z3_get_decl_rational_parameter: ptr<((ptr<?>,ptr<?>,int) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_decl_rational_parameter")).address
  
  lostanza val p_Z3_app_to_ast: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_app_to_ast")).address
  
  lostanza val p_Z3_get_app_decl: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_app_decl")).address
  
  lostanza val p_Z3_get_app_num_args: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_app_num_args")).address
  
  lostanza val p_Z3_get_app_arg: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_app_arg")).address
  
  lostanza val p_Z3_is_eq_ast: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_eq_ast")).address
  
  lostanza val p_Z3_get_ast_id: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_ast_id")).address
  
  lostanza val p_Z3_get_ast_hash: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_ast_hash")).address
  
  lostanza val p_Z3_get_sort: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_sort")).address
  
  lostanza val p_Z3_is_well_sorted: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_well_sorted")).address
  
  lostanza val p_Z3_get_bool_value: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_bool_value")).address
  
  lostanza val p_Z3_get_ast_kind: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_ast_kind")).address
  
  lostanza val p_Z3_is_app: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_app")).address
  
  lostanza val p_Z3_is_numeral_ast: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_numeral_ast")).address
  
  lostanza val p_Z3_is_algebraic_number: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_algebraic_number")).address
  
  lostanza val p_Z3_to_app: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_to_app")).address
  
  lostanza val p_Z3_to_func_decl: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_to_func_decl")).address
  
  lostanza val p_Z3_get_numeral_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numeral_string")).address
  
  lostanza val p_Z3_get_numeral_binary_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numeral_binary_string")).address
  
  lostanza val p_Z3_get_numeral_decimal_string: ptr<((ptr<?>,ptr<?>,int) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numeral_decimal_string")).address
  
  lostanza val p_Z3_get_numeral_double: ptr<((ptr<?>,ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numeral_double")).address
  
  lostanza val p_Z3_get_numerator: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numerator")).address
  
  lostanza val p_Z3_get_denominator: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_denominator")).address
  
  lostanza val p_Z3_get_numeral_small: ptr<((ptr<?>,ptr<?>,ptr<long>,ptr<long>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numeral_small")).address
  
  lostanza val p_Z3_get_numeral_int: ptr<((ptr<?>,ptr<?>,ptr<int>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numeral_int")).address
  
  lostanza val p_Z3_get_numeral_uint: ptr<((ptr<?>,ptr<?>,ptr<int>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numeral_uint")).address
  
  lostanza val p_Z3_get_numeral_uint64: ptr<((ptr<?>,ptr<?>,ptr<long>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numeral_uint64")).address
  
  lostanza val p_Z3_get_numeral_int64: ptr<((ptr<?>,ptr<?>,ptr<long>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numeral_int64")).address
  
  lostanza val p_Z3_get_numeral_rational_int64: ptr<((ptr<?>,ptr<?>,ptr<long>,ptr<long>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_get_numeral_rational_int64")).address
  
  lostanza val p_Z3_get_algebraic_number_lower: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_algebraic_number_lower")).address
  
  lostanza val p_Z3_get_algebraic_number_upper: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_algebraic_number_upper")).address
  
  lostanza val p_Z3_pattern_to_ast: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_pattern_to_ast")).address
  
  lostanza val p_Z3_get_pattern_num_terms: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_pattern_num_terms")).address
  
  lostanza val p_Z3_get_pattern: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_pattern")).address
  
  lostanza val p_Z3_get_index_value: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_index_value")).address
  
  lostanza val p_Z3_is_quantifier_forall: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_quantifier_forall")).address
  
  lostanza val p_Z3_is_quantifier_exists: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_quantifier_exists")).address
  
  lostanza val p_Z3_is_lambda: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_lambda")).address
  
  lostanza val p_Z3_get_quantifier_weight: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_quantifier_weight")).address
  
  lostanza val p_Z3_get_quantifier_num_patterns: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_quantifier_num_patterns")).address
  
  lostanza val p_Z3_get_quantifier_pattern_ast: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_quantifier_pattern_ast")).address
  
  lostanza val p_Z3_get_quantifier_num_no_patterns: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_quantifier_num_no_patterns")).address
  
  lostanza val p_Z3_get_quantifier_no_pattern_ast: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_quantifier_no_pattern_ast")).address
  
  lostanza val p_Z3_get_quantifier_num_bound: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_quantifier_num_bound")).address
  
  lostanza val p_Z3_get_quantifier_bound_name: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_quantifier_bound_name")).address
  
  lostanza val p_Z3_get_quantifier_bound_sort: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_quantifier_bound_sort")).address
  
  lostanza val p_Z3_get_quantifier_body: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_quantifier_body")).address
  
  lostanza val p_Z3_simplify: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_simplify")).address
  
  lostanza val p_Z3_simplify_ex: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_simplify_ex")).address
  
  lostanza val p_Z3_simplify_get_help: ptr<((ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_simplify_get_help")).address
  
  lostanza val p_Z3_simplify_get_param_descrs: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_simplify_get_param_descrs")).address
  
  lostanza val p_Z3_update_term: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_update_term")).address
  
  lostanza val p_Z3_substitute: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_substitute")).address
  
  lostanza val p_Z3_substitute_vars: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_substitute_vars")).address
  
  lostanza val p_Z3_substitute_funs: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_substitute_funs")).address
  
  lostanza val p_Z3_translate: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_translate")).address
  
  lostanza val p_Z3_mk_model: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_model")).address
  
  lostanza val p_Z3_model_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_model_inc_ref")).address
  
  lostanza val p_Z3_model_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_model_dec_ref")).address
  
  lostanza val p_Z3_model_eval: ptr<((ptr<?>,ptr<?>,ptr<?>,byte,ptr<ptr<?>>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_model_eval")).address
  
  lostanza val p_Z3_model_get_const_interp: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_model_get_const_interp")).address
  
  lostanza val p_Z3_model_has_interp: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_model_has_interp")).address
  
  lostanza val p_Z3_model_get_func_interp: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_model_get_func_interp")).address
  
  lostanza val p_Z3_model_get_num_consts: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_model_get_num_consts")).address
  
  lostanza val p_Z3_model_get_const_decl: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_model_get_const_decl")).address
  
  lostanza val p_Z3_model_get_num_funcs: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_model_get_num_funcs")).address
  
  lostanza val p_Z3_model_get_func_decl: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_model_get_func_decl")).address
  
  lostanza val p_Z3_model_get_num_sorts: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_model_get_num_sorts")).address
  
  lostanza val p_Z3_model_get_sort: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_model_get_sort")).address
  
  lostanza val p_Z3_model_get_sort_universe: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_model_get_sort_universe")).address
  
  lostanza val p_Z3_model_translate: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_model_translate")).address
  
  lostanza val p_Z3_is_as_array: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_is_as_array")).address
  
  lostanza val p_Z3_get_as_array_func_decl: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_as_array_func_decl")).address
  
  lostanza val p_Z3_add_func_interp: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_add_func_interp")).address
  
  lostanza val p_Z3_add_const_interp: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_add_const_interp")).address
  
  lostanza val p_Z3_func_interp_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_func_interp_inc_ref")).address
  
  lostanza val p_Z3_func_interp_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_func_interp_dec_ref")).address
  
  lostanza val p_Z3_func_interp_get_num_entries: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_func_interp_get_num_entries")).address
  
  lostanza val p_Z3_func_interp_get_entry: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_func_interp_get_entry")).address
  
  lostanza val p_Z3_func_interp_get_else: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_func_interp_get_else")).address
  
  lostanza val p_Z3_func_interp_set_else: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_func_interp_set_else")).address
  
  lostanza val p_Z3_func_interp_get_arity: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_func_interp_get_arity")).address
  
  lostanza val p_Z3_func_interp_add_entry: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_func_interp_add_entry")).address
  
  lostanza val p_Z3_func_entry_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_func_entry_inc_ref")).address
  
  lostanza val p_Z3_func_entry_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_func_entry_dec_ref")).address
  
  lostanza val p_Z3_func_entry_get_value: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_func_entry_get_value")).address
  
  lostanza val p_Z3_func_entry_get_num_args: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_func_entry_get_num_args")).address
  
  lostanza val p_Z3_func_entry_get_arg: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_func_entry_get_arg")).address
  
  lostanza val p_Z3_open_log: ptr<((ptr<byte>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_open_log")).address
  
  lostanza val p_Z3_append_log: ptr<((ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_append_log")).address
  
  lostanza val p_Z3_close_log: ptr<(() -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_close_log")).address
  
  lostanza val p_Z3_toggle_warning_messages: ptr<((byte) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_toggle_warning_messages")).address
  
  lostanza val p_Z3_set_ast_print_mode: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_set_ast_print_mode")).address
  
  lostanza val p_Z3_ast_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_to_string")).address
  
  lostanza val p_Z3_pattern_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_pattern_to_string")).address
  
  lostanza val p_Z3_sort_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_sort_to_string")).address
  
  lostanza val p_Z3_func_decl_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_func_decl_to_string")).address
  
  lostanza val p_Z3_model_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_model_to_string")).address
  
  lostanza val p_Z3_benchmark_to_smtlib_string: ptr<((ptr<?>,ptr<byte>,ptr<byte>,ptr<byte>,ptr<byte>,int,ptr<ptr<?>>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_benchmark_to_smtlib_string")).address
  
  lostanza val p_Z3_parse_smtlib2_string: ptr<((ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_parse_smtlib2_string")).address
  
  lostanza val p_Z3_parse_smtlib2_file: ptr<((ptr<?>,ptr<byte>,int,ptr<ptr<?>>,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_parse_smtlib2_file")).address
  
  lostanza val p_Z3_eval_smtlib2_string: ptr<((ptr<?>,ptr<byte>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_eval_smtlib2_string")).address
  
  lostanza val p_Z3_mk_parser_context: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_parser_context")).address
  
  lostanza val p_Z3_parser_context_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_parser_context_inc_ref")).address
  
  lostanza val p_Z3_parser_context_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_parser_context_dec_ref")).address
  
  lostanza val p_Z3_parser_context_add_sort: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_parser_context_add_sort")).address
  
  lostanza val p_Z3_parser_context_add_decl: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_parser_context_add_decl")).address
  
  lostanza val p_Z3_parser_context_from_string: ptr<((ptr<?>,ptr<?>,ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_parser_context_from_string")).address
  
  lostanza val p_Z3_get_error_code: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_error_code")).address
  
  lostanza val p_Z3_set_error_handler: ptr<((ptr<?>,ptr<( (ptr<?>,int) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_set_error_handler")).address
  
  lostanza val p_Z3_set_error: ptr<((ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_set_error")).address
  
  lostanza val p_Z3_get_error_msg: ptr<((ptr<?>,int) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_error_msg")).address
  
  lostanza val p_Z3_get_version: ptr<((ptr<int>,ptr<int>,ptr<int>,ptr<int>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_version")).address
  
  lostanza val p_Z3_get_full_version: ptr<(() -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_full_version")).address
  
  lostanza val p_Z3_enable_trace: ptr<((ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_enable_trace")).address
  
  lostanza val p_Z3_disable_trace: ptr<((ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_disable_trace")).address
  
  lostanza val p_Z3_reset_memory: ptr<(() -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_reset_memory")).address
  
  lostanza val p_Z3_finalize_memory: ptr<(() -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_finalize_memory")).address
  
  lostanza val p_Z3_mk_goal: ptr<((ptr<?>,byte,byte,byte) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_goal")).address
  
  lostanza val p_Z3_goal_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_inc_ref")).address
  
  lostanza val p_Z3_goal_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_dec_ref")).address
  
  lostanza val p_Z3_goal_precision: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_precision")).address
  
  lostanza val p_Z3_goal_assert: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_assert")).address
  
  lostanza val p_Z3_goal_inconsistent: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_inconsistent")).address
  
  lostanza val p_Z3_goal_depth: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_depth")).address
  
  lostanza val p_Z3_goal_reset: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_reset")).address
  
  lostanza val p_Z3_goal_size: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_size")).address
  
  lostanza val p_Z3_goal_formula: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_formula")).address
  
  lostanza val p_Z3_goal_num_exprs: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_num_exprs")).address
  
  lostanza val p_Z3_goal_is_decided_sat: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_is_decided_sat")).address
  
  lostanza val p_Z3_goal_is_decided_unsat: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_is_decided_unsat")).address
  
  lostanza val p_Z3_goal_translate: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_translate")).address
  
  lostanza val p_Z3_goal_convert_model: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_convert_model")).address
  
  lostanza val p_Z3_goal_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_to_string")).address
  
  lostanza val p_Z3_goal_to_dimacs_string: ptr<((ptr<?>,ptr<?>,byte) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_goal_to_dimacs_string")).address
  
  lostanza val p_Z3_mk_tactic: ptr<((ptr<?>,ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_tactic")).address
  
  lostanza val p_Z3_tactic_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_inc_ref")).address
  
  lostanza val p_Z3_tactic_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_dec_ref")).address
  
  lostanza val p_Z3_mk_probe: ptr<((ptr<?>,ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_probe")).address
  
  lostanza val p_Z3_probe_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_inc_ref")).address
  
  lostanza val p_Z3_probe_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_dec_ref")).address
  
  lostanza val p_Z3_tactic_and_then: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_and_then")).address
  
  lostanza val p_Z3_tactic_or_else: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_or_else")).address
  
  lostanza val p_Z3_tactic_par_or: ptr<((ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_par_or")).address
  
  lostanza val p_Z3_tactic_par_and_then: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_par_and_then")).address
  
  lostanza val p_Z3_tactic_try_for: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_try_for")).address
  
  lostanza val p_Z3_tactic_when: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_when")).address
  
  lostanza val p_Z3_tactic_cond: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_cond")).address
  
  lostanza val p_Z3_tactic_repeat: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_repeat")).address
  
  lostanza val p_Z3_tactic_skip: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_skip")).address
  
  lostanza val p_Z3_tactic_fail: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_fail")).address
  
  lostanza val p_Z3_tactic_fail_if: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_fail_if")).address
  
  lostanza val p_Z3_tactic_fail_if_not_decided: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_fail_if_not_decided")).address
  
  lostanza val p_Z3_tactic_using_params: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_using_params")).address
  
  lostanza val p_Z3_probe_const: ptr<((ptr<?>,double) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_const")).address
  
  lostanza val p_Z3_probe_lt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_lt")).address
  
  lostanza val p_Z3_probe_gt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_gt")).address
  
  lostanza val p_Z3_probe_le: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_le")).address
  
  lostanza val p_Z3_probe_ge: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_ge")).address
  
  lostanza val p_Z3_probe_eq: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_eq")).address
  
  lostanza val p_Z3_probe_and: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_and")).address
  
  lostanza val p_Z3_probe_or: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_or")).address
  
  lostanza val p_Z3_probe_not: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_not")).address
  
  lostanza val p_Z3_get_num_tactics: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_num_tactics")).address
  
  lostanza val p_Z3_get_tactic_name: ptr<((ptr<?>,int) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_tactic_name")).address
  
  lostanza val p_Z3_get_num_probes: ptr<((ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_num_probes")).address
  
  lostanza val p_Z3_get_probe_name: ptr<((ptr<?>,int) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_get_probe_name")).address
  
  lostanza val p_Z3_tactic_get_help: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_get_help")).address
  
  lostanza val p_Z3_tactic_get_param_descrs: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_get_param_descrs")).address
  
  lostanza val p_Z3_tactic_get_descr: ptr<((ptr<?>,ptr<byte>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_get_descr")).address
  
  lostanza val p_Z3_probe_get_descr: ptr<((ptr<?>,ptr<byte>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_get_descr")).address
  
  lostanza val p_Z3_probe_apply: ptr<((ptr<?>,ptr<?>,ptr<?>) -> double)> = 
    dynamic-library-symbol(shlib, String("Z3_probe_apply")).address
  
  lostanza val p_Z3_tactic_apply: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_apply")).address
  
  lostanza val p_Z3_tactic_apply_ex: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_tactic_apply_ex")).address
  
  lostanza val p_Z3_apply_result_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_apply_result_inc_ref")).address
  
  lostanza val p_Z3_apply_result_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_apply_result_dec_ref")).address
  
  lostanza val p_Z3_apply_result_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_apply_result_to_string")).address
  
  lostanza val p_Z3_apply_result_get_num_subgoals: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_apply_result_get_num_subgoals")).address
  
  lostanza val p_Z3_apply_result_get_subgoal: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_apply_result_get_subgoal")).address
  
  lostanza val p_Z3_mk_solver: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_solver")).address
  
  lostanza val p_Z3_mk_simple_solver: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_simple_solver")).address
  
  lostanza val p_Z3_mk_solver_for_logic: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_solver_for_logic")).address
  
  lostanza val p_Z3_mk_solver_from_tactic: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_solver_from_tactic")).address
  
  lostanza val p_Z3_solver_translate: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_translate")).address
  
  lostanza val p_Z3_solver_import_model_converter: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_import_model_converter")).address
  
  lostanza val p_Z3_solver_get_help: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_help")).address
  
  lostanza val p_Z3_solver_get_param_descrs: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_param_descrs")).address
  
  lostanza val p_Z3_solver_set_params: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_set_params")).address
  
  lostanza val p_Z3_solver_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_inc_ref")).address
  
  lostanza val p_Z3_solver_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_dec_ref")).address
  
  lostanza val p_Z3_solver_interrupt: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_interrupt")).address
  
  lostanza val p_Z3_solver_push: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_push")).address
  
  lostanza val p_Z3_solver_pop: ptr<((ptr<?>,ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_pop")).address
  
  lostanza val p_Z3_solver_reset: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_reset")).address
  
  lostanza val p_Z3_solver_get_num_scopes: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_num_scopes")).address
  
  lostanza val p_Z3_solver_assert: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_assert")).address
  
  lostanza val p_Z3_solver_assert_and_track: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_assert_and_track")).address
  
  lostanza val p_Z3_solver_from_file: ptr<((ptr<?>,ptr<?>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_from_file")).address
  
  lostanza val p_Z3_solver_from_string: ptr<((ptr<?>,ptr<?>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_from_string")).address
  
  lostanza val p_Z3_solver_get_assertions: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_assertions")).address
  
  lostanza val p_Z3_solver_get_units: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_units")).address
  
  lostanza val p_Z3_solver_get_trail: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_trail")).address
  
  lostanza val p_Z3_solver_get_non_units: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_non_units")).address
  
  lostanza val p_Z3_solver_get_levels: ptr<((ptr<?>,ptr<?>,ptr<?>,int,ptr<int>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_levels")).address
  
  lostanza val p_Z3_solver_propagate_init: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>) -> int )>,ptr<( (ptr<?>,ptr<?>,int) -> int )>,ptr<( (ptr<?>,ptr<?>) -> ptr<?> )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_init")).address
  
  lostanza val p_Z3_solver_propagate_fixed: ptr<((ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_fixed")).address
  
  lostanza val p_Z3_solver_propagate_final: ptr<((ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_final")).address
  
  lostanza val p_Z3_solver_propagate_eq: ptr<((ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_eq")).address
  
  lostanza val p_Z3_solver_propagate_diseq: ptr<((ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_diseq")).address
  
  lostanza val p_Z3_solver_propagate_created: ptr<((ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_created")).address
  
  lostanza val p_Z3_solver_propagate_decide: ptr<((ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_decide")).address
  
  lostanza val p_Z3_solver_next_split: ptr<((ptr<?>,ptr<?>,ptr<?>,int,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_next_split")).address
  
  lostanza val p_Z3_solver_propagate_declare: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_declare")).address
  
  lostanza val p_Z3_solver_propagate_register: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_register")).address
  
  lostanza val p_Z3_solver_propagate_register_cb: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_register_cb")).address
  
  lostanza val p_Z3_solver_propagate_consequence: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,int,ptr<ptr<?>>,ptr<ptr<?>>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_propagate_consequence")).address
  
  lostanza val p_Z3_solver_check: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_check")).address
  
  lostanza val p_Z3_solver_check_assumptions: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_check_assumptions")).address
  
  lostanza val p_Z3_get_implied_equalities: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<int>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_get_implied_equalities")).address
  
  lostanza val p_Z3_solver_get_consequences: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_consequences")).address
  
  lostanza val p_Z3_solver_cube: ptr<((ptr<?>,ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_cube")).address
  
  lostanza val p_Z3_solver_get_model: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_model")).address
  
  lostanza val p_Z3_solver_get_proof: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_proof")).address
  
  lostanza val p_Z3_solver_get_unsat_core: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_unsat_core")).address
  
  lostanza val p_Z3_solver_get_reason_unknown: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_reason_unknown")).address
  
  lostanza val p_Z3_solver_get_statistics: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_get_statistics")).address
  
  lostanza val p_Z3_solver_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_to_string")).address
  
  lostanza val p_Z3_solver_to_dimacs_string: ptr<((ptr<?>,ptr<?>,byte) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_solver_to_dimacs_string")).address
  
  lostanza val p_Z3_stats_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_stats_to_string")).address
  
  lostanza val p_Z3_stats_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_stats_inc_ref")).address
  
  lostanza val p_Z3_stats_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_stats_dec_ref")).address
  
  lostanza val p_Z3_stats_size: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_stats_size")).address
  
  lostanza val p_Z3_stats_get_key: ptr<((ptr<?>,ptr<?>,int) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_stats_get_key")).address
  
  lostanza val p_Z3_stats_is_uint: ptr<((ptr<?>,ptr<?>,int) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_stats_is_uint")).address
  
  lostanza val p_Z3_stats_is_double: ptr<((ptr<?>,ptr<?>,int) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_stats_is_double")).address
  
  lostanza val p_Z3_stats_get_uint_value: ptr<((ptr<?>,ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_stats_get_uint_value")).address
  
  lostanza val p_Z3_stats_get_double_value: ptr<((ptr<?>,ptr<?>,int) -> double)> = 
    dynamic-library-symbol(shlib, String("Z3_stats_get_double_value")).address
  
  lostanza val p_Z3_get_estimated_alloc_size: ptr<(() -> long)> = 
    dynamic-library-symbol(shlib, String("Z3_get_estimated_alloc_size")).address
  
  lostanza val p_Z3_mk_ast_vector: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_ast_vector")).address
  
  lostanza val p_Z3_ast_vector_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_vector_inc_ref")).address
  
  lostanza val p_Z3_ast_vector_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_vector_dec_ref")).address
  
  lostanza val p_Z3_ast_vector_size: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_vector_size")).address
  
  lostanza val p_Z3_ast_vector_get: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_vector_get")).address
  
  lostanza val p_Z3_ast_vector_set: ptr<((ptr<?>,ptr<?>,int,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_vector_set")).address
  
  lostanza val p_Z3_ast_vector_resize: ptr<((ptr<?>,ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_vector_resize")).address
  
  lostanza val p_Z3_ast_vector_push: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_vector_push")).address
  
  lostanza val p_Z3_ast_vector_translate: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_vector_translate")).address
  
  lostanza val p_Z3_ast_vector_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_vector_to_string")).address
  
  lostanza val p_Z3_mk_ast_map: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_ast_map")).address
  
  lostanza val p_Z3_ast_map_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_map_inc_ref")).address
  
  lostanza val p_Z3_ast_map_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_map_dec_ref")).address
  
  lostanza val p_Z3_ast_map_contains: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_map_contains")).address
  
  lostanza val p_Z3_ast_map_find: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_map_find")).address
  
  lostanza val p_Z3_ast_map_insert: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_map_insert")).address
  
  lostanza val p_Z3_ast_map_erase: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_map_erase")).address
  
  lostanza val p_Z3_ast_map_reset: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_map_reset")).address
  
  lostanza val p_Z3_ast_map_size: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_map_size")).address
  
  lostanza val p_Z3_ast_map_keys: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_map_keys")).address
  
  lostanza val p_Z3_ast_map_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_ast_map_to_string")).address
  
  lostanza val p_Z3_algebraic_is_value: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_is_value")).address
  
  lostanza val p_Z3_algebraic_is_pos: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_is_pos")).address
  
  lostanza val p_Z3_algebraic_is_neg: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_is_neg")).address
  
  lostanza val p_Z3_algebraic_is_zero: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_is_zero")).address
  
  lostanza val p_Z3_algebraic_sign: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_sign")).address
  
  lostanza val p_Z3_algebraic_add: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_add")).address
  
  lostanza val p_Z3_algebraic_sub: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_sub")).address
  
  lostanza val p_Z3_algebraic_mul: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_mul")).address
  
  lostanza val p_Z3_algebraic_div: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_div")).address
  
  lostanza val p_Z3_algebraic_root: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_root")).address
  
  lostanza val p_Z3_algebraic_power: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_power")).address
  
  lostanza val p_Z3_algebraic_lt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_lt")).address
  
  lostanza val p_Z3_algebraic_gt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_gt")).address
  
  lostanza val p_Z3_algebraic_le: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_le")).address
  
  lostanza val p_Z3_algebraic_ge: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_ge")).address
  
  lostanza val p_Z3_algebraic_eq: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_eq")).address
  
  lostanza val p_Z3_algebraic_neq: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_neq")).address
  
  lostanza val p_Z3_algebraic_roots: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_roots")).address
  
  lostanza val p_Z3_algebraic_eval: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_eval")).address
  
  lostanza val p_Z3_algebraic_get_poly: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_get_poly")).address
  
  lostanza val p_Z3_algebraic_get_i: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_algebraic_get_i")).address
  
  lostanza val p_Z3_polynomial_subresultants: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_polynomial_subresultants")).address
  
  lostanza val p_Z3_rcf_del: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_del")).address
  
  lostanza val p_Z3_rcf_mk_rational: ptr<((ptr<?>,ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_mk_rational")).address
  
  lostanza val p_Z3_rcf_mk_small_int: ptr<((ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_mk_small_int")).address
  
  lostanza val p_Z3_rcf_mk_pi: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_mk_pi")).address
  
  lostanza val p_Z3_rcf_mk_e: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_mk_e")).address
  
  lostanza val p_Z3_rcf_mk_infinitesimal: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_mk_infinitesimal")).address
  
  lostanza val p_Z3_rcf_mk_roots: ptr<((ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_mk_roots")).address
  
  lostanza val p_Z3_rcf_add: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_add")).address
  
  lostanza val p_Z3_rcf_sub: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_sub")).address
  
  lostanza val p_Z3_rcf_mul: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_mul")).address
  
  lostanza val p_Z3_rcf_div: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_div")).address
  
  lostanza val p_Z3_rcf_neg: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_neg")).address
  
  lostanza val p_Z3_rcf_inv: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_inv")).address
  
  lostanza val p_Z3_rcf_power: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_power")).address
  
  lostanza val p_Z3_rcf_lt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_lt")).address
  
  lostanza val p_Z3_rcf_gt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_gt")).address
  
  lostanza val p_Z3_rcf_le: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_le")).address
  
  lostanza val p_Z3_rcf_ge: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_ge")).address
  
  lostanza val p_Z3_rcf_eq: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_eq")).address
  
  lostanza val p_Z3_rcf_neq: ptr<((ptr<?>,ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_neq")).address
  
  lostanza val p_Z3_rcf_num_to_string: ptr<((ptr<?>,ptr<?>,byte,byte) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_num_to_string")).address
  
  lostanza val p_Z3_rcf_num_to_decimal_string: ptr<((ptr<?>,ptr<?>,int) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_num_to_decimal_string")).address
  
  lostanza val p_Z3_rcf_get_numerator_denominator: ptr<((ptr<?>,ptr<?>,ptr<ptr<?>>,ptr<ptr<?>>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_rcf_get_numerator_denominator")).address
  
  lostanza val p_Z3_mk_fixedpoint: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fixedpoint")).address
  
  lostanza val p_Z3_fixedpoint_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_inc_ref")).address
  
  lostanza val p_Z3_fixedpoint_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_dec_ref")).address
  
  lostanza val p_Z3_fixedpoint_add_rule: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_add_rule")).address
  
  lostanza val p_Z3_fixedpoint_add_fact: ptr<((ptr<?>,ptr<?>,ptr<?>,int,ptr<int>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_add_fact")).address
  
  lostanza val p_Z3_fixedpoint_assert: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_assert")).address
  
  lostanza val p_Z3_fixedpoint_query: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_query")).address
  
  lostanza val p_Z3_fixedpoint_query_relations: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_query_relations")).address
  
  lostanza val p_Z3_fixedpoint_get_answer: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_answer")).address
  
  lostanza val p_Z3_fixedpoint_get_reason_unknown: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_reason_unknown")).address
  
  lostanza val p_Z3_fixedpoint_update_rule: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_update_rule")).address
  
  lostanza val p_Z3_fixedpoint_get_num_levels: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_num_levels")).address
  
  lostanza val p_Z3_fixedpoint_get_cover_delta: ptr<((ptr<?>,ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_cover_delta")).address
  
  lostanza val p_Z3_fixedpoint_add_cover: ptr<((ptr<?>,ptr<?>,int,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_add_cover")).address
  
  lostanza val p_Z3_fixedpoint_get_statistics: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_statistics")).address
  
  lostanza val p_Z3_fixedpoint_register_relation: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_register_relation")).address
  
  lostanza val p_Z3_fixedpoint_set_predicate_representation: ptr<((ptr<?>,ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_set_predicate_representation")).address
  
  lostanza val p_Z3_fixedpoint_get_rules: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_rules")).address
  
  lostanza val p_Z3_fixedpoint_get_assertions: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_assertions")).address
  
  lostanza val p_Z3_fixedpoint_set_params: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_set_params")).address
  
  lostanza val p_Z3_fixedpoint_get_help: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_help")).address
  
  lostanza val p_Z3_fixedpoint_get_param_descrs: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_param_descrs")).address
  
  lostanza val p_Z3_fixedpoint_to_string: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_to_string")).address
  
  lostanza val p_Z3_fixedpoint_from_string: ptr<((ptr<?>,ptr<?>,ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_from_string")).address
  
  lostanza val p_Z3_fixedpoint_from_file: ptr<((ptr<?>,ptr<?>,ptr<byte>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_from_file")).address
  
  lostanza val p_Z3_fixedpoint_init: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_init")).address
  
  lostanza val p_Z3_fixedpoint_set_reduce_assign_callback: ptr<((ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,int,ptr<ptr<?>>,int,ptr<ptr<?>>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_set_reduce_assign_callback")).address
  
  lostanza val p_Z3_fixedpoint_set_reduce_app_callback: ptr<((ptr<?>,ptr<?>,ptr<( (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_set_reduce_app_callback")).address
  
  lostanza val p_Z3_fixedpoint_add_callback: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<ptr<( (ptr<?>,ptr<?>,int) -> int )>>,ptr<ptr<( (ptr<?>) -> int )>>,ptr<ptr<( (ptr<?>) -> int )>>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_add_callback")).address
  
  lostanza val p_Z3_fixedpoint_add_constraint: ptr<((ptr<?>,ptr<?>,ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_add_constraint")).address
  
  lostanza val p_Z3_mk_optimize: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_optimize")).address
  
  lostanza val p_Z3_optimize_inc_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_inc_ref")).address
  
  lostanza val p_Z3_optimize_dec_ref: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_dec_ref")).address
  
  lostanza val p_Z3_optimize_assert: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_assert")).address
  
  lostanza val p_Z3_optimize_assert_and_track: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_assert_and_track")).address
  
  lostanza val p_Z3_optimize_assert_soft: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<byte>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_assert_soft")).address
  
  lostanza val p_Z3_optimize_maximize: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_maximize")).address
  
  lostanza val p_Z3_optimize_minimize: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_minimize")).address
  
  lostanza val p_Z3_optimize_push: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_push")).address
  
  lostanza val p_Z3_optimize_pop: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_pop")).address
  
  lostanza val p_Z3_optimize_check: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_check")).address
  
  lostanza val p_Z3_optimize_get_reason_unknown: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_reason_unknown")).address
  
  lostanza val p_Z3_optimize_get_model: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_model")).address
  
  lostanza val p_Z3_optimize_get_unsat_core: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_unsat_core")).address
  
  lostanza val p_Z3_optimize_set_params: ptr<((ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_set_params")).address
  
  lostanza val p_Z3_optimize_get_param_descrs: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_param_descrs")).address
  
  lostanza val p_Z3_optimize_get_lower: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_lower")).address
  
  lostanza val p_Z3_optimize_get_upper: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_upper")).address
  
  lostanza val p_Z3_optimize_get_lower_as_vector: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_lower_as_vector")).address
  
  lostanza val p_Z3_optimize_get_upper_as_vector: ptr<((ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_upper_as_vector")).address
  
  lostanza val p_Z3_optimize_to_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_to_string")).address
  
  lostanza val p_Z3_optimize_from_string: ptr<((ptr<?>,ptr<?>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_from_string")).address
  
  lostanza val p_Z3_optimize_from_file: ptr<((ptr<?>,ptr<?>,ptr<byte>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_from_file")).address
  
  lostanza val p_Z3_optimize_get_help: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_help")).address
  
  lostanza val p_Z3_optimize_get_statistics: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_statistics")).address
  
  lostanza val p_Z3_optimize_get_assertions: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_assertions")).address
  
  lostanza val p_Z3_optimize_get_objectives: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_get_objectives")).address
  
  lostanza val p_Z3_optimize_register_model_eh: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>,ptr<( (ptr<?>) -> int )>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_optimize_register_model_eh")).address
  
  lostanza val p_Z3_mk_fpa_rounding_mode_sort: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_rounding_mode_sort")).address
  
  lostanza val p_Z3_mk_fpa_round_nearest_ties_to_even: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_round_nearest_ties_to_even")).address
  
  lostanza val p_Z3_mk_fpa_rne: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_rne")).address
  
  lostanza val p_Z3_mk_fpa_round_nearest_ties_to_away: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_round_nearest_ties_to_away")).address
  
  lostanza val p_Z3_mk_fpa_rna: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_rna")).address
  
  lostanza val p_Z3_mk_fpa_round_toward_positive: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_round_toward_positive")).address
  
  lostanza val p_Z3_mk_fpa_rtp: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_rtp")).address
  
  lostanza val p_Z3_mk_fpa_round_toward_negative: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_round_toward_negative")).address
  
  lostanza val p_Z3_mk_fpa_rtn: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_rtn")).address
  
  lostanza val p_Z3_mk_fpa_round_toward_zero: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_round_toward_zero")).address
  
  lostanza val p_Z3_mk_fpa_rtz: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_rtz")).address
  
  lostanza val p_Z3_mk_fpa_sort: ptr<((ptr<?>,int,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sort")).address
  
  lostanza val p_Z3_mk_fpa_sort_half: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sort_half")).address
  
  lostanza val p_Z3_mk_fpa_sort_16: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sort_16")).address
  
  lostanza val p_Z3_mk_fpa_sort_single: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sort_single")).address
  
  lostanza val p_Z3_mk_fpa_sort_32: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sort_32")).address
  
  lostanza val p_Z3_mk_fpa_sort_double: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sort_double")).address
  
  lostanza val p_Z3_mk_fpa_sort_64: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sort_64")).address
  
  lostanza val p_Z3_mk_fpa_sort_quadruple: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sort_quadruple")).address
  
  lostanza val p_Z3_mk_fpa_sort_128: ptr<((ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sort_128")).address
  
  lostanza val p_Z3_mk_fpa_nan: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_nan")).address
  
  lostanza val p_Z3_mk_fpa_inf: ptr<((ptr<?>,ptr<?>,byte) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_inf")).address
  
  lostanza val p_Z3_mk_fpa_zero: ptr<((ptr<?>,ptr<?>,byte) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_zero")).address
  
  lostanza val p_Z3_mk_fpa_fp: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_fp")).address
  
  lostanza val p_Z3_mk_fpa_numeral_float: ptr<((ptr<?>,float,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_numeral_float")).address
  
  lostanza val p_Z3_mk_fpa_numeral_double: ptr<((ptr<?>,double,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_numeral_double")).address
  
  lostanza val p_Z3_mk_fpa_numeral_int: ptr<((ptr<?>,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_numeral_int")).address
  
  lostanza val p_Z3_mk_fpa_numeral_int_uint: ptr<((ptr<?>,byte,int,int,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_numeral_int_uint")).address
  
  lostanza val p_Z3_mk_fpa_numeral_int64_uint64: ptr<((ptr<?>,byte,long,long,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_numeral_int64_uint64")).address
  
  lostanza val p_Z3_mk_fpa_abs: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_abs")).address
  
  lostanza val p_Z3_mk_fpa_neg: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_neg")).address
  
  lostanza val p_Z3_mk_fpa_add: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_add")).address
  
  lostanza val p_Z3_mk_fpa_sub: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sub")).address
  
  lostanza val p_Z3_mk_fpa_mul: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_mul")).address
  
  lostanza val p_Z3_mk_fpa_div: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_div")).address
  
  lostanza val p_Z3_mk_fpa_fma: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_fma")).address
  
  lostanza val p_Z3_mk_fpa_sqrt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_sqrt")).address
  
  lostanza val p_Z3_mk_fpa_rem: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_rem")).address
  
  lostanza val p_Z3_mk_fpa_round_to_integral: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_round_to_integral")).address
  
  lostanza val p_Z3_mk_fpa_min: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_min")).address
  
  lostanza val p_Z3_mk_fpa_max: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_max")).address
  
  lostanza val p_Z3_mk_fpa_leq: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_leq")).address
  
  lostanza val p_Z3_mk_fpa_lt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_lt")).address
  
  lostanza val p_Z3_mk_fpa_geq: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_geq")).address
  
  lostanza val p_Z3_mk_fpa_gt: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_gt")).address
  
  lostanza val p_Z3_mk_fpa_eq: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_eq")).address
  
  lostanza val p_Z3_mk_fpa_is_normal: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_is_normal")).address
  
  lostanza val p_Z3_mk_fpa_is_subnormal: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_is_subnormal")).address
  
  lostanza val p_Z3_mk_fpa_is_zero: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_is_zero")).address
  
  lostanza val p_Z3_mk_fpa_is_infinite: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_is_infinite")).address
  
  lostanza val p_Z3_mk_fpa_is_nan: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_is_nan")).address
  
  lostanza val p_Z3_mk_fpa_is_negative: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_is_negative")).address
  
  lostanza val p_Z3_mk_fpa_is_positive: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_is_positive")).address
  
  lostanza val p_Z3_mk_fpa_to_fp_bv: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_to_fp_bv")).address
  
  lostanza val p_Z3_mk_fpa_to_fp_float: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_to_fp_float")).address
  
  lostanza val p_Z3_mk_fpa_to_fp_real: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_to_fp_real")).address
  
  lostanza val p_Z3_mk_fpa_to_fp_signed: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_to_fp_signed")).address
  
  lostanza val p_Z3_mk_fpa_to_fp_unsigned: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_to_fp_unsigned")).address
  
  lostanza val p_Z3_mk_fpa_to_ubv: ptr<((ptr<?>,ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_to_ubv")).address
  
  lostanza val p_Z3_mk_fpa_to_sbv: ptr<((ptr<?>,ptr<?>,ptr<?>,int) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_to_sbv")).address
  
  lostanza val p_Z3_mk_fpa_to_real: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_to_real")).address
  
  lostanza val p_Z3_fpa_get_ebits: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_get_ebits")).address
  
  lostanza val p_Z3_fpa_get_sbits: ptr<((ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_get_sbits")).address
  
  lostanza val p_Z3_fpa_is_numeral_nan: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_is_numeral_nan")).address
  
  lostanza val p_Z3_fpa_is_numeral_inf: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_is_numeral_inf")).address
  
  lostanza val p_Z3_fpa_is_numeral_zero: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_is_numeral_zero")).address
  
  lostanza val p_Z3_fpa_is_numeral_normal: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_is_numeral_normal")).address
  
  lostanza val p_Z3_fpa_is_numeral_subnormal: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_is_numeral_subnormal")).address
  
  lostanza val p_Z3_fpa_is_numeral_positive: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_is_numeral_positive")).address
  
  lostanza val p_Z3_fpa_is_numeral_negative: ptr<((ptr<?>,ptr<?>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_is_numeral_negative")).address
  
  lostanza val p_Z3_fpa_get_numeral_sign_bv: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_get_numeral_sign_bv")).address
  
  lostanza val p_Z3_fpa_get_numeral_significand_bv: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_get_numeral_significand_bv")).address
  
  lostanza val p_Z3_fpa_get_numeral_sign: ptr<((ptr<?>,ptr<?>,ptr<int>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_get_numeral_sign")).address
  
  lostanza val p_Z3_fpa_get_numeral_significand_string: ptr<((ptr<?>,ptr<?>) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_get_numeral_significand_string")).address
  
  lostanza val p_Z3_fpa_get_numeral_significand_uint64: ptr<((ptr<?>,ptr<?>,ptr<long>) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_get_numeral_significand_uint64")).address
  
  lostanza val p_Z3_fpa_get_numeral_exponent_string: ptr<((ptr<?>,ptr<?>,byte) -> ptr<byte>)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_get_numeral_exponent_string")).address
  
  lostanza val p_Z3_fpa_get_numeral_exponent_int64: ptr<((ptr<?>,ptr<?>,ptr<long>,byte) -> byte)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_get_numeral_exponent_int64")).address
  
  lostanza val p_Z3_fpa_get_numeral_exponent_bv: ptr<((ptr<?>,ptr<?>,byte) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fpa_get_numeral_exponent_bv")).address
  
  lostanza val p_Z3_mk_fpa_to_ieee_bv: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_to_ieee_bv")).address
  
  lostanza val p_Z3_mk_fpa_to_fp_int_real: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_mk_fpa_to_fp_int_real")).address
  
  lostanza val p_Z3_fixedpoint_query_from_lvl: ptr<((ptr<?>,ptr<?>,ptr<?>,int) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_query_from_lvl")).address
  
  lostanza val p_Z3_fixedpoint_get_ground_sat_answer: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_ground_sat_answer")).address
  
  lostanza val p_Z3_fixedpoint_get_rules_along_trace: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_rules_along_trace")).address
  
  lostanza val p_Z3_fixedpoint_get_rule_names_along_trace: ptr<((ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_rule_names_along_trace")).address
  
  lostanza val p_Z3_fixedpoint_add_invariant: ptr<((ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_add_invariant")).address
  
  lostanza val p_Z3_fixedpoint_get_reachable: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_fixedpoint_get_reachable")).address
  
  lostanza val p_Z3_qe_model_project: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_qe_model_project")).address
  
  lostanza val p_Z3_qe_model_project_skolem: ptr<((ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_qe_model_project_skolem")).address
  
  lostanza val p_Z3_model_extrapolate: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_model_extrapolate")).address
  
  lostanza val p_Z3_qe_lite: ptr<((ptr<?>,ptr<?>,ptr<?>) -> ptr<?>)> = 
    dynamic-library-symbol(shlib, String("Z3_qe_lite")).address
  
  public lostanza defn w_Z3_global_param_set (param_id:ptr<byte>, param_value:ptr<byte>) -> ref<False> :
    call-c [p_Z3_global_param_set](param_id, param_value)
    return false
  public lostanza defn w_Z3_global_param_reset_all () -> ref<False> :
    call-c [p_Z3_global_param_reset_all]()
    return false
  public lostanza defn w_Z3_global_param_get (param_id:ptr<byte>, param_value:ptr<ptr<byte>>) -> byte :
    val ret = call-c [p_Z3_global_param_get](param_id, param_value)
    return ret
  public lostanza defn w_Z3_mk_config () -> ptr<?> :
    val ret = call-c [p_Z3_mk_config]()
    return ret
  public lostanza defn w_Z3_del_config (c:ptr<?>) -> ref<False> :
    call-c [p_Z3_del_config](c)
    return false
  public lostanza defn w_Z3_set_param_value (c:ptr<?>, param_id:ptr<byte>, param_value:ptr<byte>) -> ref<False> :
    call-c [p_Z3_set_param_value](c, param_id, param_value)
    return false
  public lostanza defn w_Z3_mk_context (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_context](c)
    return ret
  public lostanza defn w_Z3_mk_context_rc (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_context_rc](c)
    return ret
  public lostanza defn w_Z3_del_context (c:ptr<?>) -> ref<False> :
    call-c [p_Z3_del_context](c)
    return false
  public lostanza defn w_Z3_inc_ref (c:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c [p_Z3_inc_ref](c, a)
    return false
  public lostanza defn w_Z3_dec_ref (c:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c [p_Z3_dec_ref](c, a)
    return false
  public lostanza defn w_Z3_update_param_value (c:ptr<?>, param_id:ptr<byte>, param_value:ptr<byte>) -> ref<False> :
    call-c [p_Z3_update_param_value](c, param_id, param_value)
    return false
  public lostanza defn w_Z3_get_global_param_descrs (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_global_param_descrs](c)
    return ret
  public lostanza defn w_Z3_interrupt (c:ptr<?>) -> ref<False> :
    call-c [p_Z3_interrupt](c)
    return false
  public lostanza defn w_Z3_enable_concurrent_dec_ref (c:ptr<?>) -> ref<False> :
    call-c [p_Z3_enable_concurrent_dec_ref](c)
    return false
  public lostanza defn w_Z3_mk_params (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_params](c)
    return ret
  public lostanza defn w_Z3_params_inc_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c [p_Z3_params_inc_ref](c, p)
    return false
  public lostanza defn w_Z3_params_dec_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c [p_Z3_params_dec_ref](c, p)
    return false
  public lostanza defn w_Z3_params_set_bool (c:ptr<?>, p:ptr<?>, k:ptr<?>, v:byte) -> ref<False> :
    call-c [p_Z3_params_set_bool](c, p, k, v)
    return false
  public lostanza defn w_Z3_params_set_uint (c:ptr<?>, p:ptr<?>, k:ptr<?>, v:int) -> ref<False> :
    call-c [p_Z3_params_set_uint](c, p, k, v)
    return false
  public lostanza defn w_Z3_params_set_double (c:ptr<?>, p:ptr<?>, k:ptr<?>, v:double) -> ref<False> :
    call-c [p_Z3_params_set_double](c, p, k, v)
    return false
  public lostanza defn w_Z3_params_set_symbol (c:ptr<?>, p:ptr<?>, k:ptr<?>, v:ptr<?>) -> ref<False> :
    call-c [p_Z3_params_set_symbol](c, p, k, v)
    return false
  public lostanza defn w_Z3_params_to_string (c:ptr<?>, p:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_params_to_string](c, p)
    return ret
  public lostanza defn w_Z3_params_validate (c:ptr<?>, p:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c [p_Z3_params_validate](c, p, d)
    return false
  public lostanza defn w_Z3_param_descrs_inc_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c [p_Z3_param_descrs_inc_ref](c, p)
    return false
  public lostanza defn w_Z3_param_descrs_dec_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c [p_Z3_param_descrs_dec_ref](c, p)
    return false
  public lostanza defn w_Z3_param_descrs_get_kind (c:ptr<?>, p:ptr<?>, n:ptr<?>) -> int :
    val ret = call-c [p_Z3_param_descrs_get_kind](c, p, n)
    return ret
  public lostanza defn w_Z3_param_descrs_size (c:ptr<?>, p:ptr<?>) -> int :
    val ret = call-c [p_Z3_param_descrs_size](c, p)
    return ret
  public lostanza defn w_Z3_param_descrs_get_name (c:ptr<?>, p:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_param_descrs_get_name](c, p, i)
    return ret
  public lostanza defn w_Z3_param_descrs_get_documentation (c:ptr<?>, p:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_param_descrs_get_documentation](c, p, s)
    return ret
  public lostanza defn w_Z3_param_descrs_to_string (c:ptr<?>, p:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_param_descrs_to_string](c, p)
    return ret
  public lostanza defn w_Z3_mk_int_symbol (c:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_int_symbol](c, i)
    return ret
  public lostanza defn w_Z3_mk_string_symbol (c:ptr<?>, s:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_string_symbol](c, s)
    return ret
  public lostanza defn w_Z3_mk_uninterpreted_sort (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_uninterpreted_sort](c, s)
    return ret
  public lostanza defn w_Z3_mk_bool_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bool_sort](c)
    return ret
  public lostanza defn w_Z3_mk_int_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_int_sort](c)
    return ret
  public lostanza defn w_Z3_mk_real_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_real_sort](c)
    return ret
  public lostanza defn w_Z3_mk_bv_sort (c:ptr<?>, sz:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bv_sort](c, sz)
    return ret
  public lostanza defn w_Z3_mk_finite_domain_sort (c:ptr<?>, name:ptr<?>, size:long) -> ptr<?> :
    val ret = call-c [p_Z3_mk_finite_domain_sort](c, name, size)
    return ret
  public lostanza defn w_Z3_mk_array_sort (c:ptr<?>, domain:ptr<?>, range:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_array_sort](c, domain, range)
    return ret
  public lostanza defn w_Z3_mk_array_sort_n (c:ptr<?>, n:int, domain:ptr<ptr<?>>, range:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_array_sort_n](c, n, domain, range)
    return ret
  public lostanza defn w_Z3_mk_tuple_sort (c:ptr<?>, mk_tuple_name:ptr<?>, num_fields:int, field_names:ptr<ptr<?>>, field_sorts:ptr<ptr<?>>, mk_tuple_decl:ptr<ptr<?>>, proj_decl:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_tuple_sort](c, mk_tuple_name, num_fields, field_names, field_sorts, mk_tuple_decl, proj_decl)
    return ret
  public lostanza defn w_Z3_mk_enumeration_sort (c:ptr<?>, name:ptr<?>, n:int, enum_names:ptr<ptr<?>>, enum_consts:ptr<ptr<?>>, enum_testers:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_enumeration_sort](c, name, n, enum_names, enum_consts, enum_testers)
    return ret
  public lostanza defn w_Z3_mk_list_sort (c:ptr<?>, name:ptr<?>, elem_sort:ptr<?>, nil_decl:ptr<ptr<?>>, is_nil_decl:ptr<ptr<?>>, cons_decl:ptr<ptr<?>>, is_cons_decl:ptr<ptr<?>>, head_decl:ptr<ptr<?>>, tail_decl:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_list_sort](c, name, elem_sort, nil_decl, is_nil_decl, cons_decl, is_cons_decl, head_decl, tail_decl)
    return ret
  public lostanza defn w_Z3_mk_constructor (c:ptr<?>, name:ptr<?>, recognizer:ptr<?>, num_fields:int, field_names:ptr<ptr<?>>, sorts:ptr<ptr<?>>, sort_refs:ptr<int>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_constructor](c, name, recognizer, num_fields, field_names, sorts, sort_refs)
    return ret
  public lostanza defn w_Z3_del_constructor (c:ptr<?>, constr:ptr<?>) -> ref<False> :
    call-c [p_Z3_del_constructor](c, constr)
    return false
  public lostanza defn w_Z3_mk_datatype (c:ptr<?>, name:ptr<?>, num_constructors:int, constructors:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_datatype](c, name, num_constructors, constructors)
    return ret
  public lostanza defn w_Z3_mk_datatype_sort (c:ptr<?>, name:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_datatype_sort](c, name)
    return ret
  public lostanza defn w_Z3_mk_constructor_list (c:ptr<?>, num_constructors:int, constructors:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_constructor_list](c, num_constructors, constructors)
    return ret
  public lostanza defn w_Z3_del_constructor_list (c:ptr<?>, clist:ptr<?>) -> ref<False> :
    call-c [p_Z3_del_constructor_list](c, clist)
    return false
  public lostanza defn w_Z3_mk_datatypes (c:ptr<?>, num_sorts:int, sort_names:ptr<ptr<?>>, sorts:ptr<ptr<?>>, constructor_lists:ptr<ptr<?>>) -> ref<False> :
    call-c [p_Z3_mk_datatypes](c, num_sorts, sort_names, sorts, constructor_lists)
    return false
  public lostanza defn w_Z3_query_constructor (c:ptr<?>, constr:ptr<?>, num_fields:int, constructor:ptr<ptr<?>>, tester:ptr<ptr<?>>, accessors:ptr<ptr<?>>) -> ref<False> :
    call-c [p_Z3_query_constructor](c, constr, num_fields, constructor, tester, accessors)
    return false
  public lostanza defn w_Z3_mk_func_decl (c:ptr<?>, s:ptr<?>, domain_size:int, domain:ptr<ptr<?>>, range:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_func_decl](c, s, domain_size, domain, range)
    return ret
  public lostanza defn w_Z3_mk_app (c:ptr<?>, d:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_app](c, d, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_const (c:ptr<?>, s:ptr<?>, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_const](c, s, ty)
    return ret
  public lostanza defn w_Z3_mk_fresh_func_decl (c:ptr<?>, prefix:ptr<byte>, domain_size:int, domain:ptr<ptr<?>>, range:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fresh_func_decl](c, prefix, domain_size, domain, range)
    return ret
  public lostanza defn w_Z3_mk_fresh_const (c:ptr<?>, prefix:ptr<byte>, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fresh_const](c, prefix, ty)
    return ret
  public lostanza defn w_Z3_mk_rec_func_decl (c:ptr<?>, s:ptr<?>, domain_size:int, domain:ptr<ptr<?>>, range:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_rec_func_decl](c, s, domain_size, domain, range)
    return ret
  public lostanza defn w_Z3_add_rec_def (c:ptr<?>, f:ptr<?>, n:int, args:ptr<ptr<?>>, body:ptr<?>) -> ref<False> :
    call-c [p_Z3_add_rec_def](c, f, n, args, body)
    return false
  public lostanza defn w_Z3_mk_true (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_true](c)
    return ret
  public lostanza defn w_Z3_mk_false (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_false](c)
    return ret
  public lostanza defn w_Z3_mk_eq (c:ptr<?>, l:ptr<?>, r:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_eq](c, l, r)
    return ret
  public lostanza defn w_Z3_mk_distinct (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_distinct](c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_not (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_not](c, a)
    return ret
  public lostanza defn w_Z3_mk_ite (c:ptr<?>, t1:ptr<?>, t2:ptr<?>, t3:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_ite](c, t1, t2, t3)
    return ret
  public lostanza defn w_Z3_mk_iff (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_iff](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_implies (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_implies](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_xor (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_xor](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_and (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_and](c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_or (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_or](c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_add (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_add](c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_mul (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_mul](c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_sub (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_sub](c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_unary_minus (c:ptr<?>, arg:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_unary_minus](c, arg)
    return ret
  public lostanza defn w_Z3_mk_div (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_div](c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_mod (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_mod](c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_rem (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_rem](c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_power (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_power](c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_lt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_lt](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_le (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_le](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_gt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_gt](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_ge (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_ge](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_divides (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_divides](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_int2real (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_int2real](c, t1)
    return ret
  public lostanza defn w_Z3_mk_real2int (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_real2int](c, t1)
    return ret
  public lostanza defn w_Z3_mk_is_int (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_is_int](c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvnot (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvnot](c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvredand (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvredand](c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvredor (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvredor](c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvand (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvand](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvor (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvor](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvxor (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvxor](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvnand (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvnand](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvnor (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvnor](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvxnor (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvxnor](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvneg (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvneg](c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvadd (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvadd](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsub (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvsub](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvmul (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvmul](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvudiv (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvudiv](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsdiv (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvsdiv](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvurem (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvurem](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsrem (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvsrem](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsmod (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvsmod](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvult (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvult](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvslt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvslt](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvule (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvule](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsle (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvsle](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvuge (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvuge](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsge (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvsge](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvugt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvugt](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsgt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvsgt](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_concat (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_concat](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_extract (c:ptr<?>, high:int, low:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_extract](c, high, low, t1)
    return ret
  public lostanza defn w_Z3_mk_sign_ext (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_sign_ext](c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_zero_ext (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_zero_ext](c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_repeat (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_repeat](c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_bit2bool (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bit2bool](c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_bvshl (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvshl](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvlshr (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvlshr](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvashr (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvashr](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_rotate_left (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_rotate_left](c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_rotate_right (c:ptr<?>, i:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_rotate_right](c, i, t1)
    return ret
  public lostanza defn w_Z3_mk_ext_rotate_left (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_ext_rotate_left](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_ext_rotate_right (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_ext_rotate_right](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_int2bv (c:ptr<?>, n:int, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_int2bv](c, n, t1)
    return ret
  public lostanza defn w_Z3_mk_bv2int (c:ptr<?>, t1:ptr<?>, is_signed:byte) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bv2int](c, t1, is_signed)
    return ret
  public lostanza defn w_Z3_mk_bvadd_no_overflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>, is_signed:byte) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvadd_no_overflow](c, t1, t2, is_signed)
    return ret
  public lostanza defn w_Z3_mk_bvadd_no_underflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvadd_no_underflow](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsub_no_overflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvsub_no_overflow](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvsub_no_underflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>, is_signed:byte) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvsub_no_underflow](c, t1, t2, is_signed)
    return ret
  public lostanza defn w_Z3_mk_bvsdiv_no_overflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvsdiv_no_overflow](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_bvneg_no_overflow (c:ptr<?>, t1:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvneg_no_overflow](c, t1)
    return ret
  public lostanza defn w_Z3_mk_bvmul_no_overflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>, is_signed:byte) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvmul_no_overflow](c, t1, t2, is_signed)
    return ret
  public lostanza defn w_Z3_mk_bvmul_no_underflow (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bvmul_no_underflow](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_select (c:ptr<?>, a:ptr<?>, i:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_select](c, a, i)
    return ret
  public lostanza defn w_Z3_mk_select_n (c:ptr<?>, a:ptr<?>, n:int, idxs:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_select_n](c, a, n, idxs)
    return ret
  public lostanza defn w_Z3_mk_store (c:ptr<?>, a:ptr<?>, i:ptr<?>, v:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_store](c, a, i, v)
    return ret
  public lostanza defn w_Z3_mk_store_n (c:ptr<?>, a:ptr<?>, n:int, idxs:ptr<ptr<?>>, v:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_store_n](c, a, n, idxs, v)
    return ret
  public lostanza defn w_Z3_mk_const_array (c:ptr<?>, domain:ptr<?>, v:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_const_array](c, domain, v)
    return ret
  public lostanza defn w_Z3_mk_map (c:ptr<?>, f:ptr<?>, n:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_map](c, f, n, args)
    return ret
  public lostanza defn w_Z3_mk_array_default (c:ptr<?>, array:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_array_default](c, array)
    return ret
  public lostanza defn w_Z3_mk_as_array (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_as_array](c, f)
    return ret
  public lostanza defn w_Z3_mk_set_has_size (c:ptr<?>, set:ptr<?>, k:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_set_has_size](c, set, k)
    return ret
  public lostanza defn w_Z3_mk_set_sort (c:ptr<?>, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_set_sort](c, ty)
    return ret
  public lostanza defn w_Z3_mk_empty_set (c:ptr<?>, domain:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_empty_set](c, domain)
    return ret
  public lostanza defn w_Z3_mk_full_set (c:ptr<?>, domain:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_full_set](c, domain)
    return ret
  public lostanza defn w_Z3_mk_set_add (c:ptr<?>, set:ptr<?>, elem:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_set_add](c, set, elem)
    return ret
  public lostanza defn w_Z3_mk_set_del (c:ptr<?>, set:ptr<?>, elem:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_set_del](c, set, elem)
    return ret
  public lostanza defn w_Z3_mk_set_union (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_set_union](c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_set_intersect (c:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_set_intersect](c, num_args, args)
    return ret
  public lostanza defn w_Z3_mk_set_difference (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_set_difference](c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_set_complement (c:ptr<?>, arg:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_set_complement](c, arg)
    return ret
  public lostanza defn w_Z3_mk_set_member (c:ptr<?>, elem:ptr<?>, set:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_set_member](c, elem, set)
    return ret
  public lostanza defn w_Z3_mk_set_subset (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_set_subset](c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_array_ext (c:ptr<?>, arg1:ptr<?>, arg2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_array_ext](c, arg1, arg2)
    return ret
  public lostanza defn w_Z3_mk_numeral (c:ptr<?>, numeral:ptr<byte>, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_numeral](c, numeral, ty)
    return ret
  public lostanza defn w_Z3_mk_real (c:ptr<?>, num:int, den:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_real](c, num, den)
    return ret
  public lostanza defn w_Z3_mk_int (c:ptr<?>, v:int, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_int](c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_unsigned_int (c:ptr<?>, v:int, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_unsigned_int](c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_int64 (c:ptr<?>, v:long, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_int64](c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_unsigned_int64 (c:ptr<?>, v:long, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_unsigned_int64](c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_bv_numeral (c:ptr<?>, sz:int, bits:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bv_numeral](c, sz, bits)
    return ret
  public lostanza defn w_Z3_mk_seq_sort (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_sort](c, s)
    return ret
  public lostanza defn w_Z3_is_seq_sort (c:ptr<?>, s:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_seq_sort](c, s)
    return ret
  public lostanza defn w_Z3_get_seq_sort_basis (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_seq_sort_basis](c, s)
    return ret
  public lostanza defn w_Z3_mk_re_sort (c:ptr<?>, seq:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_sort](c, seq)
    return ret
  public lostanza defn w_Z3_is_re_sort (c:ptr<?>, s:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_re_sort](c, s)
    return ret
  public lostanza defn w_Z3_get_re_sort_basis (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_re_sort_basis](c, s)
    return ret
  public lostanza defn w_Z3_mk_string_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_string_sort](c)
    return ret
  public lostanza defn w_Z3_mk_char_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_char_sort](c)
    return ret
  public lostanza defn w_Z3_is_string_sort (c:ptr<?>, s:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_string_sort](c, s)
    return ret
  public lostanza defn w_Z3_is_char_sort (c:ptr<?>, s:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_char_sort](c, s)
    return ret
  public lostanza defn w_Z3_mk_string (c:ptr<?>, s:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_string](c, s)
    return ret
  public lostanza defn w_Z3_mk_lstring (c:ptr<?>, len:int, s:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_lstring](c, len, s)
    return ret
  public lostanza defn w_Z3_mk_u32string (c:ptr<?>, len:int, chars:ptr<int>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_u32string](c, len, chars)
    return ret
  public lostanza defn w_Z3_is_string (c:ptr<?>, s:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_string](c, s)
    return ret
  public lostanza defn w_Z3_get_string (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_get_string](c, s)
    return ret
  public lostanza defn w_Z3_get_lstring (c:ptr<?>, s:ptr<?>, length:ptr<int>) -> ptr<byte> :
    val ret = call-c [p_Z3_get_lstring](c, s, length)
    return ret
  public lostanza defn w_Z3_get_string_length (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_string_length](c, s)
    return ret
  public lostanza defn w_Z3_get_string_contents (c:ptr<?>, s:ptr<?>, length:int, contents:ptr<int>) -> ref<False> :
    call-c [p_Z3_get_string_contents](c, s, length, contents)
    return false
  public lostanza defn w_Z3_mk_seq_empty (c:ptr<?>, seq:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_empty](c, seq)
    return ret
  public lostanza defn w_Z3_mk_seq_unit (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_unit](c, a)
    return ret
  public lostanza defn w_Z3_mk_seq_concat (c:ptr<?>, n:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_concat](c, n, args)
    return ret
  public lostanza defn w_Z3_mk_seq_prefix (c:ptr<?>, prefix:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_prefix](c, prefix, s)
    return ret
  public lostanza defn w_Z3_mk_seq_suffix (c:ptr<?>, suffix:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_suffix](c, suffix, s)
    return ret
  public lostanza defn w_Z3_mk_seq_contains (c:ptr<?>, container:ptr<?>, containee:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_contains](c, container, containee)
    return ret
  public lostanza defn w_Z3_mk_str_lt (c:ptr<?>, prefix:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_str_lt](c, prefix, s)
    return ret
  public lostanza defn w_Z3_mk_str_le (c:ptr<?>, prefix:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_str_le](c, prefix, s)
    return ret
  public lostanza defn w_Z3_mk_seq_extract (c:ptr<?>, s:ptr<?>, offset:ptr<?>, length:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_extract](c, s, offset, length)
    return ret
  public lostanza defn w_Z3_mk_seq_replace (c:ptr<?>, s:ptr<?>, src:ptr<?>, dst:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_replace](c, s, src, dst)
    return ret
  public lostanza defn w_Z3_mk_seq_at (c:ptr<?>, s:ptr<?>, index:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_at](c, s, index)
    return ret
  public lostanza defn w_Z3_mk_seq_nth (c:ptr<?>, s:ptr<?>, index:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_nth](c, s, index)
    return ret
  public lostanza defn w_Z3_mk_seq_length (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_length](c, s)
    return ret
  public lostanza defn w_Z3_mk_seq_index (c:ptr<?>, s:ptr<?>, substr:ptr<?>, offset:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_index](c, s, substr, offset)
    return ret
  public lostanza defn w_Z3_mk_seq_last_index (c:ptr<?>, missing_name_v:ptr<?>, substr:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_last_index](c, missing_name_v, substr)
    return ret
  public lostanza defn w_Z3_mk_str_to_int (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_str_to_int](c, s)
    return ret
  public lostanza defn w_Z3_mk_int_to_str (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_int_to_str](c, s)
    return ret
  public lostanza defn w_Z3_mk_string_to_code (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_string_to_code](c, a)
    return ret
  public lostanza defn w_Z3_mk_string_from_code (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_string_from_code](c, a)
    return ret
  public lostanza defn w_Z3_mk_ubv_to_str (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_ubv_to_str](c, s)
    return ret
  public lostanza defn w_Z3_mk_sbv_to_str (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_sbv_to_str](c, s)
    return ret
  public lostanza defn w_Z3_mk_seq_to_re (c:ptr<?>, seq:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_to_re](c, seq)
    return ret
  public lostanza defn w_Z3_mk_seq_in_re (c:ptr<?>, seq:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_seq_in_re](c, seq, re)
    return ret
  public lostanza defn w_Z3_mk_re_plus (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_plus](c, re)
    return ret
  public lostanza defn w_Z3_mk_re_star (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_star](c, re)
    return ret
  public lostanza defn w_Z3_mk_re_option (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_option](c, re)
    return ret
  public lostanza defn w_Z3_mk_re_union (c:ptr<?>, n:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_union](c, n, args)
    return ret
  public lostanza defn w_Z3_mk_re_concat (c:ptr<?>, n:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_concat](c, n, args)
    return ret
  public lostanza defn w_Z3_mk_re_range (c:ptr<?>, lo:ptr<?>, hi:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_range](c, lo, hi)
    return ret
  public lostanza defn w_Z3_mk_re_allchar (c:ptr<?>, regex_sort:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_allchar](c, regex_sort)
    return ret
  public lostanza defn w_Z3_mk_re_loop (c:ptr<?>, r:ptr<?>, lo:int, hi:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_loop](c, r, lo, hi)
    return ret
  public lostanza defn w_Z3_mk_re_power (c:ptr<?>, missing_name_v:ptr<?>, n:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_power](c, missing_name_v, n)
    return ret
  public lostanza defn w_Z3_mk_re_intersect (c:ptr<?>, n:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_intersect](c, n, args)
    return ret
  public lostanza defn w_Z3_mk_re_complement (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_complement](c, re)
    return ret
  public lostanza defn w_Z3_mk_re_diff (c:ptr<?>, re1:ptr<?>, re2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_diff](c, re1, re2)
    return ret
  public lostanza defn w_Z3_mk_re_empty (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_empty](c, re)
    return ret
  public lostanza defn w_Z3_mk_re_full (c:ptr<?>, re:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_re_full](c, re)
    return ret
  public lostanza defn w_Z3_mk_char (c:ptr<?>, ch:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_char](c, ch)
    return ret
  public lostanza defn w_Z3_mk_char_le (c:ptr<?>, ch1:ptr<?>, ch2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_char_le](c, ch1, ch2)
    return ret
  public lostanza defn w_Z3_mk_char_to_int (c:ptr<?>, ch:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_char_to_int](c, ch)
    return ret
  public lostanza defn w_Z3_mk_char_to_bv (c:ptr<?>, ch:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_char_to_bv](c, ch)
    return ret
  public lostanza defn w_Z3_mk_char_from_bv (c:ptr<?>, bv:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_char_from_bv](c, bv)
    return ret
  public lostanza defn w_Z3_mk_char_is_digit (c:ptr<?>, ch:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_char_is_digit](c, ch)
    return ret
  public lostanza defn w_Z3_mk_linear_order (c:ptr<?>, a:ptr<?>, id:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_linear_order](c, a, id)
    return ret
  public lostanza defn w_Z3_mk_partial_order (c:ptr<?>, a:ptr<?>, id:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_partial_order](c, a, id)
    return ret
  public lostanza defn w_Z3_mk_piecewise_linear_order (c:ptr<?>, a:ptr<?>, id:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_piecewise_linear_order](c, a, id)
    return ret
  public lostanza defn w_Z3_mk_tree_order (c:ptr<?>, a:ptr<?>, id:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_tree_order](c, a, id)
    return ret
  public lostanza defn w_Z3_mk_transitive_closure (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_transitive_closure](c, f)
    return ret
  public lostanza defn w_Z3_mk_pattern (c:ptr<?>, num_patterns:int, terms:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_pattern](c, num_patterns, terms)
    return ret
  public lostanza defn w_Z3_mk_bound (c:ptr<?>, index:int, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_bound](c, index, ty)
    return ret
  public lostanza defn w_Z3_mk_forall (c:ptr<?>, weight:int, num_patterns:int, patterns:ptr<ptr<?>>, num_decls:int, sorts:ptr<ptr<?>>, decl_names:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_forall](c, weight, num_patterns, patterns, num_decls, sorts, decl_names, body)
    return ret
  public lostanza defn w_Z3_mk_exists (c:ptr<?>, weight:int, num_patterns:int, patterns:ptr<ptr<?>>, num_decls:int, sorts:ptr<ptr<?>>, decl_names:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_exists](c, weight, num_patterns, patterns, num_decls, sorts, decl_names, body)
    return ret
  public lostanza defn w_Z3_mk_quantifier (c:ptr<?>, is_forall:byte, weight:int, num_patterns:int, patterns:ptr<ptr<?>>, num_decls:int, sorts:ptr<ptr<?>>, decl_names:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_quantifier](c, is_forall, weight, num_patterns, patterns, num_decls, sorts, decl_names, body)
    return ret
  public lostanza defn w_Z3_mk_quantifier_ex (c:ptr<?>, is_forall:byte, weight:int, quantifier_id:ptr<?>, skolem_id:ptr<?>, num_patterns:int, patterns:ptr<ptr<?>>, num_no_patterns:int, no_patterns:ptr<ptr<?>>, num_decls:int, sorts:ptr<ptr<?>>, decl_names:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_quantifier_ex](c, is_forall, weight, quantifier_id, skolem_id, num_patterns, patterns, num_no_patterns, no_patterns, num_decls, sorts, decl_names, body)
    return ret
  public lostanza defn w_Z3_mk_forall_const (c:ptr<?>, weight:int, num_bound:int, bound:ptr<ptr<?>>, num_patterns:int, patterns:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_forall_const](c, weight, num_bound, bound, num_patterns, patterns, body)
    return ret
  public lostanza defn w_Z3_mk_exists_const (c:ptr<?>, weight:int, num_bound:int, bound:ptr<ptr<?>>, num_patterns:int, patterns:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_exists_const](c, weight, num_bound, bound, num_patterns, patterns, body)
    return ret
  public lostanza defn w_Z3_mk_quantifier_const (c:ptr<?>, is_forall:byte, weight:int, num_bound:int, bound:ptr<ptr<?>>, num_patterns:int, patterns:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_quantifier_const](c, is_forall, weight, num_bound, bound, num_patterns, patterns, body)
    return ret
  public lostanza defn w_Z3_mk_quantifier_const_ex (c:ptr<?>, is_forall:byte, weight:int, quantifier_id:ptr<?>, skolem_id:ptr<?>, num_bound:int, bound:ptr<ptr<?>>, num_patterns:int, patterns:ptr<ptr<?>>, num_no_patterns:int, no_patterns:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_quantifier_const_ex](c, is_forall, weight, quantifier_id, skolem_id, num_bound, bound, num_patterns, patterns, num_no_patterns, no_patterns, body)
    return ret
  public lostanza defn w_Z3_mk_lambda (c:ptr<?>, num_decls:int, sorts:ptr<ptr<?>>, decl_names:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_lambda](c, num_decls, sorts, decl_names, body)
    return ret
  public lostanza defn w_Z3_mk_lambda_const (c:ptr<?>, num_bound:int, bound:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_lambda_const](c, num_bound, bound, body)
    return ret
  public lostanza defn w_Z3_get_symbol_kind (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_symbol_kind](c, s)
    return ret
  public lostanza defn w_Z3_get_symbol_int (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_symbol_int](c, s)
    return ret
  public lostanza defn w_Z3_get_symbol_string (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_get_symbol_string](c, s)
    return ret
  public lostanza defn w_Z3_get_sort_name (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_sort_name](c, d)
    return ret
  public lostanza defn w_Z3_get_sort_id (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_sort_id](c, s)
    return ret
  public lostanza defn w_Z3_sort_to_ast (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_sort_to_ast](c, s)
    return ret
  public lostanza defn w_Z3_is_eq_sort (c:ptr<?>, s1:ptr<?>, s2:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_eq_sort](c, s1, s2)
    return ret
  public lostanza defn w_Z3_get_sort_kind (c:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_sort_kind](c, t)
    return ret
  public lostanza defn w_Z3_get_bv_sort_size (c:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_bv_sort_size](c, t)
    return ret
  public lostanza defn w_Z3_get_finite_domain_sort_size (c:ptr<?>, s:ptr<?>, r:ptr<long>) -> byte :
    val ret = call-c [p_Z3_get_finite_domain_sort_size](c, s, r)
    return ret
  public lostanza defn w_Z3_get_array_sort_domain (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_array_sort_domain](c, t)
    return ret
  public lostanza defn w_Z3_get_array_sort_domain_n (c:ptr<?>, t:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_array_sort_domain_n](c, t, idx)
    return ret
  public lostanza defn w_Z3_get_array_sort_range (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_array_sort_range](c, t)
    return ret
  public lostanza defn w_Z3_get_tuple_sort_mk_decl (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_tuple_sort_mk_decl](c, t)
    return ret
  public lostanza defn w_Z3_get_tuple_sort_num_fields (c:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_tuple_sort_num_fields](c, t)
    return ret
  public lostanza defn w_Z3_get_tuple_sort_field_decl (c:ptr<?>, t:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_tuple_sort_field_decl](c, t, i)
    return ret
  public lostanza defn w_Z3_get_datatype_sort_num_constructors (c:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_datatype_sort_num_constructors](c, t)
    return ret
  public lostanza defn w_Z3_get_datatype_sort_constructor (c:ptr<?>, t:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_datatype_sort_constructor](c, t, idx)
    return ret
  public lostanza defn w_Z3_get_datatype_sort_recognizer (c:ptr<?>, t:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_datatype_sort_recognizer](c, t, idx)
    return ret
  public lostanza defn w_Z3_get_datatype_sort_constructor_accessor (c:ptr<?>, t:ptr<?>, idx_c:int, idx_a:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_datatype_sort_constructor_accessor](c, t, idx_c, idx_a)
    return ret
  public lostanza defn w_Z3_datatype_update_field (c:ptr<?>, field_access:ptr<?>, t:ptr<?>, value:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_datatype_update_field](c, field_access, t, value)
    return ret
  public lostanza defn w_Z3_get_relation_arity (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_relation_arity](c, s)
    return ret
  public lostanza defn w_Z3_get_relation_column (c:ptr<?>, s:ptr<?>, col:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_relation_column](c, s, col)
    return ret
  public lostanza defn w_Z3_mk_atmost (c:ptr<?>, num_args:int, args:ptr<ptr<?>>, k:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_atmost](c, num_args, args, k)
    return ret
  public lostanza defn w_Z3_mk_atleast (c:ptr<?>, num_args:int, args:ptr<ptr<?>>, k:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_atleast](c, num_args, args, k)
    return ret
  public lostanza defn w_Z3_mk_pble (c:ptr<?>, num_args:int, args:ptr<ptr<?>>, coeffs:ptr<int>, k:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_pble](c, num_args, args, coeffs, k)
    return ret
  public lostanza defn w_Z3_mk_pbge (c:ptr<?>, num_args:int, args:ptr<ptr<?>>, coeffs:ptr<int>, k:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_pbge](c, num_args, args, coeffs, k)
    return ret
  public lostanza defn w_Z3_mk_pbeq (c:ptr<?>, num_args:int, args:ptr<ptr<?>>, coeffs:ptr<int>, k:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_pbeq](c, num_args, args, coeffs, k)
    return ret
  public lostanza defn w_Z3_func_decl_to_ast (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_func_decl_to_ast](c, f)
    return ret
  public lostanza defn w_Z3_is_eq_func_decl (c:ptr<?>, f1:ptr<?>, f2:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_eq_func_decl](c, f1, f2)
    return ret
  public lostanza defn w_Z3_get_func_decl_id (c:ptr<?>, f:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_func_decl_id](c, f)
    return ret
  public lostanza defn w_Z3_get_decl_name (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_decl_name](c, d)
    return ret
  public lostanza defn w_Z3_get_decl_kind (c:ptr<?>, d:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_decl_kind](c, d)
    return ret
  public lostanza defn w_Z3_get_domain_size (c:ptr<?>, d:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_domain_size](c, d)
    return ret
  public lostanza defn w_Z3_get_arity (c:ptr<?>, d:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_arity](c, d)
    return ret
  public lostanza defn w_Z3_get_domain (c:ptr<?>, d:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_domain](c, d, i)
    return ret
  public lostanza defn w_Z3_get_range (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_range](c, d)
    return ret
  public lostanza defn w_Z3_get_decl_num_parameters (c:ptr<?>, d:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_decl_num_parameters](c, d)
    return ret
  public lostanza defn w_Z3_get_decl_parameter_kind (c:ptr<?>, d:ptr<?>, idx:int) -> int :
    val ret = call-c [p_Z3_get_decl_parameter_kind](c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_int_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> int :
    val ret = call-c [p_Z3_get_decl_int_parameter](c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_double_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> double :
    val ret = call-c [p_Z3_get_decl_double_parameter](c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_symbol_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_decl_symbol_parameter](c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_sort_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_decl_sort_parameter](c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_ast_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_decl_ast_parameter](c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_func_decl_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_decl_func_decl_parameter](c, d, idx)
    return ret
  public lostanza defn w_Z3_get_decl_rational_parameter (c:ptr<?>, d:ptr<?>, idx:int) -> ptr<byte> :
    val ret = call-c [p_Z3_get_decl_rational_parameter](c, d, idx)
    return ret
  public lostanza defn w_Z3_app_to_ast (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_app_to_ast](c, a)
    return ret
  public lostanza defn w_Z3_get_app_decl (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_app_decl](c, a)
    return ret
  public lostanza defn w_Z3_get_app_num_args (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_app_num_args](c, a)
    return ret
  public lostanza defn w_Z3_get_app_arg (c:ptr<?>, a:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_app_arg](c, a, i)
    return ret
  public lostanza defn w_Z3_is_eq_ast (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_eq_ast](c, t1, t2)
    return ret
  public lostanza defn w_Z3_get_ast_id (c:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_ast_id](c, t)
    return ret
  public lostanza defn w_Z3_get_ast_hash (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_ast_hash](c, a)
    return ret
  public lostanza defn w_Z3_get_sort (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_sort](c, a)
    return ret
  public lostanza defn w_Z3_is_well_sorted (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_well_sorted](c, t)
    return ret
  public lostanza defn w_Z3_get_bool_value (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_bool_value](c, a)
    return ret
  public lostanza defn w_Z3_get_ast_kind (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_ast_kind](c, a)
    return ret
  public lostanza defn w_Z3_is_app (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_app](c, a)
    return ret
  public lostanza defn w_Z3_is_numeral_ast (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_numeral_ast](c, a)
    return ret
  public lostanza defn w_Z3_is_algebraic_number (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_algebraic_number](c, a)
    return ret
  public lostanza defn w_Z3_to_app (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_to_app](c, a)
    return ret
  public lostanza defn w_Z3_to_func_decl (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_to_func_decl](c, a)
    return ret
  public lostanza defn w_Z3_get_numeral_string (c:ptr<?>, a:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_get_numeral_string](c, a)
    return ret
  public lostanza defn w_Z3_get_numeral_binary_string (c:ptr<?>, a:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_get_numeral_binary_string](c, a)
    return ret
  public lostanza defn w_Z3_get_numeral_decimal_string (c:ptr<?>, a:ptr<?>, precision:int) -> ptr<byte> :
    val ret = call-c [p_Z3_get_numeral_decimal_string](c, a, precision)
    return ret
  public lostanza defn w_Z3_get_numeral_double (c:ptr<?>, a:ptr<?>) -> double :
    val ret = call-c [p_Z3_get_numeral_double](c, a)
    return ret
  public lostanza defn w_Z3_get_numerator (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_numerator](c, a)
    return ret
  public lostanza defn w_Z3_get_denominator (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_denominator](c, a)
    return ret
  public lostanza defn w_Z3_get_numeral_small (c:ptr<?>, a:ptr<?>, num:ptr<long>, den:ptr<long>) -> byte :
    val ret = call-c [p_Z3_get_numeral_small](c, a, num, den)
    return ret
  public lostanza defn w_Z3_get_numeral_int (c:ptr<?>, v:ptr<?>, i:ptr<int>) -> byte :
    val ret = call-c [p_Z3_get_numeral_int](c, v, i)
    return ret
  public lostanza defn w_Z3_get_numeral_uint (c:ptr<?>, v:ptr<?>, u:ptr<int>) -> byte :
    val ret = call-c [p_Z3_get_numeral_uint](c, v, u)
    return ret
  public lostanza defn w_Z3_get_numeral_uint64 (c:ptr<?>, v:ptr<?>, u:ptr<long>) -> byte :
    val ret = call-c [p_Z3_get_numeral_uint64](c, v, u)
    return ret
  public lostanza defn w_Z3_get_numeral_int64 (c:ptr<?>, v:ptr<?>, i:ptr<long>) -> byte :
    val ret = call-c [p_Z3_get_numeral_int64](c, v, i)
    return ret
  public lostanza defn w_Z3_get_numeral_rational_int64 (c:ptr<?>, v:ptr<?>, num:ptr<long>, den:ptr<long>) -> byte :
    val ret = call-c [p_Z3_get_numeral_rational_int64](c, v, num, den)
    return ret
  public lostanza defn w_Z3_get_algebraic_number_lower (c:ptr<?>, a:ptr<?>, precision:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_algebraic_number_lower](c, a, precision)
    return ret
  public lostanza defn w_Z3_get_algebraic_number_upper (c:ptr<?>, a:ptr<?>, precision:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_algebraic_number_upper](c, a, precision)
    return ret
  public lostanza defn w_Z3_pattern_to_ast (c:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_pattern_to_ast](c, p)
    return ret
  public lostanza defn w_Z3_get_pattern_num_terms (c:ptr<?>, p:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_pattern_num_terms](c, p)
    return ret
  public lostanza defn w_Z3_get_pattern (c:ptr<?>, p:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_pattern](c, p, idx)
    return ret
  public lostanza defn w_Z3_get_index_value (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_index_value](c, a)
    return ret
  public lostanza defn w_Z3_is_quantifier_forall (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_quantifier_forall](c, a)
    return ret
  public lostanza defn w_Z3_is_quantifier_exists (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_quantifier_exists](c, a)
    return ret
  public lostanza defn w_Z3_is_lambda (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_lambda](c, a)
    return ret
  public lostanza defn w_Z3_get_quantifier_weight (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_quantifier_weight](c, a)
    return ret
  public lostanza defn w_Z3_get_quantifier_num_patterns (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_quantifier_num_patterns](c, a)
    return ret
  public lostanza defn w_Z3_get_quantifier_pattern_ast (c:ptr<?>, a:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_quantifier_pattern_ast](c, a, i)
    return ret
  public lostanza defn w_Z3_get_quantifier_num_no_patterns (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_quantifier_num_no_patterns](c, a)
    return ret
  public lostanza defn w_Z3_get_quantifier_no_pattern_ast (c:ptr<?>, a:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_quantifier_no_pattern_ast](c, a, i)
    return ret
  public lostanza defn w_Z3_get_quantifier_num_bound (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_quantifier_num_bound](c, a)
    return ret
  public lostanza defn w_Z3_get_quantifier_bound_name (c:ptr<?>, a:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_quantifier_bound_name](c, a, i)
    return ret
  public lostanza defn w_Z3_get_quantifier_bound_sort (c:ptr<?>, a:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_get_quantifier_bound_sort](c, a, i)
    return ret
  public lostanza defn w_Z3_get_quantifier_body (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_quantifier_body](c, a)
    return ret
  public lostanza defn w_Z3_simplify (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_simplify](c, a)
    return ret
  public lostanza defn w_Z3_simplify_ex (c:ptr<?>, a:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_simplify_ex](c, a, p)
    return ret
  public lostanza defn w_Z3_simplify_get_help (c:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_simplify_get_help](c)
    return ret
  public lostanza defn w_Z3_simplify_get_param_descrs (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_simplify_get_param_descrs](c)
    return ret
  public lostanza defn w_Z3_update_term (c:ptr<?>, a:ptr<?>, num_args:int, args:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_update_term](c, a, num_args, args)
    return ret
  public lostanza defn w_Z3_substitute (c:ptr<?>, a:ptr<?>, num_exprs:int, from_v:ptr<ptr<?>>, to_v:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_substitute](c, a, num_exprs, from_v, to_v)
    return ret
  public lostanza defn w_Z3_substitute_vars (c:ptr<?>, a:ptr<?>, num_exprs:int, to_v:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_substitute_vars](c, a, num_exprs, to_v)
    return ret
  public lostanza defn w_Z3_substitute_funs (c:ptr<?>, a:ptr<?>, num_funs:int, from_v:ptr<ptr<?>>, to_v:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_substitute_funs](c, a, num_funs, from_v, to_v)
    return ret
  public lostanza defn w_Z3_translate (source:ptr<?>, a:ptr<?>, target:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_translate](source, a, target)
    return ret
  public lostanza defn w_Z3_mk_model (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_model](c)
    return ret
  public lostanza defn w_Z3_model_inc_ref (c:ptr<?>, m:ptr<?>) -> ref<False> :
    call-c [p_Z3_model_inc_ref](c, m)
    return false
  public lostanza defn w_Z3_model_dec_ref (c:ptr<?>, m:ptr<?>) -> ref<False> :
    call-c [p_Z3_model_dec_ref](c, m)
    return false
  public lostanza defn w_Z3_model_eval (c:ptr<?>, m:ptr<?>, t:ptr<?>, model_completion:byte, v:ptr<ptr<?>>) -> byte :
    val ret = call-c [p_Z3_model_eval](c, m, t, model_completion, v)
    return ret
  public lostanza defn w_Z3_model_get_const_interp (c:ptr<?>, m:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_model_get_const_interp](c, m, a)
    return ret
  public lostanza defn w_Z3_model_has_interp (c:ptr<?>, m:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_model_has_interp](c, m, a)
    return ret
  public lostanza defn w_Z3_model_get_func_interp (c:ptr<?>, m:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_model_get_func_interp](c, m, f)
    return ret
  public lostanza defn w_Z3_model_get_num_consts (c:ptr<?>, m:ptr<?>) -> int :
    val ret = call-c [p_Z3_model_get_num_consts](c, m)
    return ret
  public lostanza defn w_Z3_model_get_const_decl (c:ptr<?>, m:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_model_get_const_decl](c, m, i)
    return ret
  public lostanza defn w_Z3_model_get_num_funcs (c:ptr<?>, m:ptr<?>) -> int :
    val ret = call-c [p_Z3_model_get_num_funcs](c, m)
    return ret
  public lostanza defn w_Z3_model_get_func_decl (c:ptr<?>, m:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_model_get_func_decl](c, m, i)
    return ret
  public lostanza defn w_Z3_model_get_num_sorts (c:ptr<?>, m:ptr<?>) -> int :
    val ret = call-c [p_Z3_model_get_num_sorts](c, m)
    return ret
  public lostanza defn w_Z3_model_get_sort (c:ptr<?>, m:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_model_get_sort](c, m, i)
    return ret
  public lostanza defn w_Z3_model_get_sort_universe (c:ptr<?>, m:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_model_get_sort_universe](c, m, s)
    return ret
  public lostanza defn w_Z3_model_translate (c:ptr<?>, m:ptr<?>, dst:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_model_translate](c, m, dst)
    return ret
  public lostanza defn w_Z3_is_as_array (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_is_as_array](c, a)
    return ret
  public lostanza defn w_Z3_get_as_array_func_decl (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_get_as_array_func_decl](c, a)
    return ret
  public lostanza defn w_Z3_add_func_interp (c:ptr<?>, m:ptr<?>, f:ptr<?>, default_value:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_add_func_interp](c, m, f, default_value)
    return ret
  public lostanza defn w_Z3_add_const_interp (c:ptr<?>, m:ptr<?>, f:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c [p_Z3_add_const_interp](c, m, f, a)
    return false
  public lostanza defn w_Z3_func_interp_inc_ref (c:ptr<?>, f:ptr<?>) -> ref<False> :
    call-c [p_Z3_func_interp_inc_ref](c, f)
    return false
  public lostanza defn w_Z3_func_interp_dec_ref (c:ptr<?>, f:ptr<?>) -> ref<False> :
    call-c [p_Z3_func_interp_dec_ref](c, f)
    return false
  public lostanza defn w_Z3_func_interp_get_num_entries (c:ptr<?>, f:ptr<?>) -> int :
    val ret = call-c [p_Z3_func_interp_get_num_entries](c, f)
    return ret
  public lostanza defn w_Z3_func_interp_get_entry (c:ptr<?>, f:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_func_interp_get_entry](c, f, i)
    return ret
  public lostanza defn w_Z3_func_interp_get_else (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_func_interp_get_else](c, f)
    return ret
  public lostanza defn w_Z3_func_interp_set_else (c:ptr<?>, f:ptr<?>, else_value:ptr<?>) -> ref<False> :
    call-c [p_Z3_func_interp_set_else](c, f, else_value)
    return false
  public lostanza defn w_Z3_func_interp_get_arity (c:ptr<?>, f:ptr<?>) -> int :
    val ret = call-c [p_Z3_func_interp_get_arity](c, f)
    return ret
  public lostanza defn w_Z3_func_interp_add_entry (c:ptr<?>, fi:ptr<?>, args:ptr<?>, value:ptr<?>) -> ref<False> :
    call-c [p_Z3_func_interp_add_entry](c, fi, args, value)
    return false
  public lostanza defn w_Z3_func_entry_inc_ref (c:ptr<?>, e:ptr<?>) -> ref<False> :
    call-c [p_Z3_func_entry_inc_ref](c, e)
    return false
  public lostanza defn w_Z3_func_entry_dec_ref (c:ptr<?>, e:ptr<?>) -> ref<False> :
    call-c [p_Z3_func_entry_dec_ref](c, e)
    return false
  public lostanza defn w_Z3_func_entry_get_value (c:ptr<?>, e:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_func_entry_get_value](c, e)
    return ret
  public lostanza defn w_Z3_func_entry_get_num_args (c:ptr<?>, e:ptr<?>) -> int :
    val ret = call-c [p_Z3_func_entry_get_num_args](c, e)
    return ret
  public lostanza defn w_Z3_func_entry_get_arg (c:ptr<?>, e:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_func_entry_get_arg](c, e, i)
    return ret
  public lostanza defn w_Z3_open_log (filename:ptr<byte>) -> byte :
    val ret = call-c [p_Z3_open_log](filename)
    return ret
  public lostanza defn w_Z3_append_log (string:ptr<byte>) -> ref<False> :
    call-c [p_Z3_append_log](string)
    return false
  public lostanza defn w_Z3_close_log () -> ref<False> :
    call-c [p_Z3_close_log]()
    return false
  public lostanza defn w_Z3_toggle_warning_messages (enabled:byte) -> ref<False> :
    call-c [p_Z3_toggle_warning_messages](enabled)
    return false
  public lostanza defn w_Z3_set_ast_print_mode (c:ptr<?>, mode:int) -> ref<False> :
    call-c [p_Z3_set_ast_print_mode](c, mode)
    return false
  public lostanza defn w_Z3_ast_to_string (c:ptr<?>, a:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_ast_to_string](c, a)
    return ret
  public lostanza defn w_Z3_pattern_to_string (c:ptr<?>, p:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_pattern_to_string](c, p)
    return ret
  public lostanza defn w_Z3_sort_to_string (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_sort_to_string](c, s)
    return ret
  public lostanza defn w_Z3_func_decl_to_string (c:ptr<?>, d:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_func_decl_to_string](c, d)
    return ret
  public lostanza defn w_Z3_model_to_string (c:ptr<?>, m:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_model_to_string](c, m)
    return ret
  public lostanza defn w_Z3_benchmark_to_smtlib_string (c:ptr<?>, name:ptr<byte>, logic:ptr<byte>, status:ptr<byte>, attributes:ptr<byte>, num_assumptions:int, assumptions:ptr<ptr<?>>, formula:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_benchmark_to_smtlib_string](c, name, logic, status, attributes, num_assumptions, assumptions, formula)
    return ret
  public lostanza defn w_Z3_parse_smtlib2_string (c:ptr<?>, str:ptr<byte>, num_sorts:int, sort_names:ptr<ptr<?>>, sorts:ptr<ptr<?>>, num_decls:int, decl_names:ptr<ptr<?>>, decls:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_parse_smtlib2_string](c, str, num_sorts, sort_names, sorts, num_decls, decl_names, decls)
    return ret
  public lostanza defn w_Z3_parse_smtlib2_file (c:ptr<?>, file_name:ptr<byte>, num_sorts:int, sort_names:ptr<ptr<?>>, sorts:ptr<ptr<?>>, num_decls:int, decl_names:ptr<ptr<?>>, decls:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_parse_smtlib2_file](c, file_name, num_sorts, sort_names, sorts, num_decls, decl_names, decls)
    return ret
  public lostanza defn w_Z3_eval_smtlib2_string (missing_name_v:ptr<?>, str:ptr<byte>) -> ptr<byte> :
    val ret = call-c [p_Z3_eval_smtlib2_string](missing_name_v, str)
    return ret
  public lostanza defn w_Z3_mk_parser_context (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_parser_context](c)
    return ret
  public lostanza defn w_Z3_parser_context_inc_ref (c:ptr<?>, pc:ptr<?>) -> ref<False> :
    call-c [p_Z3_parser_context_inc_ref](c, pc)
    return false
  public lostanza defn w_Z3_parser_context_dec_ref (c:ptr<?>, pc:ptr<?>) -> ref<False> :
    call-c [p_Z3_parser_context_dec_ref](c, pc)
    return false
  public lostanza defn w_Z3_parser_context_add_sort (c:ptr<?>, pc:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c [p_Z3_parser_context_add_sort](c, pc, s)
    return false
  public lostanza defn w_Z3_parser_context_add_decl (c:ptr<?>, pc:ptr<?>, f:ptr<?>) -> ref<False> :
    call-c [p_Z3_parser_context_add_decl](c, pc, f)
    return false
  public lostanza defn w_Z3_parser_context_from_string (c:ptr<?>, pc:ptr<?>, s:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_Z3_parser_context_from_string](c, pc, s)
    return ret
  public lostanza defn w_Z3_get_error_code (c:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_error_code](c)
    return ret
  public lostanza defn w_Z3_set_error_handler (c:ptr<?>, h:ptr<( (ptr<?>,int) -> int )>) -> ref<False> :
    call-c [p_Z3_set_error_handler](c, h)
    return false
  public lostanza defn w_Z3_set_error (c:ptr<?>, e:int) -> ref<False> :
    call-c [p_Z3_set_error](c, e)
    return false
  public lostanza defn w_Z3_get_error_msg (c:ptr<?>, err:int) -> ptr<byte> :
    val ret = call-c [p_Z3_get_error_msg](c, err)
    return ret
  public lostanza defn w_Z3_get_version (major:ptr<int>, minor:ptr<int>, build_number:ptr<int>, revision_number:ptr<int>) -> ref<False> :
    call-c [p_Z3_get_version](major, minor, build_number, revision_number)
    return false
  public lostanza defn w_Z3_get_full_version () -> ptr<byte> :
    val ret = call-c [p_Z3_get_full_version]()
    return ret
  public lostanza defn w_Z3_enable_trace (tag:ptr<byte>) -> ref<False> :
    call-c [p_Z3_enable_trace](tag)
    return false
  public lostanza defn w_Z3_disable_trace (tag:ptr<byte>) -> ref<False> :
    call-c [p_Z3_disable_trace](tag)
    return false
  public lostanza defn w_Z3_reset_memory () -> ref<False> :
    call-c [p_Z3_reset_memory]()
    return false
  public lostanza defn w_Z3_finalize_memory () -> ref<False> :
    call-c [p_Z3_finalize_memory]()
    return false
  public lostanza defn w_Z3_mk_goal (c:ptr<?>, models:byte, unsat_cores:byte, proofs:byte) -> ptr<?> :
    val ret = call-c [p_Z3_mk_goal](c, models, unsat_cores, proofs)
    return ret
  public lostanza defn w_Z3_goal_inc_ref (c:ptr<?>, g:ptr<?>) -> ref<False> :
    call-c [p_Z3_goal_inc_ref](c, g)
    return false
  public lostanza defn w_Z3_goal_dec_ref (c:ptr<?>, g:ptr<?>) -> ref<False> :
    call-c [p_Z3_goal_dec_ref](c, g)
    return false
  public lostanza defn w_Z3_goal_precision (c:ptr<?>, g:ptr<?>) -> int :
    val ret = call-c [p_Z3_goal_precision](c, g)
    return ret
  public lostanza defn w_Z3_goal_assert (c:ptr<?>, g:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c [p_Z3_goal_assert](c, g, a)
    return false
  public lostanza defn w_Z3_goal_inconsistent (c:ptr<?>, g:ptr<?>) -> byte :
    val ret = call-c [p_Z3_goal_inconsistent](c, g)
    return ret
  public lostanza defn w_Z3_goal_depth (c:ptr<?>, g:ptr<?>) -> int :
    val ret = call-c [p_Z3_goal_depth](c, g)
    return ret
  public lostanza defn w_Z3_goal_reset (c:ptr<?>, g:ptr<?>) -> ref<False> :
    call-c [p_Z3_goal_reset](c, g)
    return false
  public lostanza defn w_Z3_goal_size (c:ptr<?>, g:ptr<?>) -> int :
    val ret = call-c [p_Z3_goal_size](c, g)
    return ret
  public lostanza defn w_Z3_goal_formula (c:ptr<?>, g:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_goal_formula](c, g, idx)
    return ret
  public lostanza defn w_Z3_goal_num_exprs (c:ptr<?>, g:ptr<?>) -> int :
    val ret = call-c [p_Z3_goal_num_exprs](c, g)
    return ret
  public lostanza defn w_Z3_goal_is_decided_sat (c:ptr<?>, g:ptr<?>) -> byte :
    val ret = call-c [p_Z3_goal_is_decided_sat](c, g)
    return ret
  public lostanza defn w_Z3_goal_is_decided_unsat (c:ptr<?>, g:ptr<?>) -> byte :
    val ret = call-c [p_Z3_goal_is_decided_unsat](c, g)
    return ret
  public lostanza defn w_Z3_goal_translate (source:ptr<?>, g:ptr<?>, target:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_goal_translate](source, g, target)
    return ret
  public lostanza defn w_Z3_goal_convert_model (c:ptr<?>, g:ptr<?>, m:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_goal_convert_model](c, g, m)
    return ret
  public lostanza defn w_Z3_goal_to_string (c:ptr<?>, g:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_goal_to_string](c, g)
    return ret
  public lostanza defn w_Z3_goal_to_dimacs_string (c:ptr<?>, g:ptr<?>, include_names:byte) -> ptr<byte> :
    val ret = call-c [p_Z3_goal_to_dimacs_string](c, g, include_names)
    return ret
  public lostanza defn w_Z3_mk_tactic (c:ptr<?>, name:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_tactic](c, name)
    return ret
  public lostanza defn w_Z3_tactic_inc_ref (c:ptr<?>, t:ptr<?>) -> ref<False> :
    call-c [p_Z3_tactic_inc_ref](c, t)
    return false
  public lostanza defn w_Z3_tactic_dec_ref (c:ptr<?>, g:ptr<?>) -> ref<False> :
    call-c [p_Z3_tactic_dec_ref](c, g)
    return false
  public lostanza defn w_Z3_mk_probe (c:ptr<?>, name:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_probe](c, name)
    return ret
  public lostanza defn w_Z3_probe_inc_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c [p_Z3_probe_inc_ref](c, p)
    return false
  public lostanza defn w_Z3_probe_dec_ref (c:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c [p_Z3_probe_dec_ref](c, p)
    return false
  public lostanza defn w_Z3_tactic_and_then (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_and_then](c, t1, t2)
    return ret
  public lostanza defn w_Z3_tactic_or_else (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_or_else](c, t1, t2)
    return ret
  public lostanza defn w_Z3_tactic_par_or (c:ptr<?>, num:int, ts:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_par_or](c, num, ts)
    return ret
  public lostanza defn w_Z3_tactic_par_and_then (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_par_and_then](c, t1, t2)
    return ret
  public lostanza defn w_Z3_tactic_try_for (c:ptr<?>, t:ptr<?>, ms:int) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_try_for](c, t, ms)
    return ret
  public lostanza defn w_Z3_tactic_when (c:ptr<?>, p:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_when](c, p, t)
    return ret
  public lostanza defn w_Z3_tactic_cond (c:ptr<?>, p:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_cond](c, p, t1, t2)
    return ret
  public lostanza defn w_Z3_tactic_repeat (c:ptr<?>, t:ptr<?>, max:int) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_repeat](c, t, max)
    return ret
  public lostanza defn w_Z3_tactic_skip (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_skip](c)
    return ret
  public lostanza defn w_Z3_tactic_fail (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_fail](c)
    return ret
  public lostanza defn w_Z3_tactic_fail_if (c:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_fail_if](c, p)
    return ret
  public lostanza defn w_Z3_tactic_fail_if_not_decided (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_fail_if_not_decided](c)
    return ret
  public lostanza defn w_Z3_tactic_using_params (c:ptr<?>, t:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_using_params](c, t, p)
    return ret
  public lostanza defn w_Z3_probe_const (x:ptr<?>, val_v:double) -> ptr<?> :
    val ret = call-c [p_Z3_probe_const](x, val_v)
    return ret
  public lostanza defn w_Z3_probe_lt (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_probe_lt](x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_gt (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_probe_gt](x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_le (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_probe_le](x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_ge (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_probe_ge](x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_eq (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_probe_eq](x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_and (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_probe_and](x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_or (x:ptr<?>, p1:ptr<?>, p2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_probe_or](x, p1, p2)
    return ret
  public lostanza defn w_Z3_probe_not (x:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_probe_not](x, p)
    return ret
  public lostanza defn w_Z3_get_num_tactics (c:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_num_tactics](c)
    return ret
  public lostanza defn w_Z3_get_tactic_name (c:ptr<?>, i:int) -> ptr<byte> :
    val ret = call-c [p_Z3_get_tactic_name](c, i)
    return ret
  public lostanza defn w_Z3_get_num_probes (c:ptr<?>) -> int :
    val ret = call-c [p_Z3_get_num_probes](c)
    return ret
  public lostanza defn w_Z3_get_probe_name (c:ptr<?>, i:int) -> ptr<byte> :
    val ret = call-c [p_Z3_get_probe_name](c, i)
    return ret
  public lostanza defn w_Z3_tactic_get_help (c:ptr<?>, t:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_tactic_get_help](c, t)
    return ret
  public lostanza defn w_Z3_tactic_get_param_descrs (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_get_param_descrs](c, t)
    return ret
  public lostanza defn w_Z3_tactic_get_descr (c:ptr<?>, name:ptr<byte>) -> ptr<byte> :
    val ret = call-c [p_Z3_tactic_get_descr](c, name)
    return ret
  public lostanza defn w_Z3_probe_get_descr (c:ptr<?>, name:ptr<byte>) -> ptr<byte> :
    val ret = call-c [p_Z3_probe_get_descr](c, name)
    return ret
  public lostanza defn w_Z3_probe_apply (c:ptr<?>, p:ptr<?>, g:ptr<?>) -> double :
    val ret = call-c [p_Z3_probe_apply](c, p, g)
    return ret
  public lostanza defn w_Z3_tactic_apply (c:ptr<?>, t:ptr<?>, g:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_apply](c, t, g)
    return ret
  public lostanza defn w_Z3_tactic_apply_ex (c:ptr<?>, t:ptr<?>, g:ptr<?>, p:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_tactic_apply_ex](c, t, g, p)
    return ret
  public lostanza defn w_Z3_apply_result_inc_ref (c:ptr<?>, r:ptr<?>) -> ref<False> :
    call-c [p_Z3_apply_result_inc_ref](c, r)
    return false
  public lostanza defn w_Z3_apply_result_dec_ref (c:ptr<?>, r:ptr<?>) -> ref<False> :
    call-c [p_Z3_apply_result_dec_ref](c, r)
    return false
  public lostanza defn w_Z3_apply_result_to_string (c:ptr<?>, r:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_apply_result_to_string](c, r)
    return ret
  public lostanza defn w_Z3_apply_result_get_num_subgoals (c:ptr<?>, r:ptr<?>) -> int :
    val ret = call-c [p_Z3_apply_result_get_num_subgoals](c, r)
    return ret
  public lostanza defn w_Z3_apply_result_get_subgoal (c:ptr<?>, r:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_apply_result_get_subgoal](c, r, i)
    return ret
  public lostanza defn w_Z3_mk_solver (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_solver](c)
    return ret
  public lostanza defn w_Z3_mk_simple_solver (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_simple_solver](c)
    return ret
  public lostanza defn w_Z3_mk_solver_for_logic (c:ptr<?>, logic:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_solver_for_logic](c, logic)
    return ret
  public lostanza defn w_Z3_mk_solver_from_tactic (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_solver_from_tactic](c, t)
    return ret
  public lostanza defn w_Z3_solver_translate (source:ptr<?>, s:ptr<?>, target:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_translate](source, s, target)
    return ret
  public lostanza defn w_Z3_solver_import_model_converter (ctx:ptr<?>, src:ptr<?>, dst:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_import_model_converter](ctx, src, dst)
    return false
  public lostanza defn w_Z3_solver_get_help (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_solver_get_help](c, s)
    return ret
  public lostanza defn w_Z3_solver_get_param_descrs (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_get_param_descrs](c, s)
    return ret
  public lostanza defn w_Z3_solver_set_params (c:ptr<?>, s:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_set_params](c, s, p)
    return false
  public lostanza defn w_Z3_solver_inc_ref (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_inc_ref](c, s)
    return false
  public lostanza defn w_Z3_solver_dec_ref (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_dec_ref](c, s)
    return false
  public lostanza defn w_Z3_solver_interrupt (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_interrupt](c, s)
    return false
  public lostanza defn w_Z3_solver_push (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_push](c, s)
    return false
  public lostanza defn w_Z3_solver_pop (c:ptr<?>, s:ptr<?>, n:int) -> ref<False> :
    call-c [p_Z3_solver_pop](c, s, n)
    return false
  public lostanza defn w_Z3_solver_reset (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_reset](c, s)
    return false
  public lostanza defn w_Z3_solver_get_num_scopes (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c [p_Z3_solver_get_num_scopes](c, s)
    return ret
  public lostanza defn w_Z3_solver_assert (c:ptr<?>, s:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_assert](c, s, a)
    return false
  public lostanza defn w_Z3_solver_assert_and_track (c:ptr<?>, s:ptr<?>, a:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_assert_and_track](c, s, a, p)
    return false
  public lostanza defn w_Z3_solver_from_file (c:ptr<?>, s:ptr<?>, file_name:ptr<byte>) -> ref<False> :
    call-c [p_Z3_solver_from_file](c, s, file_name)
    return false
  public lostanza defn w_Z3_solver_from_string (c:ptr<?>, s:ptr<?>, file_name:ptr<byte>) -> ref<False> :
    call-c [p_Z3_solver_from_string](c, s, file_name)
    return false
  public lostanza defn w_Z3_solver_get_assertions (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_get_assertions](c, s)
    return ret
  public lostanza defn w_Z3_solver_get_units (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_get_units](c, s)
    return ret
  public lostanza defn w_Z3_solver_get_trail (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_get_trail](c, s)
    return ret
  public lostanza defn w_Z3_solver_get_non_units (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_get_non_units](c, s)
    return ret
  public lostanza defn w_Z3_solver_get_levels (c:ptr<?>, s:ptr<?>, literals:ptr<?>, sz:int, levels:ptr<int>) -> ref<False> :
    call-c [p_Z3_solver_get_levels](c, s, literals, sz, levels)
    return false
  public lostanza defn w_Z3_solver_propagate_init (c:ptr<?>, s:ptr<?>, user_context:ptr<?>, push_eh:ptr<( (ptr<?>,ptr<?>) -> int )>, pop_eh:ptr<( (ptr<?>,ptr<?>,int) -> int )>, fresh_eh:ptr<( (ptr<?>,ptr<?>) -> ptr<?> )>) -> ref<False> :
    call-c [p_Z3_solver_propagate_init](c, s, user_context, push_eh, pop_eh, fresh_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_fixed (c:ptr<?>, s:ptr<?>, fixed_eh:ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_Z3_solver_propagate_fixed](c, s, fixed_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_final (c:ptr<?>, s:ptr<?>, final_eh:ptr<( (ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_Z3_solver_propagate_final](c, s, final_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_eq (c:ptr<?>, s:ptr<?>, eq_eh:ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_Z3_solver_propagate_eq](c, s, eq_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_diseq (c:ptr<?>, s:ptr<?>, eq_eh:ptr<( (ptr<?>,ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_Z3_solver_propagate_diseq](c, s, eq_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_created (c:ptr<?>, s:ptr<?>, created_eh:ptr<( (ptr<?>,ptr<?>,ptr<?>) -> int )>) -> ref<False> :
    call-c [p_Z3_solver_propagate_created](c, s, created_eh)
    return false
  public lostanza defn w_Z3_solver_propagate_decide (c:ptr<?>, s:ptr<?>, decide_eh:ptr<( (ptr<?>,ptr<?>,ptr<ptr<?>>,ptr<int>,ptr<int>) -> int )>) -> ref<False> :
    call-c [p_Z3_solver_propagate_decide](c, s, decide_eh)
    return false
  public lostanza defn w_Z3_solver_next_split (c:ptr<?>, cb:ptr<?>, t:ptr<?>, idx:int, phase:int) -> ref<False> :
    call-c [p_Z3_solver_next_split](c, cb, t, idx, phase)
    return false
  public lostanza defn w_Z3_solver_propagate_declare (c:ptr<?>, name:ptr<?>, n:int, domain:ptr<ptr<?>>, range:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_propagate_declare](c, name, n, domain, range)
    return ret
  public lostanza defn w_Z3_solver_propagate_register (c:ptr<?>, s:ptr<?>, e:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_propagate_register](c, s, e)
    return false
  public lostanza defn w_Z3_solver_propagate_register_cb (c:ptr<?>, cb:ptr<?>, e:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_propagate_register_cb](c, cb, e)
    return false
  public lostanza defn w_Z3_solver_propagate_consequence (c:ptr<?>, missing_name_v:ptr<?>, num_fixed:int, fixed:ptr<ptr<?>>, num_eqs:int, eq_lhs:ptr<ptr<?>>, eq_rhs:ptr<ptr<?>>, conseq:ptr<?>) -> ref<False> :
    call-c [p_Z3_solver_propagate_consequence](c, missing_name_v, num_fixed, fixed, num_eqs, eq_lhs, eq_rhs, conseq)
    return false
  public lostanza defn w_Z3_solver_check (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c [p_Z3_solver_check](c, s)
    return ret
  public lostanza defn w_Z3_solver_check_assumptions (c:ptr<?>, s:ptr<?>, num_assumptions:int, assumptions:ptr<ptr<?>>) -> int :
    val ret = call-c [p_Z3_solver_check_assumptions](c, s, num_assumptions, assumptions)
    return ret
  public lostanza defn w_Z3_get_implied_equalities (c:ptr<?>, s:ptr<?>, num_terms:int, terms:ptr<ptr<?>>, class_ids:ptr<int>) -> int :
    val ret = call-c [p_Z3_get_implied_equalities](c, s, num_terms, terms, class_ids)
    return ret
  public lostanza defn w_Z3_solver_get_consequences (c:ptr<?>, s:ptr<?>, assumptions:ptr<?>, variables:ptr<?>, consequences:ptr<?>) -> int :
    val ret = call-c [p_Z3_solver_get_consequences](c, s, assumptions, variables, consequences)
    return ret
  public lostanza defn w_Z3_solver_cube (c:ptr<?>, s:ptr<?>, vars:ptr<?>, backtrack_level:int) -> ptr<?> :
    val ret = call-c [p_Z3_solver_cube](c, s, vars, backtrack_level)
    return ret
  public lostanza defn w_Z3_solver_get_model (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_get_model](c, s)
    return ret
  public lostanza defn w_Z3_solver_get_proof (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_get_proof](c, s)
    return ret
  public lostanza defn w_Z3_solver_get_unsat_core (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_get_unsat_core](c, s)
    return ret
  public lostanza defn w_Z3_solver_get_reason_unknown (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_solver_get_reason_unknown](c, s)
    return ret
  public lostanza defn w_Z3_solver_get_statistics (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_solver_get_statistics](c, s)
    return ret
  public lostanza defn w_Z3_solver_to_string (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_solver_to_string](c, s)
    return ret
  public lostanza defn w_Z3_solver_to_dimacs_string (c:ptr<?>, s:ptr<?>, include_names:byte) -> ptr<byte> :
    val ret = call-c [p_Z3_solver_to_dimacs_string](c, s, include_names)
    return ret
  public lostanza defn w_Z3_stats_to_string (c:ptr<?>, s:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_stats_to_string](c, s)
    return ret
  public lostanza defn w_Z3_stats_inc_ref (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c [p_Z3_stats_inc_ref](c, s)
    return false
  public lostanza defn w_Z3_stats_dec_ref (c:ptr<?>, s:ptr<?>) -> ref<False> :
    call-c [p_Z3_stats_dec_ref](c, s)
    return false
  public lostanza defn w_Z3_stats_size (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c [p_Z3_stats_size](c, s)
    return ret
  public lostanza defn w_Z3_stats_get_key (c:ptr<?>, s:ptr<?>, idx:int) -> ptr<byte> :
    val ret = call-c [p_Z3_stats_get_key](c, s, idx)
    return ret
  public lostanza defn w_Z3_stats_is_uint (c:ptr<?>, s:ptr<?>, idx:int) -> byte :
    val ret = call-c [p_Z3_stats_is_uint](c, s, idx)
    return ret
  public lostanza defn w_Z3_stats_is_double (c:ptr<?>, s:ptr<?>, idx:int) -> byte :
    val ret = call-c [p_Z3_stats_is_double](c, s, idx)
    return ret
  public lostanza defn w_Z3_stats_get_uint_value (c:ptr<?>, s:ptr<?>, idx:int) -> int :
    val ret = call-c [p_Z3_stats_get_uint_value](c, s, idx)
    return ret
  public lostanza defn w_Z3_stats_get_double_value (c:ptr<?>, s:ptr<?>, idx:int) -> double :
    val ret = call-c [p_Z3_stats_get_double_value](c, s, idx)
    return ret
  public lostanza defn w_Z3_get_estimated_alloc_size () -> long :
    val ret = call-c [p_Z3_get_estimated_alloc_size]()
    return ret
  public lostanza defn w_Z3_mk_ast_vector (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_ast_vector](c)
    return ret
  public lostanza defn w_Z3_ast_vector_inc_ref (c:ptr<?>, v:ptr<?>) -> ref<False> :
    call-c [p_Z3_ast_vector_inc_ref](c, v)
    return false
  public lostanza defn w_Z3_ast_vector_dec_ref (c:ptr<?>, v:ptr<?>) -> ref<False> :
    call-c [p_Z3_ast_vector_dec_ref](c, v)
    return false
  public lostanza defn w_Z3_ast_vector_size (c:ptr<?>, v:ptr<?>) -> int :
    val ret = call-c [p_Z3_ast_vector_size](c, v)
    return ret
  public lostanza defn w_Z3_ast_vector_get (c:ptr<?>, v:ptr<?>, i:int) -> ptr<?> :
    val ret = call-c [p_Z3_ast_vector_get](c, v, i)
    return ret
  public lostanza defn w_Z3_ast_vector_set (c:ptr<?>, v:ptr<?>, i:int, a:ptr<?>) -> ref<False> :
    call-c [p_Z3_ast_vector_set](c, v, i, a)
    return false
  public lostanza defn w_Z3_ast_vector_resize (c:ptr<?>, v:ptr<?>, n:int) -> ref<False> :
    call-c [p_Z3_ast_vector_resize](c, v, n)
    return false
  public lostanza defn w_Z3_ast_vector_push (c:ptr<?>, v:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c [p_Z3_ast_vector_push](c, v, a)
    return false
  public lostanza defn w_Z3_ast_vector_translate (s:ptr<?>, v:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_ast_vector_translate](s, v, t)
    return ret
  public lostanza defn w_Z3_ast_vector_to_string (c:ptr<?>, v:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_ast_vector_to_string](c, v)
    return ret
  public lostanza defn w_Z3_mk_ast_map (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_ast_map](c)
    return ret
  public lostanza defn w_Z3_ast_map_inc_ref (c:ptr<?>, m:ptr<?>) -> ref<False> :
    call-c [p_Z3_ast_map_inc_ref](c, m)
    return false
  public lostanza defn w_Z3_ast_map_dec_ref (c:ptr<?>, m:ptr<?>) -> ref<False> :
    call-c [p_Z3_ast_map_dec_ref](c, m)
    return false
  public lostanza defn w_Z3_ast_map_contains (c:ptr<?>, m:ptr<?>, k:ptr<?>) -> byte :
    val ret = call-c [p_Z3_ast_map_contains](c, m, k)
    return ret
  public lostanza defn w_Z3_ast_map_find (c:ptr<?>, m:ptr<?>, k:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_ast_map_find](c, m, k)
    return ret
  public lostanza defn w_Z3_ast_map_insert (c:ptr<?>, m:ptr<?>, k:ptr<?>, v:ptr<?>) -> ref<False> :
    call-c [p_Z3_ast_map_insert](c, m, k, v)
    return false
  public lostanza defn w_Z3_ast_map_erase (c:ptr<?>, m:ptr<?>, k:ptr<?>) -> ref<False> :
    call-c [p_Z3_ast_map_erase](c, m, k)
    return false
  public lostanza defn w_Z3_ast_map_reset (c:ptr<?>, m:ptr<?>) -> ref<False> :
    call-c [p_Z3_ast_map_reset](c, m)
    return false
  public lostanza defn w_Z3_ast_map_size (c:ptr<?>, m:ptr<?>) -> int :
    val ret = call-c [p_Z3_ast_map_size](c, m)
    return ret
  public lostanza defn w_Z3_ast_map_keys (c:ptr<?>, m:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_ast_map_keys](c, m)
    return ret
  public lostanza defn w_Z3_ast_map_to_string (c:ptr<?>, m:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_ast_map_to_string](c, m)
    return ret
  public lostanza defn w_Z3_algebraic_is_value (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_algebraic_is_value](c, a)
    return ret
  public lostanza defn w_Z3_algebraic_is_pos (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_algebraic_is_pos](c, a)
    return ret
  public lostanza defn w_Z3_algebraic_is_neg (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_algebraic_is_neg](c, a)
    return ret
  public lostanza defn w_Z3_algebraic_is_zero (c:ptr<?>, a:ptr<?>) -> byte :
    val ret = call-c [p_Z3_algebraic_is_zero](c, a)
    return ret
  public lostanza defn w_Z3_algebraic_sign (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_algebraic_sign](c, a)
    return ret
  public lostanza defn w_Z3_algebraic_add (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_algebraic_add](c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_sub (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_algebraic_sub](c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_mul (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_algebraic_mul](c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_div (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_algebraic_div](c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_root (c:ptr<?>, a:ptr<?>, k:int) -> ptr<?> :
    val ret = call-c [p_Z3_algebraic_root](c, a, k)
    return ret
  public lostanza defn w_Z3_algebraic_power (c:ptr<?>, a:ptr<?>, k:int) -> ptr<?> :
    val ret = call-c [p_Z3_algebraic_power](c, a, k)
    return ret
  public lostanza defn w_Z3_algebraic_lt (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_algebraic_lt](c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_gt (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_algebraic_gt](c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_le (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_algebraic_le](c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_ge (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_algebraic_ge](c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_eq (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_algebraic_eq](c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_neq (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_algebraic_neq](c, a, b)
    return ret
  public lostanza defn w_Z3_algebraic_roots (c:ptr<?>, p:ptr<?>, n:int, a:ptr<ptr<?>>) -> ptr<?> :
    val ret = call-c [p_Z3_algebraic_roots](c, p, n, a)
    return ret
  public lostanza defn w_Z3_algebraic_eval (c:ptr<?>, p:ptr<?>, n:int, a:ptr<ptr<?>>) -> int :
    val ret = call-c [p_Z3_algebraic_eval](c, p, n, a)
    return ret
  public lostanza defn w_Z3_algebraic_get_poly (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_algebraic_get_poly](c, a)
    return ret
  public lostanza defn w_Z3_algebraic_get_i (c:ptr<?>, a:ptr<?>) -> int :
    val ret = call-c [p_Z3_algebraic_get_i](c, a)
    return ret
  public lostanza defn w_Z3_polynomial_subresultants (c:ptr<?>, p:ptr<?>, q:ptr<?>, x:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_polynomial_subresultants](c, p, q, x)
    return ret
  public lostanza defn w_Z3_rcf_del (c:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c [p_Z3_rcf_del](c, a)
    return false
  public lostanza defn w_Z3_rcf_mk_rational (c:ptr<?>, val_v:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_mk_rational](c, val_v)
    return ret
  public lostanza defn w_Z3_rcf_mk_small_int (c:ptr<?>, val_v:int) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_mk_small_int](c, val_v)
    return ret
  public lostanza defn w_Z3_rcf_mk_pi (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_mk_pi](c)
    return ret
  public lostanza defn w_Z3_rcf_mk_e (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_mk_e](c)
    return ret
  public lostanza defn w_Z3_rcf_mk_infinitesimal (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_mk_infinitesimal](c)
    return ret
  public lostanza defn w_Z3_rcf_mk_roots (c:ptr<?>, n:int, a:ptr<ptr<?>>, roots:ptr<ptr<?>>) -> int :
    val ret = call-c [p_Z3_rcf_mk_roots](c, n, a, roots)
    return ret
  public lostanza defn w_Z3_rcf_add (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_add](c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_sub (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_sub](c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_mul (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_mul](c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_div (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_div](c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_neg (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_neg](c, a)
    return ret
  public lostanza defn w_Z3_rcf_inv (c:ptr<?>, a:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_inv](c, a)
    return ret
  public lostanza defn w_Z3_rcf_power (c:ptr<?>, a:ptr<?>, k:int) -> ptr<?> :
    val ret = call-c [p_Z3_rcf_power](c, a, k)
    return ret
  public lostanza defn w_Z3_rcf_lt (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_rcf_lt](c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_gt (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_rcf_gt](c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_le (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_rcf_le](c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_ge (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_rcf_ge](c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_eq (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_rcf_eq](c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_neq (c:ptr<?>, a:ptr<?>, b:ptr<?>) -> byte :
    val ret = call-c [p_Z3_rcf_neq](c, a, b)
    return ret
  public lostanza defn w_Z3_rcf_num_to_string (c:ptr<?>, a:ptr<?>, compact:byte, html:byte) -> ptr<byte> :
    val ret = call-c [p_Z3_rcf_num_to_string](c, a, compact, html)
    return ret
  public lostanza defn w_Z3_rcf_num_to_decimal_string (c:ptr<?>, a:ptr<?>, prec:int) -> ptr<byte> :
    val ret = call-c [p_Z3_rcf_num_to_decimal_string](c, a, prec)
    return ret
  public lostanza defn w_Z3_rcf_get_numerator_denominator (c:ptr<?>, a:ptr<?>, n:ptr<ptr<?>>, d:ptr<ptr<?>>) -> ref<False> :
    call-c [p_Z3_rcf_get_numerator_denominator](c, a, n, d)
    return false
  public lostanza defn w_Z3_mk_fixedpoint (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fixedpoint](c)
    return ret
  public lostanza defn w_Z3_fixedpoint_inc_ref (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c [p_Z3_fixedpoint_inc_ref](c, d)
    return false
  public lostanza defn w_Z3_fixedpoint_dec_ref (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c [p_Z3_fixedpoint_dec_ref](c, d)
    return false
  public lostanza defn w_Z3_fixedpoint_add_rule (c:ptr<?>, d:ptr<?>, rule:ptr<?>, name:ptr<?>) -> ref<False> :
    call-c [p_Z3_fixedpoint_add_rule](c, d, rule, name)
    return false
  public lostanza defn w_Z3_fixedpoint_add_fact (c:ptr<?>, d:ptr<?>, r:ptr<?>, num_args:int, args:ptr<int>) -> ref<False> :
    call-c [p_Z3_fixedpoint_add_fact](c, d, r, num_args, args)
    return false
  public lostanza defn w_Z3_fixedpoint_assert (c:ptr<?>, d:ptr<?>, axiom:ptr<?>) -> ref<False> :
    call-c [p_Z3_fixedpoint_assert](c, d, axiom)
    return false
  public lostanza defn w_Z3_fixedpoint_query (c:ptr<?>, d:ptr<?>, query:ptr<?>) -> int :
    val ret = call-c [p_Z3_fixedpoint_query](c, d, query)
    return ret
  public lostanza defn w_Z3_fixedpoint_query_relations (c:ptr<?>, d:ptr<?>, num_relations:int, relations:ptr<ptr<?>>) -> int :
    val ret = call-c [p_Z3_fixedpoint_query_relations](c, d, num_relations, relations)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_answer (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_get_answer](c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_reason_unknown (c:ptr<?>, d:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_fixedpoint_get_reason_unknown](c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_update_rule (c:ptr<?>, d:ptr<?>, a:ptr<?>, name:ptr<?>) -> ref<False> :
    call-c [p_Z3_fixedpoint_update_rule](c, d, a, name)
    return false
  public lostanza defn w_Z3_fixedpoint_get_num_levels (c:ptr<?>, d:ptr<?>, pred:ptr<?>) -> int :
    val ret = call-c [p_Z3_fixedpoint_get_num_levels](c, d, pred)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_cover_delta (c:ptr<?>, d:ptr<?>, level:int, pred:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_get_cover_delta](c, d, level, pred)
    return ret
  public lostanza defn w_Z3_fixedpoint_add_cover (c:ptr<?>, d:ptr<?>, level:int, pred:ptr<?>, property:ptr<?>) -> ref<False> :
    call-c [p_Z3_fixedpoint_add_cover](c, d, level, pred, property)
    return false
  public lostanza defn w_Z3_fixedpoint_get_statistics (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_get_statistics](c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_register_relation (c:ptr<?>, d:ptr<?>, f:ptr<?>) -> ref<False> :
    call-c [p_Z3_fixedpoint_register_relation](c, d, f)
    return false
  public lostanza defn w_Z3_fixedpoint_set_predicate_representation (c:ptr<?>, d:ptr<?>, f:ptr<?>, num_relations:int, relation_kinds:ptr<ptr<?>>) -> ref<False> :
    call-c [p_Z3_fixedpoint_set_predicate_representation](c, d, f, num_relations, relation_kinds)
    return false
  public lostanza defn w_Z3_fixedpoint_get_rules (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_get_rules](c, f)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_assertions (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_get_assertions](c, f)
    return ret
  public lostanza defn w_Z3_fixedpoint_set_params (c:ptr<?>, f:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c [p_Z3_fixedpoint_set_params](c, f, p)
    return false
  public lostanza defn w_Z3_fixedpoint_get_help (c:ptr<?>, f:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_fixedpoint_get_help](c, f)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_param_descrs (c:ptr<?>, f:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_get_param_descrs](c, f)
    return ret
  public lostanza defn w_Z3_fixedpoint_to_string (c:ptr<?>, f:ptr<?>, num_queries:int, queries:ptr<ptr<?>>) -> ptr<byte> :
    val ret = call-c [p_Z3_fixedpoint_to_string](c, f, num_queries, queries)
    return ret
  public lostanza defn w_Z3_fixedpoint_from_string (c:ptr<?>, f:ptr<?>, s:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_from_string](c, f, s)
    return ret
  public lostanza defn w_Z3_fixedpoint_from_file (c:ptr<?>, f:ptr<?>, s:ptr<byte>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_from_file](c, f, s)
    return ret
  public lostanza defn w_Z3_fixedpoint_init (c:ptr<?>, d:ptr<?>, state:ptr<?>) -> ref<False> :
    call-c [p_Z3_fixedpoint_init](c, d, state)
    return false
  public lostanza defn w_Z3_fixedpoint_set_reduce_assign_callback (c:ptr<?>, d:ptr<?>, cb:ptr<( (ptr<?>,ptr<?>,int,ptr<ptr<?>>,int,ptr<ptr<?>>) -> int )>) -> ref<False> :
    call-c [p_Z3_fixedpoint_set_reduce_assign_callback](c, d, cb)
    return false
  public lostanza defn w_Z3_fixedpoint_set_reduce_app_callback (c:ptr<?>, d:ptr<?>, cb:ptr<( (ptr<?>,ptr<?>,int,ptr<ptr<?>>,ptr<ptr<?>>) -> int )>) -> ref<False> :
    call-c [p_Z3_fixedpoint_set_reduce_app_callback](c, d, cb)
    return false
  public lostanza defn w_Z3_fixedpoint_add_callback (ctx:ptr<?>, f:ptr<?>, state:ptr<?>, new_lemma_eh:ptr<ptr<( (ptr<?>,ptr<?>,int) -> int )>>, predecessor_eh:ptr<ptr<( (ptr<?>) -> int )>>, unfold_eh:ptr<ptr<( (ptr<?>) -> int )>>) -> ref<False> :
    call-c [p_Z3_fixedpoint_add_callback](ctx, f, state, new_lemma_eh, predecessor_eh, unfold_eh)
    return false
  public lostanza defn w_Z3_fixedpoint_add_constraint (c:ptr<?>, d:ptr<?>, e:ptr<?>, lvl:int) -> ref<False> :
    call-c [p_Z3_fixedpoint_add_constraint](c, d, e, lvl)
    return false
  public lostanza defn w_Z3_mk_optimize (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_optimize](c)
    return ret
  public lostanza defn w_Z3_optimize_inc_ref (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c [p_Z3_optimize_inc_ref](c, d)
    return false
  public lostanza defn w_Z3_optimize_dec_ref (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c [p_Z3_optimize_dec_ref](c, d)
    return false
  public lostanza defn w_Z3_optimize_assert (c:ptr<?>, o:ptr<?>, a:ptr<?>) -> ref<False> :
    call-c [p_Z3_optimize_assert](c, o, a)
    return false
  public lostanza defn w_Z3_optimize_assert_and_track (c:ptr<?>, o:ptr<?>, a:ptr<?>, t:ptr<?>) -> ref<False> :
    call-c [p_Z3_optimize_assert_and_track](c, o, a, t)
    return false
  public lostanza defn w_Z3_optimize_assert_soft (c:ptr<?>, o:ptr<?>, a:ptr<?>, weight:ptr<byte>, id:ptr<?>) -> int :
    val ret = call-c [p_Z3_optimize_assert_soft](c, o, a, weight, id)
    return ret
  public lostanza defn w_Z3_optimize_maximize (c:ptr<?>, o:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c [p_Z3_optimize_maximize](c, o, t)
    return ret
  public lostanza defn w_Z3_optimize_minimize (c:ptr<?>, o:ptr<?>, t:ptr<?>) -> int :
    val ret = call-c [p_Z3_optimize_minimize](c, o, t)
    return ret
  public lostanza defn w_Z3_optimize_push (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c [p_Z3_optimize_push](c, d)
    return false
  public lostanza defn w_Z3_optimize_pop (c:ptr<?>, d:ptr<?>) -> ref<False> :
    call-c [p_Z3_optimize_pop](c, d)
    return false
  public lostanza defn w_Z3_optimize_check (c:ptr<?>, o:ptr<?>, num_assumptions:int, assumptions:ptr<ptr<?>>) -> int :
    val ret = call-c [p_Z3_optimize_check](c, o, num_assumptions, assumptions)
    return ret
  public lostanza defn w_Z3_optimize_get_reason_unknown (c:ptr<?>, d:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_optimize_get_reason_unknown](c, d)
    return ret
  public lostanza defn w_Z3_optimize_get_model (c:ptr<?>, o:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_optimize_get_model](c, o)
    return ret
  public lostanza defn w_Z3_optimize_get_unsat_core (c:ptr<?>, o:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_optimize_get_unsat_core](c, o)
    return ret
  public lostanza defn w_Z3_optimize_set_params (c:ptr<?>, o:ptr<?>, p:ptr<?>) -> ref<False> :
    call-c [p_Z3_optimize_set_params](c, o, p)
    return false
  public lostanza defn w_Z3_optimize_get_param_descrs (c:ptr<?>, o:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_optimize_get_param_descrs](c, o)
    return ret
  public lostanza defn w_Z3_optimize_get_lower (c:ptr<?>, o:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_optimize_get_lower](c, o, idx)
    return ret
  public lostanza defn w_Z3_optimize_get_upper (c:ptr<?>, o:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_optimize_get_upper](c, o, idx)
    return ret
  public lostanza defn w_Z3_optimize_get_lower_as_vector (c:ptr<?>, o:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_optimize_get_lower_as_vector](c, o, idx)
    return ret
  public lostanza defn w_Z3_optimize_get_upper_as_vector (c:ptr<?>, o:ptr<?>, idx:int) -> ptr<?> :
    val ret = call-c [p_Z3_optimize_get_upper_as_vector](c, o, idx)
    return ret
  public lostanza defn w_Z3_optimize_to_string (c:ptr<?>, o:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_optimize_to_string](c, o)
    return ret
  public lostanza defn w_Z3_optimize_from_string (c:ptr<?>, o:ptr<?>, s:ptr<byte>) -> ref<False> :
    call-c [p_Z3_optimize_from_string](c, o, s)
    return false
  public lostanza defn w_Z3_optimize_from_file (c:ptr<?>, o:ptr<?>, s:ptr<byte>) -> ref<False> :
    call-c [p_Z3_optimize_from_file](c, o, s)
    return false
  public lostanza defn w_Z3_optimize_get_help (c:ptr<?>, t:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_optimize_get_help](c, t)
    return ret
  public lostanza defn w_Z3_optimize_get_statistics (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_optimize_get_statistics](c, d)
    return ret
  public lostanza defn w_Z3_optimize_get_assertions (c:ptr<?>, o:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_optimize_get_assertions](c, o)
    return ret
  public lostanza defn w_Z3_optimize_get_objectives (c:ptr<?>, o:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_optimize_get_objectives](c, o)
    return ret
  public lostanza defn w_Z3_optimize_register_model_eh (c:ptr<?>, o:ptr<?>, m:ptr<?>, ctx:ptr<?>, model_eh:ptr<( (ptr<?>) -> int )>) -> ref<False> :
    call-c [p_Z3_optimize_register_model_eh](c, o, m, ctx, model_eh)
    return false
  public lostanza defn w_Z3_mk_fpa_rounding_mode_sort (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_rounding_mode_sort](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_nearest_ties_to_even (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_round_nearest_ties_to_even](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_rne (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_rne](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_nearest_ties_to_away (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_round_nearest_ties_to_away](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_rna (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_rna](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_toward_positive (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_round_toward_positive](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_rtp (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_rtp](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_toward_negative (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_round_toward_negative](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_rtn (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_rtn](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_toward_zero (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_round_toward_zero](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_rtz (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_rtz](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort (c:ptr<?>, ebits:int, sbits:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sort](c, ebits, sbits)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_half (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sort_half](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_16 (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sort_16](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_single (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sort_single](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_32 (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sort_32](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_double (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sort_double](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_64 (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sort_64](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_quadruple (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sort_quadruple](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_sort_128 (c:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sort_128](c)
    return ret
  public lostanza defn w_Z3_mk_fpa_nan (c:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_nan](c, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_inf (c:ptr<?>, s:ptr<?>, negative:byte) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_inf](c, s, negative)
    return ret
  public lostanza defn w_Z3_mk_fpa_zero (c:ptr<?>, s:ptr<?>, negative:byte) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_zero](c, s, negative)
    return ret
  public lostanza defn w_Z3_mk_fpa_fp (c:ptr<?>, sgn:ptr<?>, exp:ptr<?>, sig:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_fp](c, sgn, exp, sig)
    return ret
  public lostanza defn w_Z3_mk_fpa_numeral_float (c:ptr<?>, v:float, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_numeral_float](c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_fpa_numeral_double (c:ptr<?>, v:double, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_numeral_double](c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_fpa_numeral_int (c:ptr<?>, v:int, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_numeral_int](c, v, ty)
    return ret
  public lostanza defn w_Z3_mk_fpa_numeral_int_uint (c:ptr<?>, sgn:byte, exp:int, sig:int, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_numeral_int_uint](c, sgn, exp, sig, ty)
    return ret
  public lostanza defn w_Z3_mk_fpa_numeral_int64_uint64 (c:ptr<?>, sgn:byte, exp:long, sig:long, ty:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_numeral_int64_uint64](c, sgn, exp, sig, ty)
    return ret
  public lostanza defn w_Z3_mk_fpa_abs (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_abs](c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_neg (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_neg](c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_add (c:ptr<?>, rm:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_add](c, rm, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_sub (c:ptr<?>, rm:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sub](c, rm, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_mul (c:ptr<?>, rm:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_mul](c, rm, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_div (c:ptr<?>, rm:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_div](c, rm, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_fma (c:ptr<?>, rm:ptr<?>, t1:ptr<?>, t2:ptr<?>, t3:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_fma](c, rm, t1, t2, t3)
    return ret
  public lostanza defn w_Z3_mk_fpa_sqrt (c:ptr<?>, rm:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_sqrt](c, rm, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_rem (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_rem](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_round_to_integral (c:ptr<?>, rm:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_round_to_integral](c, rm, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_min (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_min](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_max (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_max](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_leq (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_leq](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_lt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_lt](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_geq (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_geq](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_gt (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_gt](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_eq (c:ptr<?>, t1:ptr<?>, t2:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_eq](c, t1, t2)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_normal (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_is_normal](c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_subnormal (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_is_subnormal](c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_zero (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_is_zero](c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_infinite (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_is_infinite](c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_nan (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_is_nan](c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_negative (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_is_negative](c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_is_positive (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_is_positive](c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_bv (c:ptr<?>, bv:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_to_fp_bv](c, bv, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_float (c:ptr<?>, rm:ptr<?>, t:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_to_fp_float](c, rm, t, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_real (c:ptr<?>, rm:ptr<?>, t:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_to_fp_real](c, rm, t, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_signed (c:ptr<?>, rm:ptr<?>, t:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_to_fp_signed](c, rm, t, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_unsigned (c:ptr<?>, rm:ptr<?>, t:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_to_fp_unsigned](c, rm, t, s)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_ubv (c:ptr<?>, rm:ptr<?>, t:ptr<?>, sz:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_to_ubv](c, rm, t, sz)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_sbv (c:ptr<?>, rm:ptr<?>, t:ptr<?>, sz:int) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_to_sbv](c, rm, t, sz)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_real (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_to_real](c, t)
    return ret
  public lostanza defn w_Z3_fpa_get_ebits (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c [p_Z3_fpa_get_ebits](c, s)
    return ret
  public lostanza defn w_Z3_fpa_get_sbits (c:ptr<?>, s:ptr<?>) -> int :
    val ret = call-c [p_Z3_fpa_get_sbits](c, s)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_nan (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c [p_Z3_fpa_is_numeral_nan](c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_inf (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c [p_Z3_fpa_is_numeral_inf](c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_zero (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c [p_Z3_fpa_is_numeral_zero](c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_normal (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c [p_Z3_fpa_is_numeral_normal](c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_subnormal (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c [p_Z3_fpa_is_numeral_subnormal](c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_positive (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c [p_Z3_fpa_is_numeral_positive](c, t)
    return ret
  public lostanza defn w_Z3_fpa_is_numeral_negative (c:ptr<?>, t:ptr<?>) -> byte :
    val ret = call-c [p_Z3_fpa_is_numeral_negative](c, t)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_sign_bv (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fpa_get_numeral_sign_bv](c, t)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_significand_bv (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fpa_get_numeral_significand_bv](c, t)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_sign (c:ptr<?>, t:ptr<?>, sgn:ptr<int>) -> byte :
    val ret = call-c [p_Z3_fpa_get_numeral_sign](c, t, sgn)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_significand_string (c:ptr<?>, t:ptr<?>) -> ptr<byte> :
    val ret = call-c [p_Z3_fpa_get_numeral_significand_string](c, t)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_significand_uint64 (c:ptr<?>, t:ptr<?>, n:ptr<long>) -> byte :
    val ret = call-c [p_Z3_fpa_get_numeral_significand_uint64](c, t, n)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_exponent_string (c:ptr<?>, t:ptr<?>, biased:byte) -> ptr<byte> :
    val ret = call-c [p_Z3_fpa_get_numeral_exponent_string](c, t, biased)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_exponent_int64 (c:ptr<?>, t:ptr<?>, n:ptr<long>, biased:byte) -> byte :
    val ret = call-c [p_Z3_fpa_get_numeral_exponent_int64](c, t, n, biased)
    return ret
  public lostanza defn w_Z3_fpa_get_numeral_exponent_bv (c:ptr<?>, t:ptr<?>, biased:byte) -> ptr<?> :
    val ret = call-c [p_Z3_fpa_get_numeral_exponent_bv](c, t, biased)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_ieee_bv (c:ptr<?>, t:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_to_ieee_bv](c, t)
    return ret
  public lostanza defn w_Z3_mk_fpa_to_fp_int_real (c:ptr<?>, rm:ptr<?>, exp:ptr<?>, sig:ptr<?>, s:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_mk_fpa_to_fp_int_real](c, rm, exp, sig, s)
    return ret
  public lostanza defn w_Z3_fixedpoint_query_from_lvl (c:ptr<?>, d:ptr<?>, query:ptr<?>, lvl:int) -> int :
    val ret = call-c [p_Z3_fixedpoint_query_from_lvl](c, d, query, lvl)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_ground_sat_answer (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_get_ground_sat_answer](c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_rules_along_trace (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_get_rules_along_trace](c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_get_rule_names_along_trace (c:ptr<?>, d:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_get_rule_names_along_trace](c, d)
    return ret
  public lostanza defn w_Z3_fixedpoint_add_invariant (c:ptr<?>, d:ptr<?>, pred:ptr<?>, property:ptr<?>) -> ref<False> :
    call-c [p_Z3_fixedpoint_add_invariant](c, d, pred, property)
    return false
  public lostanza defn w_Z3_fixedpoint_get_reachable (c:ptr<?>, d:ptr<?>, pred:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_fixedpoint_get_reachable](c, d, pred)
    return ret
  public lostanza defn w_Z3_qe_model_project (c:ptr<?>, m:ptr<?>, num_bounds:int, bound:ptr<ptr<?>>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_qe_model_project](c, m, num_bounds, bound, body)
    return ret
  public lostanza defn w_Z3_qe_model_project_skolem (c:ptr<?>, m:ptr<?>, num_bounds:int, bound:ptr<ptr<?>>, body:ptr<?>, map:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_qe_model_project_skolem](c, m, num_bounds, bound, body, map)
    return ret
  public lostanza defn w_Z3_model_extrapolate (c:ptr<?>, m:ptr<?>, fml:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_model_extrapolate](c, m, fml)
    return ret
  public lostanza defn w_Z3_qe_lite (c:ptr<?>, vars:ptr<?>, body:ptr<?>) -> ptr<?> :
    val ret = call-c [p_Z3_qe_lite](c, vars, body)
    return ret
