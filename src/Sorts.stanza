defpackage z3/Sorts :
  import core
  import z3/Context
  import z3/Symbols
  import z3/AST/AST
  import z3/Wrapper
  import z3/Utils
  import z3/Enums/Z3_sort_kind

public lostanza deftype Sort:
  ctx:ptr<?>
  value:ptr<?>

public lostanza defn Sort (ctx:ptr<?>, p:ptr<?>) -> ref<Sort> :
  return new Sort{ctx, p}

public lostanza defn Sort (ctx:ref<Context>, p:ptr<?>) -> ref<Sort> :
  return new Sort{ctx.value, p}

public lostanza defn mk-string (a:ref<Sort>) -> ref<String> :
  val ret = w_Z3_sort_to_string(a.ctx, a.value)
  return String(ret)

public defmethod print (o:OutputStream, a:Sort) :
  print(o, "%_" % [mk-string(a)])

public lostanza defn DeclareSort (s:ref<ZSymbol>) -> ref<Sort> :
  val ret = w_Z3_mk_uninterpreted_sort(s.ctx, s.value)
  return Sort(s.ctx, ret)

public lostanza defn BoolSort (ctx:ref<Context>) -> ref<Sort> :
  val ret = w_Z3_mk_bool_sort(ctx.value)
  return Sort(ctx, ret)

public lostanza defn IntSort (ctx:ref<Context>) -> ref<Sort> :
  val ret = w_Z3_mk_int_sort(ctx.value)
  return Sort(ctx, ret)

public lostanza defn RealSort (ctx:ref<Context>) -> ref<Sort> :
  val ret = w_Z3_mk_real_sort(ctx.value)
  return Sort(ctx, ret)

public lostanza defn BitVecSort (ctx:ref<Context>, numbits:ref<Int>) -> ref<Sort> :
  val ret = w_Z3_mk_bv_sort(ctx.value, numbits.value )
  return Sort(ctx, ret)

public lostanza defn get-bv-sort-size (s:ref<Sort>) -> ref<Int> :
  val ret = w_Z3_get_bv_sort_size(s.ctx, s.value)
  return new Int{ret}

public lostanza defn FiniteDomainSort (s:ref<ZSymbol>, size:ref<Long>) -> ref<Sort> :
  val ret = w_Z3_mk_finite_domain_sort(s.ctx, s.value, size.value )
  return Sort(s.ctx, ret)

lostanza deftype LongPtr:
  ; Hack to work around issues
  v:long

public lostanza defn get-finite-domain-sort-size (s:ref<Sort>) -> ref<Long> :
  val temp = new LongPtr{0L}
  val ret = w_Z3_get_finite_domain_sort_size(s.ctx, s.value, addr!(temp.v))
  if to-bool(ret) != true:
    fatal("Failed to get Finite Domain Size")
  return new Long{temp.v}

public lostanza defn ArraySort (domain:ref<Sort>, range:ref<Sort>) -> ref<Sort> :
  val ret = w_Z3_mk_array_sort(domain.ctx, domain.value, range.value )
  return Sort(domain.ctx, ret)

public lostanza defn get-array-domain (a:ref<Sort>) -> ref<Sort> :
  val ret = w_Z3_get_array_sort_domain(a.ctx, a.value)
  return Sort(a.ctx, ret)

public lostanza defn get-array-range (a:ref<Sort>) -> ref<Sort> :
  val ret = w_Z3_get_array_sort_range(a.ctx, a.value)
  return Sort(a.ctx, ret)

; @TODO - there are some function pointers that need to be dealt with in the
;   following sorts that I'm not sure what to do with yet.

; public lostanza defn TupleSort (ctx:ref<Context>, name:ref<ZSymbol>, numFields:ref<Int>, fieldNames:ref<Tuple<ZSymbol>>, fieldSorts:ref<Tuple<Sort>>) -> ref<Sort> :
;   val ret = w_Z3_mk_tuple_sort(ctx.value, ... )
;   return Sort(ret)

; public lostanza defn EnumerationSort (ctx:ref<Context>, name:ref<ZSymbol>, numElements:ref<Int>, enumNames:ref<Tuple<ZSymbol>>) -> ref<Sort> :
;   val ret = w_Z3_mk_enumeration_sort(ctx.value, ... )
;   return Sort(ret)

; public lostanza defn ListSort (ctx:ref<Context>, name:ref<ZSymbol>, elemSort:ref<Sort>) -> ref<Sort> :


public lostanza defn get-symbol (s:ref<Sort>) -> ref<ZSymbol> :
  val ret = w_Z3_get_sort_name(s.ctx, s.value)
  return new ZSymbol{s.ctx, ret}

public lostanza defn get-name (s:ref<Sort>) -> ref<String> :
  val symb = get-symbol(s)
  return mk-string(symb)

public lostanza defn get-id (s:ref<Sort>) -> ref<Int> :
  val ret = w_Z3_get_sort_id(s.ctx, s.value)
  return new Int{ret}

public lostanza defn get-kind (s:ref<Sort>) ->  ref<Z3_sort_kind> :
  val ret = w_Z3_get_sort_kind(s.ctx, s.value)
  return Z3_sort_kind(ret)

public lostanza defn to-ast (s:ref<Sort>) -> ref<AST> :
  val ret = w_Z3_sort_to_ast(s.ctx, s.value)
  return AST(s.ctx, ret)

public lostanza defn equal? (s1:ref<Sort>, s2:ref<Sort>) -> ref<True|False> :
  val result = w_Z3_is_eq_sort(s1.ctx, s1.value, s2.value)
  return to-bool(result)

public lostanza defn get-relation-arity (s:ref<Sort>) -> ref<Int> :
  val ret = w_Z3_get_relation_arity(s.ctx, s.value)
  return new Int{ret}

public lostanza defn get-relation-column (s:ref<Sort>, col:ref<Int>) -> ref<Sort> :
  val ret = w_Z3_get_relation_column(s.ctx, s.value, col.value)
  return Sort(s.ctx, ret)

public lostanza defn to-array (args:ref<Tuple<Sort>>) -> ptr<?> :
  val cnt = length(args).value
  val buf:ptr<ptr<?>> = call-c clib/malloc(cnt * sizeof(ptr<?>))
  if buf == null :
    fatal("ENOMEM")
  for (var i:int = 0, i < cnt, i = i + 1 ) :
    buf[i] = args.items[i].value
  return buf
