defpackage z3/Parameters :
  import core
  import z3/Context
  import z3/Symbols
  import z3/Wrapper
  import z3/Enums/Z3_param_kind

lostanza defn inc-params-ref (ctx:ptr<?>, params:ptr<?>) -> ref<False> :
  w_Z3_params_inc_ref(ctx, params)
  return false

lostanza defn dec-params-ref (ctx:ptr<?>, params:ptr<?>) -> ref<False> :
  w_Z3_params_dec_ref(ctx, params)
  return false

lostanza deftype ParametersFinalizer <: Finalizer :
  ctx:ptr<?>
  value:ptr<?>

lostanza defmethod run (self:ref<ParametersFinalizer>) -> ref<False> :
  dec-params-ref(self.ctx, self.value)
  return false

public lostanza deftype Parameters <: Unique :
  ctx:ptr<?>
  value:ptr<?>

lostanza defn Parameters (ctx:ptr<?>, p:ptr<?>) -> ref<Parameters> :
  val ret = new Parameters{ctx, p}
  inc-params-ref(ctx, p)
  add-finalizer(new ParametersFinalizer{ctx, p}, ret)
  return ret

public lostanza defn Parameters (ctx:ref<Context>) -> ref<Parameters> :
  val p:ptr<?> = w_Z3_mk_params(ctx.value)
  if p == null :
    fatal("Memory Error")
  return Parameters(ctx.value, p)

public lostanza defn Parameters (other:ref<Parameters>) -> ref<Parameters> :
  return Parameters(other.ctx, other.value)

public lostanza defn set (self:ref<Parameters>, symbol:ref<ZSymbol>, v:ref<True|False>) -> ref<False>:
  var bVal:int = 0
  if v == true : bVal = 1
  w_Z3_params_set_bool(self.ctx, self.value, symbol.value, bVal)
  return false

public lostanza defn set (self:ref<Parameters>, symbol:ref<ZSymbol>, v:ref<Int>) -> ref<False>:
  w_Z3_params_set_uint(self.ctx, self.value, symbol.value, v.value)
  return false

public lostanza defn set (self:ref<Parameters>, symbol:ref<ZSymbol>, v:ref<Double>) -> ref<False>:
  w_Z3_params_set_double(self.ctx, self.value, symbol.value, v.value)
  return false

public lostanza defn set (self:ref<Parameters>, symbol:ref<ZSymbol>, v:ref<ZSymbol>) -> ref<False>:
  w_Z3_params_set_symbol(self.ctx, self.value, symbol.value, v.value)
  return false

public lostanza defn validate (self:ref<Parameters>, descr:ref<ParamDescriptors>) -> ref<False> :
  w_Z3_params_validate(self.ctx, self.value, descr.value)
  return false

; Parameter Descriptors
;   These get generated by different objects.

lostanza deftype ParamDescriptorsFinalizer <: Finalizer :
  ctx:ptr<?>
  value:ptr<?>

lostanza defmethod run (self:ref<ParamDescriptorsFinalizer>) -> ref<False> :
  w_Z3_param_descrs_dec_ref(self.ctx, self.value)
  return false

public lostanza deftype ParamDescriptors <: Unique :
  ctx:ptr<?>
  value:ptr<?>

public lostanza defn ParamDescriptors (ctx:ptr<?>, p:ptr<?>) -> ref<ParamDescriptors> :
  ; This should primarily only be used by the
  ;   Z3_*_get_param_descrs methods.
  val ret = new ParamDescriptors{ctx, p}
  w_Z3_param_descrs_inc_ref(ctx, p)
  add-finalizer(new ParamDescriptorsFinalizer{ctx, p}, ret)
  return ret

public lostanza defn ParamDescriptors (ctx:ref<Context>, p:ptr<?>) -> ref<ParamDescriptors> :
  return ParamDescriptors(ctx.value, p)

public lostanza defn get-kind (self:ref<ParamDescriptors>, symbol:ref<ZSymbol>) -> ref<Z3_param_kind> :
  val ret = w_Z3_param_descrs_get_kind(self.ctx, self.value, symbol.value)
  return Z3_param_kind(ret)

public lostanza defn get-size (self:ref<ParamDescriptors>) -> ref<Int> :
  val ret = w_Z3_param_descrs_size(self.ctx, self.value)
  return new Int{ret}

public lostanza defn get-symbol (self:ref<ParamDescriptors>, i:ref<Int>) -> ref<ZSymbol> :
  val ret = w_Z3_param_descrs_get_name(self.ctx, self.value, i.value)
  return new ZSymbol{self.ctx, ret}

public lostanza defn get-name (self:ref<ParamDescriptors>, i:ref<Int>) -> ref<String> :
  return mk-string(get-symbol(self, i))

lostanza defn mk-string (self:ref<ParamDescriptors>) -> ref<String> :
  val ret = w_Z3_param_descrs_to_string(self.ctx, self.value)
  return String(ret)

public defmethod print (o:OutputStream, pd:ParamDescriptors) :
  print(o, mk-string(pd))