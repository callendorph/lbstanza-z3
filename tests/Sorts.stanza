#use-added-syntax(tests)
defpackage z3/tests/Sorts :
  import core
  import z3/Context
  import z3/Sorts
  import z3/ListSort
  import z3/AST/Functions
  import z3/Symbols
  import z3/Enums/Z3_sort_kind

deftest(sorts) test-bool-sort:

  val cfg = Config()
  val ctx = Context(cfg)

  val boolSort = BoolSort(ctx)

  val id = get-id(boolSort)
  val symb = get-symbol(boolSort)
  #EXPECT(get-symbol-string(symb) == "Bool")
  val name = get-name(boolSort)
  #EXPECT(name == "Bool")

  val bAST = to-ast(boolSort)

  val kind = get-kind(boolSort)
  #EXPECT(kind is Z3_BOOL_SORT)

deftest(sorts) test-int-sort:

  val cfg = Config()
  val ctx = Context(cfg)

  val iSort = IntSort(ctx)

  val id = get-id(iSort)
  val nameSymb = get-symbol(iSort)
  #EXPECT(get-symbol-string(nameSymb) == "Int")

  val bAST = to-ast(iSort)

  val kind = get-kind(iSort)
  #EXPECT(kind is Z3_INT_SORT)

deftest(sorts) test-real-sort:

  val cfg = Config()
  val ctx = Context(cfg)

  val rSort = RealSort(ctx)

  val id = get-id(rSort)
  val nameSymb = get-symbol(rSort)
  #EXPECT(get-symbol-string(nameSymb) == "Real")

  val bAST = to-ast(rSort)

  val kind = get-kind(rSort)
  #EXPECT(kind is Z3_REAL_SORT)

deftest(sorts) test-bitvec-sort:

  val cfg = Config()
  val ctx = Context(cfg)

  val bvSort = BitVecSort(ctx, 32)

  val bSize = get-bv-sort-size(bvSort)
  #EXPECT(bSize == 32)

  val id = get-id(bvSort)
  val nameSymb = get-symbol(bvSort)
  #EXPECT(get-symbol-string(nameSymb) == "bv")

  val bAST = to-ast(bvSort)

  val kind = get-kind(bvSort)
  #EXPECT(kind is Z3_BV_SORT)

deftest(sorts) test-finite-domain-sort:

  val cfg = Config()
  val ctx = Context(cfg)

  val d = ZSymbol(ctx, "d")

  val fSort = FiniteDomainSort(d, 100L)

  val dSize = get-finite-domain-sort-size(fSort)
  #EXPECT(dSize == 100L)

  val id = get-id(fSort)
  val name = get-name(fSort)
  #EXPECT(name == "d")

  val bAST = to-ast(fSort)

  val kind = get-kind(fSort)
  #EXPECT(kind is Z3_FINITE_DOMAIN_SORT)


deftest(sorts) test-array-sort:

  val cfg = Config()
  val ctx = Context(cfg)

  val dSort = IntSort(ctx)
  val rSort = RealSort(ctx)
  val aSort = ArraySort(dSort, rSort)

  val id = get-id(aSort)
  val nameSymb = get-symbol(aSort)
  #EXPECT(get-symbol-string(nameSymb) == "Array")

  val bAST = to-ast(aSort)

  val kind = get-kind(aSort)
  #EXPECT(kind is Z3_ARRAY_SORT)

  val obsDomain = get-array-domain(aSort)
  #EXPECT(obsDomain == dSort)
  val obsRange = get-array-range(aSort)
  #EXPECT(obsRange == rSort)

deftest(sorts) test-list-sort:
  val cfg = Config()
  val ctx = Context(cfg)

  val name = ZSymbol(ctx, "L")
  val isort = IntSort(ctx)
  val s = ListSort(name, isort)

  val kind = get-kind(sort(s))
  #EXPECT(kind is Z3_DATATYPE_SORT)

  val bAST = to-ast(sort(s))

  val inVecs = [
    [empty_list(s), "nil"],
    [is_empty(s), "is"],
    [cons(s), "cons"],
    [is_cons(s), "is"],
    [head(s), "head"],
    [tail(s), "tail"]
  ]

  for inVec in inVecs do:
    val [f, exp] = inVec
    val obs = get-name(f)
    #EXPECT(obs == exp)
