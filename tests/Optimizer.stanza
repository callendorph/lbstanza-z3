#use-added-syntax(tests)
defpackage z3/tests/Optimizer :
  import core
  import z3/Context
  import z3/Sorts
  import z3/Symbols
  import z3/Optimize
  import z3/AST/AST
  import z3/AST/Functions
  import z3/AST/Numerals
  import z3/AST/Operators
  import z3/AST/Sets
  import z3/Model
  import z3/Shellable
  import z3/Constrainable

val epsilon = 1.0e-3
#if-defined(TESTING) :
  defn almost-equal (obs, exp, epsilon:Double) -> True|False :
    abs(obs - exp) < epsilon


defn create-E24 (ctx:Context) -> AST :
  val series = [1.0, 1.1, 1.2, 1.3, 1.5, 1.6, 1.8, 2.0, 2.2, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.3, 4.7, 5.1, 5.6, 6.2, 6.8, 7.5, 8.2, 9.1]
  val series-10k = map({_ * 10.0e3}, series)
  create-real-set(ctx, series-10k)

deftest(optimize) test-divider-min :

  val cfg = Config()
  val ctx = Context(cfg)

  val E24 = create-E24(ctx)

  val o = Optimizer(ctx)
  val [R1, R2] = to-tuple(RealVars(ctx, ["R1", "R2"])) as [AST, AST]
  val [Vin, Vout] = to-tuple(RealVars(ctx, ["Vin", "Vout"])) as [AST, AST]
  val TargVout = RealVar(ctx, "TargVout")

  assert-on(o, z-equal?(R1, 100.0e3))
  assert-on(o, z-equal?(Vin, 24.0))
  assert-on(o, z-equal?(TargVout, 6.0))

  assert-on(o, R2 > 0.0)
  assert-on(o, mk-set-member?(R2, E24))

  within shell(o):
    assert-on(o, z-equal?(Vout, Vin * (R2 / (R1 + R2))))

    val err = pow((TargVout - Vout) / TargVout, 2.0)
    minimize(o, err)

    val r = check(o, [])
    println("Result: %_" % [r])

    val m = get-model(o)
    println("%~" % [m])

    var ret = evaluate!(m, R1)
    val R1Val = get-numeral-double(ret)
    #EXPECT(R1Val == 100000.0)

    ret = evaluate!(m, R2)
    val R2Val = get-numeral-double(ret)
    #EXPECT(almost-equal(R2Val, 33000.0, epsilon))

    ret = evaluate!(m, Vout)
    val VoutVal = get-numeral-double(ret)
    #EXPECT(almost-equal(VoutVal, 5.95489, epsilon))
