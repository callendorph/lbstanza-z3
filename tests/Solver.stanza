#use-added-syntax(tests)
defpackage z3/tests/Solver :
  import core
  import z3/Context
  import z3/Sorts
  import z3/Solver
  import z3/AST/AST
  import z3/AST/Functions
  import z3/AST/Numerals
  import z3/AST/Operators
  import z3/AST/Sets
  import z3/Model
  import z3/Shellable
  import z3/Constrainable


val epsilon = 1.0e-3
#if-defined(TESTING) :
  defn almost-equal (obs, exp, epsilon:Double) -> True|False :
    abs(obs - exp) < epsilon


deftest(solver) test-basic:

  val cfg = Config()
  val ctx = Context(cfg)

  val s = Solver(ctx)
  val name = "x"
  val x = IntVar(ctx, name)
  val y = IntVar(ctx, "y")

  assert-on(s, x > 2)
  assert-on(s, y < 10)
  ; assert-on(s, z-equal?(x + (y * 2), 7))
  assert-on(s, x + (y * 2) == 7)

  val r = check(s)
  println("Result: %_" % [r])

  val m = get-model(s)
  println("%~" % [m])

  var ret = evaluate!(m, x)
  var xVal = get-numeral-int(ret)
  #EXPECT(xVal == 7)

  ret = evaluate!(m, y)
  val yVal = get-numeral-int(ret)
  #EXPECT(yVal == 0)

  ret = m[x]
  xVal = to-int(ret)
  #EXPECT(xVal == 7)

deftest(solver) test-divider :

  val cfg = Config()
  val ctx = Context(cfg)

  val s = Solver(ctx)
  val [R1, R2] = to-tuple(RealVars(ctx, ["R1", "R2"])) as [AST, AST]
  val [Vin, Vout] = to-tuple(RealVars(ctx, ["Vin", "Vout"])) as [AST, AST]

  assert-on(s, R1 == 100.0e3)
  assert-on(s, Vin == 24.0)
  assert-on(s, Vout == 6.0)

  assert-on(s, R2 > 0.0)
  assert-on(s, Vout == Vin * (R2 / (R1 + R2)))

  within shell(s):
    assert-on(s, R1 > 0.0)
    val r = check(s)
    println("Result: %_" % [r])

  val r = check(s)
  println("Result: %_" % [r])

  val m = get-model(s)
  println("%~" % [m])

  var ret = evaluate!(m, R1)
  val R1Val = get-numeral-double(ret)
  #EXPECT(R1Val == 100000.0)

  ret = m[R2]
  val R2Val = to-double(ret)
  #EXPECT(almost-equal(R2Val, 33333.3333, epsilon))


deftest(solver) test-selecting-from-set :

  val series = [1.0, 1.1, 1.2, 1.3, 1.5, 1.6, 1.8, 2.0, 2.2, 2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.3, 4.7, 5.1, 5.6, 6.2, 6.8, 7.5, 8.2, 9.1]

  val cfg = Config()
  val ctx = Context(cfg)

  val reals = RealSort(ctx)
  var E24 = mk-empty-set(reals)

  for v in series do :
    E24 = mk-set-add(E24, mk-real(ctx, 10.0e3 * v))

  ; println("E24: %~" % [E24])
  val s = Solver(ctx)

  val R1 = RealVar(ctx, "R1")

  assert-on(s, R1 > 12.0e3)
  assert-on(s, R1 < 43.0e3)
  assert-on(s, R1 != 36.0e3)
  assert-on(s, mk-set-member?(R1, E24))

  val r = check(s)
  println("Result: %_" % [r])

  val m = get-model(s)
  println("%~" % [m])

  val numConsts = get-num-consts(m)
  #EXPECT(numConsts == 1)

  val numFuncs = get-num-funcs(m)
  #EXPECT(numFuncs == 0)

  val R1Func = get-const-decl(m, 0)
  println("Const: %~" % [R1Func])

  val ret = evaluate!(m, R1)
  val R1Val = get-numeral-double(ret)
  #EXPECT(almost-equal(R1Val, 33000.0, epsilon))
